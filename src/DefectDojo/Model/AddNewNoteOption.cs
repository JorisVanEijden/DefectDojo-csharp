/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// AddNewNoteOption
    /// </summary>
    [DataContract]
    public partial class AddNewNoteOption :  IEquatable<AddNewNoteOption>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddNewNoteOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddNewNoteOption() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddNewNoteOption" /> class.
        /// </summary>
        /// <param name="entry">entry (required).</param>
        /// <param name="_private">_private.</param>
        /// <param name="noteType">noteType.</param>
        public AddNewNoteOption(string entry = default(string), bool? _private = default(bool?), int? noteType = default(int?))
        {
            // to ensure "entry" is required (not null)
            if (entry == null)
            {
                throw new InvalidDataException("entry is a required property for AddNewNoteOption and cannot be null");
            }
            else
            {
                this.Entry = entry;
            }
            this.Private = _private;
            this.NoteType = noteType;
        }
        
        /// <summary>
        /// Gets or Sets Entry
        /// </summary>
        [DataMember(Name="entry", EmitDefaultValue=false)]
        public string Entry { get; set; }

        /// <summary>
        /// Gets or Sets Private
        /// </summary>
        [DataMember(Name="private", EmitDefaultValue=false)]
        public bool? Private { get; set; }

        /// <summary>
        /// Gets or Sets NoteType
        /// </summary>
        [DataMember(Name="note_type", EmitDefaultValue=false)]
        public int? NoteType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddNewNoteOption {\n");
            sb.Append("  Entry: ").Append(Entry).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  NoteType: ").Append(NoteType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddNewNoteOption);
        }

        /// <summary>
        /// Returns true if AddNewNoteOption instances are equal
        /// </summary>
        /// <param name="input">Instance of AddNewNoteOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddNewNoteOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Entry == input.Entry ||
                    (this.Entry != null &&
                    this.Entry.Equals(input.Entry))
                ) && 
                (
                    this.Private == input.Private ||
                    (this.Private != null &&
                    this.Private.Equals(input.Private))
                ) && 
                (
                    this.NoteType == input.NoteType ||
                    (this.NoteType != null &&
                    this.NoteType.Equals(input.NoteType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Entry != null)
                    hashCode = hashCode * 59 + this.Entry.GetHashCode();
                if (this.Private != null)
                    hashCode = hashCode * 59 + this.Private.GetHashCode();
                if (this.NoteType != null)
                    hashCode = hashCode * 59 + this.NoteType.GetHashCode();
                return hashCode;
            }
        }
    }

}
