/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// AcceptedRisk
    /// </summary>
    [DataContract]
    public partial class AcceptedRisk :  IEquatable<AcceptedRisk>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AcceptedRisk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AcceptedRisk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AcceptedRisk" /> class.
        /// </summary>
        /// <param name="cve">CVE or vulnerability id to accept findings for (required).</param>
        /// <param name="justification">Justification for accepting findings with this CVE (required).</param>
        /// <param name="acceptedBy">Name or email of person who accepts the risk (required).</param>
        public AcceptedRisk(string cve = default(string), string justification = default(string), string acceptedBy = default(string))
        {
            // to ensure "cve" is required (not null)
            if (cve == null)
            {
                throw new InvalidDataException("cve is a required property for AcceptedRisk and cannot be null");
            }
            else
            {
                this.Cve = cve;
            }
            // to ensure "justification" is required (not null)
            if (justification == null)
            {
                throw new InvalidDataException("justification is a required property for AcceptedRisk and cannot be null");
            }
            else
            {
                this.Justification = justification;
            }
            // to ensure "acceptedBy" is required (not null)
            if (acceptedBy == null)
            {
                throw new InvalidDataException("acceptedBy is a required property for AcceptedRisk and cannot be null");
            }
            else
            {
                this.AcceptedBy = acceptedBy;
            }
        }
        
        /// <summary>
        /// CVE or vulnerability id to accept findings for
        /// </summary>
        /// <value>CVE or vulnerability id to accept findings for</value>
        [DataMember(Name="cve", EmitDefaultValue=false)]
        public string Cve { get; set; }

        /// <summary>
        /// Justification for accepting findings with this CVE
        /// </summary>
        /// <value>Justification for accepting findings with this CVE</value>
        [DataMember(Name="justification", EmitDefaultValue=false)]
        public string Justification { get; set; }

        /// <summary>
        /// Name or email of person who accepts the risk
        /// </summary>
        /// <value>Name or email of person who accepts the risk</value>
        [DataMember(Name="accepted_by", EmitDefaultValue=false)]
        public string AcceptedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AcceptedRisk {\n");
            sb.Append("  Cve: ").Append(Cve).Append("\n");
            sb.Append("  Justification: ").Append(Justification).Append("\n");
            sb.Append("  AcceptedBy: ").Append(AcceptedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AcceptedRisk);
        }

        /// <summary>
        /// Returns true if AcceptedRisk instances are equal
        /// </summary>
        /// <param name="input">Instance of AcceptedRisk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AcceptedRisk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cve == input.Cve ||
                    (this.Cve != null &&
                    this.Cve.Equals(input.Cve))
                ) && 
                (
                    this.Justification == input.Justification ||
                    (this.Justification != null &&
                    this.Justification.Equals(input.Justification))
                ) && 
                (
                    this.AcceptedBy == input.AcceptedBy ||
                    (this.AcceptedBy != null &&
                    this.AcceptedBy.Equals(input.AcceptedBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cve != null)
                    hashCode = hashCode * 59 + this.Cve.GetHashCode();
                if (this.Justification != null)
                    hashCode = hashCode * 59 + this.Justification.GetHashCode();
                if (this.AcceptedBy != null)
                    hashCode = hashCode * 59 + this.AcceptedBy.GetHashCode();
                return hashCode;
            }
        }
    }

}
