/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// FindingToFindingImages
    /// </summary>
    [DataContract]
    public partial class FindingToFindingImages :  IEquatable<FindingToFindingImages>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FindingToFindingImages" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FindingToFindingImages() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FindingToFindingImages" /> class.
        /// </summary>
        /// <param name="findingId">findingId (required).</param>
        /// <param name="images">images (required).</param>
        public FindingToFindingImages(int? findingId = default(int?), List<FindingImage> images = default(List<FindingImage>))
        {
            // to ensure "findingId" is required (not null)
            if (findingId == null)
            {
                throw new InvalidDataException("findingId is a required property for FindingToFindingImages and cannot be null");
            }
            else
            {
                this.FindingId = findingId;
            }
            // to ensure "images" is required (not null)
            if (images == null)
            {
                throw new InvalidDataException("images is a required property for FindingToFindingImages and cannot be null");
            }
            else
            {
                this.Images = images;
            }
        }
        
        /// <summary>
        /// Gets or Sets FindingId
        /// </summary>
        [DataMember(Name="finding_id", EmitDefaultValue=false)]
        public int? FindingId { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name="images", EmitDefaultValue=false)]
        public List<FindingImage> Images { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindingToFindingImages {\n");
            sb.Append("  FindingId: ").Append(FindingId).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindingToFindingImages);
        }

        /// <summary>
        /// Returns true if FindingToFindingImages instances are equal
        /// </summary>
        /// <param name="input">Instance of FindingToFindingImages to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindingToFindingImages input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FindingId == input.FindingId ||
                    (this.FindingId != null &&
                    this.FindingId.Equals(input.FindingId))
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FindingId != null)
                    hashCode = hashCode * 59 + this.FindingId.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                return hashCode;
            }
        }
    }

}
