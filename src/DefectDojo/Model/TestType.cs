/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// TestType
    /// </summary>
    [DataContract]
    public partial class TestType :  IEquatable<TestType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestType" /> class.
        /// </summary>
        /// <param name="tags">tags.</param>
        /// <param name="name">name (required).</param>
        /// <param name="staticTool">staticTool.</param>
        /// <param name="dynamicTool">dynamicTool.</param>
        public TestType(List<string> tags = default(List<string>), string name = default(string), bool? staticTool = default(bool?), bool? dynamicTool = default(bool?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for TestType and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Tags = tags;
            this.StaticTool = staticTool;
            this.DynamicTool = dynamicTool;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets StaticTool
        /// </summary>
        [DataMember(Name="static_tool", EmitDefaultValue=false)]
        public bool? StaticTool { get; set; }

        /// <summary>
        /// Gets or Sets DynamicTool
        /// </summary>
        [DataMember(Name="dynamic_tool", EmitDefaultValue=false)]
        public bool? DynamicTool { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TestType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StaticTool: ").Append(StaticTool).Append("\n");
            sb.Append("  DynamicTool: ").Append(DynamicTool).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestType);
        }

        /// <summary>
        /// Returns true if TestType instances are equal
        /// </summary>
        /// <param name="input">Instance of TestType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StaticTool == input.StaticTool ||
                    (this.StaticTool != null &&
                    this.StaticTool.Equals(input.StaticTool))
                ) && 
                (
                    this.DynamicTool == input.DynamicTool ||
                    (this.DynamicTool != null &&
                    this.DynamicTool.Equals(input.DynamicTool))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.StaticTool != null)
                    hashCode = hashCode * 59 + this.StaticTool.GetHashCode();
                if (this.DynamicTool != null)
                    hashCode = hashCode * 59 + this.DynamicTool.GetHashCode();
                return hashCode;
            }
        }
    }

}
