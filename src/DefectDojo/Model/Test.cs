/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// Test
    /// </summary>
    [DataContract]
    public partial class Test :  IEquatable<Test>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Test" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Test() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Test" /> class.
        /// </summary>
        /// <param name="tags">tags.</param>
        /// <param name="title">title.</param>
        /// <param name="description">description.</param>
        /// <param name="targetStart">targetStart (required).</param>
        /// <param name="targetEnd">targetEnd (required).</param>
        /// <param name="percentComplete">percentComplete.</param>
        /// <param name="version">version.</param>
        /// <param name="buildId">Build ID that was tested, a reimport may update this field..</param>
        /// <param name="commitHash">Commit hash tested, a reimport may update this field..</param>
        /// <param name="branchTag">Tag or branch that was tested, a reimport may update this field..</param>
        /// <param name="lead">lead.</param>
        /// <param name="testType">testType (required).</param>
        /// <param name="environment">environment.</param>
        public Test(List<string> tags = default(List<string>), string title = default(string), string description = default(string), DateTime? targetStart = default(DateTime?), DateTime? targetEnd = default(DateTime?), int? percentComplete = default(int?), string version = default(string), string buildId = default(string), string commitHash = default(string), string branchTag = default(string), int? lead = default(int?), int? testType = default(int?), int? environment = default(int?))
        {
            // to ensure "targetStart" is required (not null)
            if (targetStart == null)
            {
                throw new InvalidDataException("targetStart is a required property for Test and cannot be null");
            }
            else
            {
                this.TargetStart = targetStart;
            }
            // to ensure "targetEnd" is required (not null)
            if (targetEnd == null)
            {
                throw new InvalidDataException("targetEnd is a required property for Test and cannot be null");
            }
            else
            {
                this.TargetEnd = targetEnd;
            }
            // to ensure "testType" is required (not null)
            if (testType == null)
            {
                throw new InvalidDataException("testType is a required property for Test and cannot be null");
            }
            else
            {
                this.TestType = testType;
            }
            this.Tags = tags;
            this.Title = title;
            this.Description = description;
            this.PercentComplete = percentComplete;
            this.Version = version;
            this.BuildId = buildId;
            this.CommitHash = commitHash;
            this.BranchTag = branchTag;
            this.Lead = lead;
            this.Environment = environment;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets TestTypeName
        /// </summary>
        [DataMember(Name="test_type_name", EmitDefaultValue=false)]
        public string TestTypeName { get; private set; }

        /// <summary>
        /// Gets or Sets FindingGroups
        /// </summary>
        [DataMember(Name="finding_groups", EmitDefaultValue=false)]
        public List<FindingGroup> FindingGroups { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets TargetStart
        /// </summary>
        [DataMember(Name="target_start", EmitDefaultValue=false)]
        public DateTime? TargetStart { get; set; }

        /// <summary>
        /// Gets or Sets TargetEnd
        /// </summary>
        [DataMember(Name="target_end", EmitDefaultValue=false)]
        public DateTime? TargetEnd { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedTime
        /// </summary>
        [DataMember(Name="estimated_time", EmitDefaultValue=false)]
        public string EstimatedTime { get; private set; }

        /// <summary>
        /// Gets or Sets ActualTime
        /// </summary>
        [DataMember(Name="actual_time", EmitDefaultValue=false)]
        public string ActualTime { get; private set; }

        /// <summary>
        /// Gets or Sets PercentComplete
        /// </summary>
        [DataMember(Name="percent_complete", EmitDefaultValue=false)]
        public int? PercentComplete { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; private set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }

        /// <summary>
        /// Temporary archive with tags from the previous tagging library we used
        /// </summary>
        /// <value>Temporary archive with tags from the previous tagging library we used</value>
        [DataMember(Name="tags_from_django_tagging", EmitDefaultValue=false)]
        public string TagsFromDjangoTagging { get; private set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Build ID that was tested, a reimport may update this field.
        /// </summary>
        /// <value>Build ID that was tested, a reimport may update this field.</value>
        [DataMember(Name="build_id", EmitDefaultValue=false)]
        public string BuildId { get; set; }

        /// <summary>
        /// Commit hash tested, a reimport may update this field.
        /// </summary>
        /// <value>Commit hash tested, a reimport may update this field.</value>
        [DataMember(Name="commit_hash", EmitDefaultValue=false)]
        public string CommitHash { get; set; }

        /// <summary>
        /// Tag or branch that was tested, a reimport may update this field.
        /// </summary>
        /// <value>Tag or branch that was tested, a reimport may update this field.</value>
        [DataMember(Name="branch_tag", EmitDefaultValue=false)]
        public string BranchTag { get; set; }

        /// <summary>
        /// Gets or Sets Engagement
        /// </summary>
        [DataMember(Name="engagement", EmitDefaultValue=false)]
        public int? Engagement { get; private set; }

        /// <summary>
        /// Gets or Sets Lead
        /// </summary>
        [DataMember(Name="lead", EmitDefaultValue=false)]
        public int? Lead { get; set; }

        /// <summary>
        /// Gets or Sets TestType
        /// </summary>
        [DataMember(Name="test_type", EmitDefaultValue=false)]
        public int? TestType { get; set; }

        /// <summary>
        /// Gets or Sets Environment
        /// </summary>
        [DataMember(Name="environment", EmitDefaultValue=false)]
        public int? Environment { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<Note> Notes { get; private set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public List<ModelFile> Files { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Test {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TestTypeName: ").Append(TestTypeName).Append("\n");
            sb.Append("  FindingGroups: ").Append(FindingGroups).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TargetStart: ").Append(TargetStart).Append("\n");
            sb.Append("  TargetEnd: ").Append(TargetEnd).Append("\n");
            sb.Append("  EstimatedTime: ").Append(EstimatedTime).Append("\n");
            sb.Append("  ActualTime: ").Append(ActualTime).Append("\n");
            sb.Append("  PercentComplete: ").Append(PercentComplete).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  TagsFromDjangoTagging: ").Append(TagsFromDjangoTagging).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  BuildId: ").Append(BuildId).Append("\n");
            sb.Append("  CommitHash: ").Append(CommitHash).Append("\n");
            sb.Append("  BranchTag: ").Append(BranchTag).Append("\n");
            sb.Append("  Engagement: ").Append(Engagement).Append("\n");
            sb.Append("  Lead: ").Append(Lead).Append("\n");
            sb.Append("  TestType: ").Append(TestType).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Test);
        }

        /// <summary>
        /// Returns true if Test instances are equal
        /// </summary>
        /// <param name="input">Instance of Test to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Test input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TestTypeName == input.TestTypeName ||
                    (this.TestTypeName != null &&
                    this.TestTypeName.Equals(input.TestTypeName))
                ) && 
                (
                    this.FindingGroups == input.FindingGroups ||
                    this.FindingGroups != null &&
                    this.FindingGroups.SequenceEqual(input.FindingGroups)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TargetStart == input.TargetStart ||
                    (this.TargetStart != null &&
                    this.TargetStart.Equals(input.TargetStart))
                ) && 
                (
                    this.TargetEnd == input.TargetEnd ||
                    (this.TargetEnd != null &&
                    this.TargetEnd.Equals(input.TargetEnd))
                ) && 
                (
                    this.EstimatedTime == input.EstimatedTime ||
                    (this.EstimatedTime != null &&
                    this.EstimatedTime.Equals(input.EstimatedTime))
                ) && 
                (
                    this.ActualTime == input.ActualTime ||
                    (this.ActualTime != null &&
                    this.ActualTime.Equals(input.ActualTime))
                ) && 
                (
                    this.PercentComplete == input.PercentComplete ||
                    (this.PercentComplete != null &&
                    this.PercentComplete.Equals(input.PercentComplete))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.TagsFromDjangoTagging == input.TagsFromDjangoTagging ||
                    (this.TagsFromDjangoTagging != null &&
                    this.TagsFromDjangoTagging.Equals(input.TagsFromDjangoTagging))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.BuildId == input.BuildId ||
                    (this.BuildId != null &&
                    this.BuildId.Equals(input.BuildId))
                ) && 
                (
                    this.CommitHash == input.CommitHash ||
                    (this.CommitHash != null &&
                    this.CommitHash.Equals(input.CommitHash))
                ) && 
                (
                    this.BranchTag == input.BranchTag ||
                    (this.BranchTag != null &&
                    this.BranchTag.Equals(input.BranchTag))
                ) && 
                (
                    this.Engagement == input.Engagement ||
                    (this.Engagement != null &&
                    this.Engagement.Equals(input.Engagement))
                ) && 
                (
                    this.Lead == input.Lead ||
                    (this.Lead != null &&
                    this.Lead.Equals(input.Lead))
                ) && 
                (
                    this.TestType == input.TestType ||
                    (this.TestType != null &&
                    this.TestType.Equals(input.TestType))
                ) && 
                (
                    this.Environment == input.Environment ||
                    (this.Environment != null &&
                    this.Environment.Equals(input.Environment))
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                ) && 
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.TestTypeName != null)
                    hashCode = hashCode * 59 + this.TestTypeName.GetHashCode();
                if (this.FindingGroups != null)
                    hashCode = hashCode * 59 + this.FindingGroups.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TargetStart != null)
                    hashCode = hashCode * 59 + this.TargetStart.GetHashCode();
                if (this.TargetEnd != null)
                    hashCode = hashCode * 59 + this.TargetEnd.GetHashCode();
                if (this.EstimatedTime != null)
                    hashCode = hashCode * 59 + this.EstimatedTime.GetHashCode();
                if (this.ActualTime != null)
                    hashCode = hashCode * 59 + this.ActualTime.GetHashCode();
                if (this.PercentComplete != null)
                    hashCode = hashCode * 59 + this.PercentComplete.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.TagsFromDjangoTagging != null)
                    hashCode = hashCode * 59 + this.TagsFromDjangoTagging.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.BuildId != null)
                    hashCode = hashCode * 59 + this.BuildId.GetHashCode();
                if (this.CommitHash != null)
                    hashCode = hashCode * 59 + this.CommitHash.GetHashCode();
                if (this.BranchTag != null)
                    hashCode = hashCode * 59 + this.BranchTag.GetHashCode();
                if (this.Engagement != null)
                    hashCode = hashCode * 59 + this.Engagement.GetHashCode();
                if (this.Lead != null)
                    hashCode = hashCode * 59 + this.Lead.GetHashCode();
                if (this.TestType != null)
                    hashCode = hashCode * 59 + this.TestType.GetHashCode();
                if (this.Environment != null)
                    hashCode = hashCode * 59 + this.Environment.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Files != null)
                    hashCode = hashCode * 59 + this.Files.GetHashCode();
                return hashCode;
            }
        }
    }

}
