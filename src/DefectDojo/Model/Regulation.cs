/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// Regulation
    /// </summary>
    [DataContract]
    public partial class Regulation :  IEquatable<Regulation>
    {
        /// <summary>
        /// The subject of the regulation.
        /// </summary>
        /// <value>The subject of the regulation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            
            /// <summary>
            /// Enum Privacy for value: privacy
            /// </summary>
            [EnumMember(Value = "privacy")]
            Privacy = 1,
            
            /// <summary>
            /// Enum Finance for value: finance
            /// </summary>
            [EnumMember(Value = "finance")]
            Finance = 2,
            
            /// <summary>
            /// Enum Education for value: education
            /// </summary>
            [EnumMember(Value = "education")]
            Education = 3,
            
            /// <summary>
            /// Enum Medical for value: medical
            /// </summary>
            [EnumMember(Value = "medical")]
            Medical = 4,
            
            /// <summary>
            /// Enum Corporate for value: corporate
            /// </summary>
            [EnumMember(Value = "corporate")]
            Corporate = 5,
            
            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 6
        }

        /// <summary>
        /// The subject of the regulation.
        /// </summary>
        /// <value>The subject of the regulation.</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Regulation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Regulation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Regulation" /> class.
        /// </summary>
        /// <param name="name">The name of the regulation. (required).</param>
        /// <param name="acronym">A shortened representation of the name. (required).</param>
        /// <param name="category">The subject of the regulation. (required).</param>
        /// <param name="jurisdiction">The territory over which the regulation applies. (required).</param>
        /// <param name="description">Information about the regulation&#39;s purpose..</param>
        /// <param name="reference">An external URL for more information..</param>
        public Regulation(string name = default(string), string acronym = default(string), CategoryEnum category = default(CategoryEnum), string jurisdiction = default(string), string description = default(string), string reference = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Regulation and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "acronym" is required (not null)
            if (acronym == null)
            {
                throw new InvalidDataException("acronym is a required property for Regulation and cannot be null");
            }
            else
            {
                this.Acronym = acronym;
            }
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new InvalidDataException("category is a required property for Regulation and cannot be null");
            }
            else
            {
                this.Category = category;
            }
            // to ensure "jurisdiction" is required (not null)
            if (jurisdiction == null)
            {
                throw new InvalidDataException("jurisdiction is a required property for Regulation and cannot be null");
            }
            else
            {
                this.Jurisdiction = jurisdiction;
            }
            this.Description = description;
            this.Reference = reference;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// The name of the regulation.
        /// </summary>
        /// <value>The name of the regulation.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A shortened representation of the name.
        /// </summary>
        /// <value>A shortened representation of the name.</value>
        [DataMember(Name="acronym", EmitDefaultValue=false)]
        public string Acronym { get; set; }


        /// <summary>
        /// The territory over which the regulation applies.
        /// </summary>
        /// <value>The territory over which the regulation applies.</value>
        [DataMember(Name="jurisdiction", EmitDefaultValue=false)]
        public string Jurisdiction { get; set; }

        /// <summary>
        /// Information about the regulation&#39;s purpose.
        /// </summary>
        /// <value>Information about the regulation&#39;s purpose.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// An external URL for more information.
        /// </summary>
        /// <value>An external URL for more information.</value>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Regulation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Acronym: ").Append(Acronym).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Jurisdiction: ").Append(Jurisdiction).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Regulation);
        }

        /// <summary>
        /// Returns true if Regulation instances are equal
        /// </summary>
        /// <param name="input">Instance of Regulation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Regulation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Acronym == input.Acronym ||
                    (this.Acronym != null &&
                    this.Acronym.Equals(input.Acronym))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Jurisdiction == input.Jurisdiction ||
                    (this.Jurisdiction != null &&
                    this.Jurisdiction.Equals(input.Jurisdiction))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Acronym != null)
                    hashCode = hashCode * 59 + this.Acronym.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Jurisdiction != null)
                    hashCode = hashCode * 59 + this.Jurisdiction.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                return hashCode;
            }
        }
    }

}
