/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// FindingEngagement
    /// </summary>
    [DataContract]
    public partial class FindingEngagement :  IEquatable<FindingEngagement>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FindingEngagement" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="product">product.</param>
        /// <param name="branchTag">Tag or branch of the product the engagement tested..</param>
        /// <param name="buildId">Build ID of the product the engagement tested..</param>
        /// <param name="commitHash">Commit hash from repo.</param>
        /// <param name="version">Version of the product the engagement tested..</param>
        public FindingEngagement(string name = default(string), FindingProduct product = default(FindingProduct), string branchTag = default(string), string buildId = default(string), string commitHash = default(string), string version = default(string))
        {
            this.Name = name;
            this.Product = product;
            this.BranchTag = branchTag;
            this.BuildId = buildId;
            this.CommitHash = commitHash;
            this.Version = version;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public FindingProduct Product { get; set; }

        /// <summary>
        /// Tag or branch of the product the engagement tested.
        /// </summary>
        /// <value>Tag or branch of the product the engagement tested.</value>
        [DataMember(Name="branch_tag", EmitDefaultValue=false)]
        public string BranchTag { get; set; }

        /// <summary>
        /// Build ID of the product the engagement tested.
        /// </summary>
        /// <value>Build ID of the product the engagement tested.</value>
        [DataMember(Name="build_id", EmitDefaultValue=false)]
        public string BuildId { get; set; }

        /// <summary>
        /// Commit hash from repo
        /// </summary>
        /// <value>Commit hash from repo</value>
        [DataMember(Name="commit_hash", EmitDefaultValue=false)]
        public string CommitHash { get; set; }

        /// <summary>
        /// Version of the product the engagement tested.
        /// </summary>
        /// <value>Version of the product the engagement tested.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindingEngagement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  BranchTag: ").Append(BranchTag).Append("\n");
            sb.Append("  BuildId: ").Append(BuildId).Append("\n");
            sb.Append("  CommitHash: ").Append(CommitHash).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindingEngagement);
        }

        /// <summary>
        /// Returns true if FindingEngagement instances are equal
        /// </summary>
        /// <param name="input">Instance of FindingEngagement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindingEngagement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.BranchTag == input.BranchTag ||
                    (this.BranchTag != null &&
                    this.BranchTag.Equals(input.BranchTag))
                ) && 
                (
                    this.BuildId == input.BuildId ||
                    (this.BuildId != null &&
                    this.BuildId.Equals(input.BuildId))
                ) && 
                (
                    this.CommitHash == input.CommitHash ||
                    (this.CommitHash != null &&
                    this.CommitHash.Equals(input.CommitHash))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.BranchTag != null)
                    hashCode = hashCode * 59 + this.BranchTag.GetHashCode();
                if (this.BuildId != null)
                    hashCode = hashCode * 59 + this.BuildId.GetHashCode();
                if (this.CommitHash != null)
                    hashCode = hashCode * 59 + this.CommitHash.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }
    }

}
