/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// AppAnalysis
    /// </summary>
    [DataContract]
    public partial class AppAnalysis :  IEquatable<AppAnalysis>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppAnalysis" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppAnalysis() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppAnalysis" /> class.
        /// </summary>
        /// <param name="tags">tags.</param>
        /// <param name="name">name (required).</param>
        /// <param name="confidence">confidence.</param>
        /// <param name="version">version.</param>
        /// <param name="icon">icon.</param>
        /// <param name="website">website.</param>
        /// <param name="websiteFound">websiteFound.</param>
        /// <param name="product">product (required).</param>
        /// <param name="user">user (required).</param>
        public AppAnalysis(List<string> tags = default(List<string>), string name = default(string), int? confidence = default(int?), string version = default(string), string icon = default(string), string website = default(string), string websiteFound = default(string), int? product = default(int?), int? user = default(int?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for AppAnalysis and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "product" is required (not null)
            if (product == null)
            {
                throw new InvalidDataException("product is a required property for AppAnalysis and cannot be null");
            }
            else
            {
                this.Product = product;
            }
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new InvalidDataException("user is a required property for AppAnalysis and cannot be null");
            }
            else
            {
                this.User = user;
            }
            this.Tags = tags;
            this.Confidence = confidence;
            this.Version = version;
            this.Icon = icon;
            this.Website = website;
            this.WebsiteFound = websiteFound;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Confidence
        /// </summary>
        [DataMember(Name="confidence", EmitDefaultValue=false)]
        public int? Confidence { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets WebsiteFound
        /// </summary>
        [DataMember(Name="website_found", EmitDefaultValue=false)]
        public string WebsiteFound { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }

        /// <summary>
        /// Temporary archive with tags from the previous tagging library we used
        /// </summary>
        /// <value>Temporary archive with tags from the previous tagging library we used</value>
        [DataMember(Name="tags_from_django_tagging", EmitDefaultValue=false)]
        public string TagsFromDjangoTagging { get; private set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public int? Product { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppAnalysis {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  WebsiteFound: ").Append(WebsiteFound).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  TagsFromDjangoTagging: ").Append(TagsFromDjangoTagging).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppAnalysis);
        }

        /// <summary>
        /// Returns true if AppAnalysis instances are equal
        /// </summary>
        /// <param name="input">Instance of AppAnalysis to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppAnalysis input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Confidence == input.Confidence ||
                    (this.Confidence != null &&
                    this.Confidence.Equals(input.Confidence))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.WebsiteFound == input.WebsiteFound ||
                    (this.WebsiteFound != null &&
                    this.WebsiteFound.Equals(input.WebsiteFound))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.TagsFromDjangoTagging == input.TagsFromDjangoTagging ||
                    (this.TagsFromDjangoTagging != null &&
                    this.TagsFromDjangoTagging.Equals(input.TagsFromDjangoTagging))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Confidence != null)
                    hashCode = hashCode * 59 + this.Confidence.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.WebsiteFound != null)
                    hashCode = hashCode * 59 + this.WebsiteFound.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.TagsFromDjangoTagging != null)
                    hashCode = hashCode * 59 + this.TagsFromDjangoTagging.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }
    }

}
