/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// RiskAcceptance
    /// </summary>
    [DataContract]
    public partial class RiskAcceptance :  IEquatable<RiskAcceptance>
    {
        /// <summary>
        /// Recommendation from the security team.
        /// </summary>
        /// <value>Recommendation from the security team.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RecommendationEnum
        {
            
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,
            
            /// <summary>
            /// Enum V for value: V
            /// </summary>
            [EnumMember(Value = "V")]
            V = 2,
            
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 3,
            
            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 4,
            
            /// <summary>
            /// Enum T for value: T
            /// </summary>
            [EnumMember(Value = "T")]
            T = 5
        }

        /// <summary>
        /// Recommendation from the security team.
        /// </summary>
        /// <value>Recommendation from the security team.</value>
        [DataMember(Name="recommendation", EmitDefaultValue=false)]
        public RecommendationEnum? Recommendation { get; set; }
        /// <summary>
        /// Risk treatment decision by risk owner
        /// </summary>
        /// <value>Risk treatment decision by risk owner</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DecisionEnum
        {
            
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,
            
            /// <summary>
            /// Enum V for value: V
            /// </summary>
            [EnumMember(Value = "V")]
            V = 2,
            
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 3,
            
            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 4,
            
            /// <summary>
            /// Enum T for value: T
            /// </summary>
            [EnumMember(Value = "T")]
            T = 5
        }

        /// <summary>
        /// Risk treatment decision by risk owner
        /// </summary>
        /// <value>Risk treatment decision by risk owner</value>
        [DataMember(Name="decision", EmitDefaultValue=false)]
        public DecisionEnum? Decision { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskAcceptance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RiskAcceptance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskAcceptance" /> class.
        /// </summary>
        /// <param name="name">Descriptive name which in the future may also be used to group risk acceptances together across engagements and products (required).</param>
        /// <param name="recommendation">Recommendation from the security team..</param>
        /// <param name="recommendationDetails">Explanation of security recommendation.</param>
        /// <param name="decision">Risk treatment decision by risk owner.</param>
        /// <param name="decisionDetails">If a compensating control exists to mitigate the finding or reduce risk, then list the compensating control(s)..</param>
        /// <param name="acceptedBy">The person that accepts the risk, can be outside of DefectDojo..</param>
        /// <param name="expirationDate">When the risk acceptance expires, the findings will be reactivated (unless disabled below)..</param>
        /// <param name="expirationDateWarned">(readonly) Date at which notice about the risk acceptance expiration was sent..</param>
        /// <param name="expirationDateHandled">(readonly) When the risk acceptance expiration was handled (manually or by the daily job)..</param>
        /// <param name="reactivateExpired">Reactivate findings when risk acceptance expires?.</param>
        /// <param name="restartSlaExpired">When enabled, the SLA for findings is restarted when the risk acceptance expires..</param>
        /// <param name="owner">User in DefectDojo owning this acceptance. Only the owner and staff users can edit the risk acceptance. (required).</param>
        /// <param name="acceptedFindings">acceptedFindings (required).</param>
        public RiskAcceptance(string name = default(string), RecommendationEnum? recommendation = default(RecommendationEnum?), string recommendationDetails = default(string), DecisionEnum? decision = default(DecisionEnum?), string decisionDetails = default(string), string acceptedBy = default(string), DateTime? expirationDate = default(DateTime?), DateTime? expirationDateWarned = default(DateTime?), DateTime? expirationDateHandled = default(DateTime?), bool? reactivateExpired = default(bool?), bool? restartSlaExpired = default(bool?), int? owner = default(int?), List<int?> acceptedFindings = default(List<int?>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for RiskAcceptance and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new InvalidDataException("owner is a required property for RiskAcceptance and cannot be null");
            }
            else
            {
                this.Owner = owner;
            }
            // to ensure "acceptedFindings" is required (not null)
            if (acceptedFindings == null)
            {
                throw new InvalidDataException("acceptedFindings is a required property for RiskAcceptance and cannot be null");
            }
            else
            {
                this.AcceptedFindings = acceptedFindings;
            }
            this.Recommendation = recommendation;
            this.RecommendationDetails = recommendationDetails;
            this.Decision = decision;
            this.DecisionDetails = decisionDetails;
            this.AcceptedBy = acceptedBy;
            this.ExpirationDate = expirationDate;
            this.ExpirationDateWarned = expirationDateWarned;
            this.ExpirationDateHandled = expirationDateHandled;
            this.ReactivateExpired = reactivateExpired;
            this.RestartSlaExpired = restartSlaExpired;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Descriptive name which in the future may also be used to group risk acceptances together across engagements and products
        /// </summary>
        /// <value>Descriptive name which in the future may also be used to group risk acceptances together across engagements and products</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Explanation of security recommendation
        /// </summary>
        /// <value>Explanation of security recommendation</value>
        [DataMember(Name="recommendation_details", EmitDefaultValue=false)]
        public string RecommendationDetails { get; set; }


        /// <summary>
        /// If a compensating control exists to mitigate the finding or reduce risk, then list the compensating control(s).
        /// </summary>
        /// <value>If a compensating control exists to mitigate the finding or reduce risk, then list the compensating control(s).</value>
        [DataMember(Name="decision_details", EmitDefaultValue=false)]
        public string DecisionDetails { get; set; }

        /// <summary>
        /// The person that accepts the risk, can be outside of DefectDojo.
        /// </summary>
        /// <value>The person that accepts the risk, can be outside of DefectDojo.</value>
        [DataMember(Name="accepted_by", EmitDefaultValue=false)]
        public string AcceptedBy { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; private set; }

        /// <summary>
        /// When the risk acceptance expires, the findings will be reactivated (unless disabled below).
        /// </summary>
        /// <value>When the risk acceptance expires, the findings will be reactivated (unless disabled below).</value>
        [DataMember(Name="expiration_date", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// (readonly) Date at which notice about the risk acceptance expiration was sent.
        /// </summary>
        /// <value>(readonly) Date at which notice about the risk acceptance expiration was sent.</value>
        [DataMember(Name="expiration_date_warned", EmitDefaultValue=false)]
        public DateTime? ExpirationDateWarned { get; set; }

        /// <summary>
        /// (readonly) When the risk acceptance expiration was handled (manually or by the daily job).
        /// </summary>
        /// <value>(readonly) When the risk acceptance expiration was handled (manually or by the daily job).</value>
        [DataMember(Name="expiration_date_handled", EmitDefaultValue=false)]
        public DateTime? ExpirationDateHandled { get; set; }

        /// <summary>
        /// Reactivate findings when risk acceptance expires?
        /// </summary>
        /// <value>Reactivate findings when risk acceptance expires?</value>
        [DataMember(Name="reactivate_expired", EmitDefaultValue=false)]
        public bool? ReactivateExpired { get; set; }

        /// <summary>
        /// When enabled, the SLA for findings is restarted when the risk acceptance expires.
        /// </summary>
        /// <value>When enabled, the SLA for findings is restarted when the risk acceptance expires.</value>
        [DataMember(Name="restart_sla_expired", EmitDefaultValue=false)]
        public bool? RestartSlaExpired { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime? Updated { get; private set; }

        /// <summary>
        /// User in DefectDojo owning this acceptance. Only the owner and staff users can edit the risk acceptance.
        /// </summary>
        /// <value>User in DefectDojo owning this acceptance. Only the owner and staff users can edit the risk acceptance.</value>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public int? Owner { get; set; }

        /// <summary>
        /// Gets or Sets AcceptedFindings
        /// </summary>
        [DataMember(Name="accepted_findings", EmitDefaultValue=false)]
        public List<int?> AcceptedFindings { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<int?> Notes { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RiskAcceptance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Recommendation: ").Append(Recommendation).Append("\n");
            sb.Append("  RecommendationDetails: ").Append(RecommendationDetails).Append("\n");
            sb.Append("  Decision: ").Append(Decision).Append("\n");
            sb.Append("  DecisionDetails: ").Append(DecisionDetails).Append("\n");
            sb.Append("  AcceptedBy: ").Append(AcceptedBy).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ExpirationDateWarned: ").Append(ExpirationDateWarned).Append("\n");
            sb.Append("  ExpirationDateHandled: ").Append(ExpirationDateHandled).Append("\n");
            sb.Append("  ReactivateExpired: ").Append(ReactivateExpired).Append("\n");
            sb.Append("  RestartSlaExpired: ").Append(RestartSlaExpired).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  AcceptedFindings: ").Append(AcceptedFindings).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RiskAcceptance);
        }

        /// <summary>
        /// Returns true if RiskAcceptance instances are equal
        /// </summary>
        /// <param name="input">Instance of RiskAcceptance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RiskAcceptance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Recommendation == input.Recommendation ||
                    (this.Recommendation != null &&
                    this.Recommendation.Equals(input.Recommendation))
                ) && 
                (
                    this.RecommendationDetails == input.RecommendationDetails ||
                    (this.RecommendationDetails != null &&
                    this.RecommendationDetails.Equals(input.RecommendationDetails))
                ) && 
                (
                    this.Decision == input.Decision ||
                    (this.Decision != null &&
                    this.Decision.Equals(input.Decision))
                ) && 
                (
                    this.DecisionDetails == input.DecisionDetails ||
                    (this.DecisionDetails != null &&
                    this.DecisionDetails.Equals(input.DecisionDetails))
                ) && 
                (
                    this.AcceptedBy == input.AcceptedBy ||
                    (this.AcceptedBy != null &&
                    this.AcceptedBy.Equals(input.AcceptedBy))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.ExpirationDateWarned == input.ExpirationDateWarned ||
                    (this.ExpirationDateWarned != null &&
                    this.ExpirationDateWarned.Equals(input.ExpirationDateWarned))
                ) && 
                (
                    this.ExpirationDateHandled == input.ExpirationDateHandled ||
                    (this.ExpirationDateHandled != null &&
                    this.ExpirationDateHandled.Equals(input.ExpirationDateHandled))
                ) && 
                (
                    this.ReactivateExpired == input.ReactivateExpired ||
                    (this.ReactivateExpired != null &&
                    this.ReactivateExpired.Equals(input.ReactivateExpired))
                ) && 
                (
                    this.RestartSlaExpired == input.RestartSlaExpired ||
                    (this.RestartSlaExpired != null &&
                    this.RestartSlaExpired.Equals(input.RestartSlaExpired))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.AcceptedFindings == input.AcceptedFindings ||
                    this.AcceptedFindings != null &&
                    this.AcceptedFindings.SequenceEqual(input.AcceptedFindings)
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Recommendation != null)
                    hashCode = hashCode * 59 + this.Recommendation.GetHashCode();
                if (this.RecommendationDetails != null)
                    hashCode = hashCode * 59 + this.RecommendationDetails.GetHashCode();
                if (this.Decision != null)
                    hashCode = hashCode * 59 + this.Decision.GetHashCode();
                if (this.DecisionDetails != null)
                    hashCode = hashCode * 59 + this.DecisionDetails.GetHashCode();
                if (this.AcceptedBy != null)
                    hashCode = hashCode * 59 + this.AcceptedBy.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.ExpirationDateWarned != null)
                    hashCode = hashCode * 59 + this.ExpirationDateWarned.GetHashCode();
                if (this.ExpirationDateHandled != null)
                    hashCode = hashCode * 59 + this.ExpirationDateHandled.GetHashCode();
                if (this.ReactivateExpired != null)
                    hashCode = hashCode * 59 + this.ReactivateExpired.GetHashCode();
                if (this.RestartSlaExpired != null)
                    hashCode = hashCode * 59 + this.RestartSlaExpired.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.AcceptedFindings != null)
                    hashCode = hashCode * 59 + this.AcceptedFindings.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                return hashCode;
            }
        }
    }

}
