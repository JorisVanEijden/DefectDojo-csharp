/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// ToolConfiguration
    /// </summary>
    [DataContract]
    public partial class ToolConfiguration :  IEquatable<ToolConfiguration>
    {
        /// <summary>
        /// Defines AuthenticationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthenticationTypeEnum
        {
            
            /// <summary>
            /// Enum API for value: API
            /// </summary>
            [EnumMember(Value = "API")]
            API = 1,
            
            /// <summary>
            /// Enum Password for value: Password
            /// </summary>
            [EnumMember(Value = "Password")]
            Password = 2,
            
            /// <summary>
            /// Enum SSH for value: SSH
            /// </summary>
            [EnumMember(Value = "SSH")]
            SSH = 3
        }

        /// <summary>
        /// Gets or Sets AuthenticationType
        /// </summary>
        [DataMember(Name="authentication_type", EmitDefaultValue=false)]
        public AuthenticationTypeEnum? AuthenticationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolConfiguration" /> class.
        /// </summary>
        /// <param name="configurationUrl">configurationUrl (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="url">url.</param>
        /// <param name="authenticationType">authenticationType.</param>
        /// <param name="extras">Additional definitions that will be consumed by scanner.</param>
        /// <param name="username">username.</param>
        /// <param name="password">password.</param>
        /// <param name="authTitle">authTitle.</param>
        /// <param name="ssh">ssh.</param>
        /// <param name="apiKey">apiKey.</param>
        /// <param name="toolType">toolType (required).</param>
        public ToolConfiguration(string configurationUrl = default(string), string name = default(string), string description = default(string), string url = default(string), AuthenticationTypeEnum? authenticationType = default(AuthenticationTypeEnum?), string extras = default(string), string username = default(string), string password = default(string), string authTitle = default(string), string ssh = default(string), string apiKey = default(string), int? toolType = default(int?))
        {
            // to ensure "configurationUrl" is required (not null)
            if (configurationUrl == null)
            {
                throw new InvalidDataException("configurationUrl is a required property for ToolConfiguration and cannot be null");
            }
            else
            {
                this.ConfigurationUrl = configurationUrl;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ToolConfiguration and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "toolType" is required (not null)
            if (toolType == null)
            {
                throw new InvalidDataException("toolType is a required property for ToolConfiguration and cannot be null");
            }
            else
            {
                this.ToolType = toolType;
            }
            this.Description = description;
            this.Url = url;
            this.AuthenticationType = authenticationType;
            this.Extras = extras;
            this.Username = username;
            this.Password = password;
            this.AuthTitle = authTitle;
            this.Ssh = ssh;
            this.ApiKey = apiKey;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets ConfigurationUrl
        /// </summary>
        [DataMember(Name="configuration_url", EmitDefaultValue=false)]
        public string ConfigurationUrl { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }


        /// <summary>
        /// Additional definitions that will be consumed by scanner
        /// </summary>
        /// <value>Additional definitions that will be consumed by scanner</value>
        [DataMember(Name="extras", EmitDefaultValue=false)]
        public string Extras { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets AuthTitle
        /// </summary>
        [DataMember(Name="auth_title", EmitDefaultValue=false)]
        public string AuthTitle { get; set; }

        /// <summary>
        /// Gets or Sets Ssh
        /// </summary>
        [DataMember(Name="ssh", EmitDefaultValue=false)]
        public string Ssh { get; set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name="api_key", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets ToolType
        /// </summary>
        [DataMember(Name="tool_type", EmitDefaultValue=false)]
        public int? ToolType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ToolConfiguration {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ConfigurationUrl: ").Append(ConfigurationUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  Extras: ").Append(Extras).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  AuthTitle: ").Append(AuthTitle).Append("\n");
            sb.Append("  Ssh: ").Append(Ssh).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  ToolType: ").Append(ToolType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ToolConfiguration);
        }

        /// <summary>
        /// Returns true if ToolConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of ToolConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ToolConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ConfigurationUrl == input.ConfigurationUrl ||
                    (this.ConfigurationUrl != null &&
                    this.ConfigurationUrl.Equals(input.ConfigurationUrl))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.AuthenticationType == input.AuthenticationType ||
                    (this.AuthenticationType != null &&
                    this.AuthenticationType.Equals(input.AuthenticationType))
                ) && 
                (
                    this.Extras == input.Extras ||
                    (this.Extras != null &&
                    this.Extras.Equals(input.Extras))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.AuthTitle == input.AuthTitle ||
                    (this.AuthTitle != null &&
                    this.AuthTitle.Equals(input.AuthTitle))
                ) && 
                (
                    this.Ssh == input.Ssh ||
                    (this.Ssh != null &&
                    this.Ssh.Equals(input.Ssh))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.ToolType == input.ToolType ||
                    (this.ToolType != null &&
                    this.ToolType.Equals(input.ToolType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ConfigurationUrl != null)
                    hashCode = hashCode * 59 + this.ConfigurationUrl.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.AuthenticationType != null)
                    hashCode = hashCode * 59 + this.AuthenticationType.GetHashCode();
                if (this.Extras != null)
                    hashCode = hashCode * 59 + this.Extras.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.AuthTitle != null)
                    hashCode = hashCode * 59 + this.AuthTitle.GetHashCode();
                if (this.Ssh != null)
                    hashCode = hashCode * 59 + this.Ssh.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.ToolType != null)
                    hashCode = hashCode * 59 + this.ToolType.GetHashCode();
                return hashCode;
            }
        }
    }

}
