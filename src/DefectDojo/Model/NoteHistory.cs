/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// NoteHistory
    /// </summary>
    [DataContract]
    public partial class NoteHistory :  IEquatable<NoteHistory>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NoteHistory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NoteHistory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NoteHistory" /> class.
        /// </summary>
        /// <param name="currentEditor">currentEditor.</param>
        /// <param name="data">data (required).</param>
        /// <param name="noteType">noteType.</param>
        public NoteHistory(UserStub currentEditor = default(UserStub), string data = default(string), int? noteType = default(int?))
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for NoteHistory and cannot be null");
            }
            else
            {
                this.Data = data;
            }
            this.CurrentEditor = currentEditor;
            this.NoteType = noteType;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets CurrentEditor
        /// </summary>
        [DataMember(Name="current_editor", EmitDefaultValue=false)]
        public UserStub CurrentEditor { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public DateTime? Time { get; private set; }

        /// <summary>
        /// Gets or Sets NoteType
        /// </summary>
        [DataMember(Name="note_type", EmitDefaultValue=false)]
        public int? NoteType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NoteHistory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CurrentEditor: ").Append(CurrentEditor).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  NoteType: ").Append(NoteType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NoteHistory);
        }

        /// <summary>
        /// Returns true if NoteHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of NoteHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NoteHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CurrentEditor == input.CurrentEditor ||
                    (this.CurrentEditor != null &&
                    this.CurrentEditor.Equals(input.CurrentEditor))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.NoteType == input.NoteType ||
                    (this.NoteType != null &&
                    this.NoteType.Equals(input.NoteType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CurrentEditor != null)
                    hashCode = hashCode * 59 + this.CurrentEditor.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.NoteType != null)
                    hashCode = hashCode * 59 + this.NoteType.GetHashCode();
                return hashCode;
            }
        }
    }

}
