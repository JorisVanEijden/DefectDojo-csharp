/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// ReImportScan
    /// </summary>
    [DataContract]
    public partial class ReImportScan :  IEquatable<ReImportScan>
    {
        /// <summary>
        /// Defines MinimumSeverity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MinimumSeverityEnum
        {
            
            /// <summary>
            /// Enum Info for value: Info
            /// </summary>
            [EnumMember(Value = "Info")]
            Info = 1,
            
            /// <summary>
            /// Enum Low for value: Low
            /// </summary>
            [EnumMember(Value = "Low")]
            Low = 2,
            
            /// <summary>
            /// Enum Medium for value: Medium
            /// </summary>
            [EnumMember(Value = "Medium")]
            Medium = 3,
            
            /// <summary>
            /// Enum High for value: High
            /// </summary>
            [EnumMember(Value = "High")]
            High = 4,
            
            /// <summary>
            /// Enum Critical for value: Critical
            /// </summary>
            [EnumMember(Value = "Critical")]
            Critical = 5
        }

        /// <summary>
        /// Gets or Sets MinimumSeverity
        /// </summary>
        [DataMember(Name="minimum_severity", EmitDefaultValue=false)]
        public MinimumSeverityEnum? MinimumSeverity { get; set; }
        /// <summary>
        /// Defines ScanType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScanTypeEnum
        {
            
            /// <summary>
            /// Enum AWSProwlerScan for value: AWS Prowler Scan
            /// </summary>
            [EnumMember(Value = "AWS Prowler Scan")]
            AWSProwlerScan = 1,
            
            /// <summary>
            /// Enum AWSScout2Scan for value: AWS Scout2 Scan
            /// </summary>
            [EnumMember(Value = "AWS Scout2 Scan")]
            AWSScout2Scan = 2,
            
            /// <summary>
            /// Enum AWSSecurityHubScan for value: AWS Security Hub Scan
            /// </summary>
            [EnumMember(Value = "AWS Security Hub Scan")]
            AWSSecurityHubScan = 3,
            
            /// <summary>
            /// Enum AcunetixScan for value: Acunetix Scan
            /// </summary>
            [EnumMember(Value = "Acunetix Scan")]
            AcunetixScan = 4,
            
            /// <summary>
            /// Enum AnchoreEngineScan for value: Anchore Engine Scan
            /// </summary>
            [EnumMember(Value = "Anchore Engine Scan")]
            AnchoreEngineScan = 5,
            
            /// <summary>
            /// Enum AnchoreEnterprisePolicyCheck for value: Anchore Enterprise Policy Check
            /// </summary>
            [EnumMember(Value = "Anchore Enterprise Policy Check")]
            AnchoreEnterprisePolicyCheck = 6,
            
            /// <summary>
            /// Enum Anchoregrype for value: anchore_grype
            /// </summary>
            [EnumMember(Value = "anchore_grype")]
            Anchoregrype = 7,
            
            /// <summary>
            /// Enum AppSpiderScan for value: AppSpider Scan
            /// </summary>
            [EnumMember(Value = "AppSpider Scan")]
            AppSpiderScan = 8,
            
            /// <summary>
            /// Enum AquaScan for value: Aqua Scan
            /// </summary>
            [EnumMember(Value = "Aqua Scan")]
            AquaScan = 9,
            
            /// <summary>
            /// Enum ArachniScan for value: Arachni Scan
            /// </summary>
            [EnumMember(Value = "Arachni Scan")]
            ArachniScan = 10,
            
            /// <summary>
            /// Enum BanditScan for value: Bandit Scan
            /// </summary>
            [EnumMember(Value = "Bandit Scan")]
            BanditScan = 11,
            
            /// <summary>
            /// Enum BlackduckComponentRisk for value: Blackduck Component Risk
            /// </summary>
            [EnumMember(Value = "Blackduck Component Risk")]
            BlackduckComponentRisk = 12,
            
            /// <summary>
            /// Enum BlackduckHubScan for value: Blackduck Hub Scan
            /// </summary>
            [EnumMember(Value = "Blackduck Hub Scan")]
            BlackduckHubScan = 13,
            
            /// <summary>
            /// Enum BrakemanScan for value: Brakeman Scan
            /// </summary>
            [EnumMember(Value = "Brakeman Scan")]
            BrakemanScan = 14,
            
            /// <summary>
            /// Enum BugCrowdScan for value: BugCrowd Scan
            /// </summary>
            [EnumMember(Value = "BugCrowd Scan")]
            BugCrowdScan = 15,
            
            /// <summary>
            /// Enum BundlerAuditScan for value: Bundler-Audit Scan
            /// </summary>
            [EnumMember(Value = "Bundler-Audit Scan")]
            BundlerAuditScan = 16,
            
            /// <summary>
            /// Enum BurpEnterpriseScan for value: Burp Enterprise Scan
            /// </summary>
            [EnumMember(Value = "Burp Enterprise Scan")]
            BurpEnterpriseScan = 17,
            
            /// <summary>
            /// Enum BurpRESTAPI for value: Burp REST API
            /// </summary>
            [EnumMember(Value = "Burp REST API")]
            BurpRESTAPI = 18,
            
            /// <summary>
            /// Enum BurpScan for value: Burp Scan
            /// </summary>
            [EnumMember(Value = "Burp Scan")]
            BurpScan = 19,
            
            /// <summary>
            /// Enum CCVSReport for value: CCVS Report
            /// </summary>
            [EnumMember(Value = "CCVS Report")]
            CCVSReport = 20,
            
            /// <summary>
            /// Enum CheckmarxOSA for value: Checkmarx OSA
            /// </summary>
            [EnumMember(Value = "Checkmarx OSA")]
            CheckmarxOSA = 21,
            
            /// <summary>
            /// Enum CheckmarxScan for value: Checkmarx Scan
            /// </summary>
            [EnumMember(Value = "Checkmarx Scan")]
            CheckmarxScan = 22,
            
            /// <summary>
            /// Enum CheckmarxScandetailed for value: Checkmarx Scan detailed
            /// </summary>
            [EnumMember(Value = "Checkmarx Scan detailed")]
            CheckmarxScandetailed = 23,
            
            /// <summary>
            /// Enum CheckovScan for value: Checkov Scan
            /// </summary>
            [EnumMember(Value = "Checkov Scan")]
            CheckovScan = 24,
            
            /// <summary>
            /// Enum ChoctawHogScan for value: Choctaw Hog Scan
            /// </summary>
            [EnumMember(Value = "Choctaw Hog Scan")]
            ChoctawHogScan = 25,
            
            /// <summary>
            /// Enum ClairKlarScan for value: Clair Klar Scan
            /// </summary>
            [EnumMember(Value = "Clair Klar Scan")]
            ClairKlarScan = 26,
            
            /// <summary>
            /// Enum ClairScan for value: Clair Scan
            /// </summary>
            [EnumMember(Value = "Clair Scan")]
            ClairScan = 27,
            
            /// <summary>
            /// Enum CobaltIoScan for value: Cobalt.io Scan
            /// </summary>
            [EnumMember(Value = "Cobalt.io Scan")]
            CobaltIoScan = 28,
            
            /// <summary>
            /// Enum ContrastScan for value: Contrast Scan
            /// </summary>
            [EnumMember(Value = "Contrast Scan")]
            ContrastScan = 29,
            
            /// <summary>
            /// Enum CrashtestSecurityJSONFile for value: Crashtest Security JSON File
            /// </summary>
            [EnumMember(Value = "Crashtest Security JSON File")]
            CrashtestSecurityJSONFile = 30,
            
            /// <summary>
            /// Enum CrashtestSecurityXMLFile for value: Crashtest Security XML File
            /// </summary>
            [EnumMember(Value = "Crashtest Security XML File")]
            CrashtestSecurityXMLFile = 31,
            
            /// <summary>
            /// Enum CredScanScan for value: CredScan Scan
            /// </summary>
            [EnumMember(Value = "CredScan Scan")]
            CredScanScan = 32,
            
            /// <summary>
            /// Enum Cyclonedx for value: cyclonedx
            /// </summary>
            [EnumMember(Value = "cyclonedx")]
            Cyclonedx = 33,
            
            /// <summary>
            /// Enum DSOPScan for value: DSOP Scan
            /// </summary>
            [EnumMember(Value = "DSOP Scan")]
            DSOPScan = 34,
            
            /// <summary>
            /// Enum DawnScannerScan for value: DawnScanner Scan
            /// </summary>
            [EnumMember(Value = "DawnScanner Scan")]
            DawnScannerScan = 35,
            
            /// <summary>
            /// Enum DependencyCheckScan for value: Dependency Check Scan
            /// </summary>
            [EnumMember(Value = "Dependency Check Scan")]
            DependencyCheckScan = 36,
            
            /// <summary>
            /// Enum DependencyTrackFindingPackagingFormatFPFExport for value: Dependency Track Finding Packaging Format (FPF) Export
            /// </summary>
            [EnumMember(Value = "Dependency Track Finding Packaging Format (FPF) Export")]
            DependencyTrackFindingPackagingFormatFPFExport = 37,
            
            /// <summary>
            /// Enum DrHeaderJSONImporter for value: DrHeader JSON Importer
            /// </summary>
            [EnumMember(Value = "DrHeader JSON Importer")]
            DrHeaderJSONImporter = 38,
            
            /// <summary>
            /// Enum ESLintScan for value: ESLint Scan
            /// </summary>
            [EnumMember(Value = "ESLint Scan")]
            ESLintScan = 39,
            
            /// <summary>
            /// Enum FortifyScan for value: Fortify Scan
            /// </summary>
            [EnumMember(Value = "Fortify Scan")]
            FortifyScan = 40,
            
            /// <summary>
            /// Enum GenericFindingsImport for value: Generic Findings Import
            /// </summary>
            [EnumMember(Value = "Generic Findings Import")]
            GenericFindingsImport = 41,
            
            /// <summary>
            /// Enum GitLabDependencyScanningReport for value: GitLab Dependency Scanning Report
            /// </summary>
            [EnumMember(Value = "GitLab Dependency Scanning Report")]
            GitLabDependencyScanningReport = 42,
            
            /// <summary>
            /// Enum GitLabSASTReport for value: GitLab SAST Report
            /// </summary>
            [EnumMember(Value = "GitLab SAST Report")]
            GitLabSASTReport = 43,
            
            /// <summary>
            /// Enum GithubVulnerabilityScan for value: Github Vulnerability Scan
            /// </summary>
            [EnumMember(Value = "Github Vulnerability Scan")]
            GithubVulnerabilityScan = 44,
            
            /// <summary>
            /// Enum GitleaksScan for value: Gitleaks Scan
            /// </summary>
            [EnumMember(Value = "Gitleaks Scan")]
            GitleaksScan = 45,
            
            /// <summary>
            /// Enum GosecScanner for value: Gosec Scanner
            /// </summary>
            [EnumMember(Value = "Gosec Scanner")]
            GosecScanner = 46,
            
            /// <summary>
            /// Enum HackerOneCases for value: HackerOne Cases
            /// </summary>
            [EnumMember(Value = "HackerOne Cases")]
            HackerOneCases = 47,
            
            /// <summary>
            /// Enum HadolintDockerfilecheck for value: Hadolint Dockerfile check
            /// </summary>
            [EnumMember(Value = "Hadolint Dockerfile check")]
            HadolintDockerfilecheck = 48,
            
            /// <summary>
            /// Enum HarborVulnerabilityScan for value: Harbor Vulnerability Scan
            /// </summary>
            [EnumMember(Value = "Harbor Vulnerability Scan")]
            HarborVulnerabilityScan = 49,
            
            /// <summary>
            /// Enum HuskyCIReport for value: HuskyCI Report
            /// </summary>
            [EnumMember(Value = "HuskyCI Report")]
            HuskyCIReport = 50,
            
            /// <summary>
            /// Enum IBMAppScanDAST for value: IBM AppScan DAST
            /// </summary>
            [EnumMember(Value = "IBM AppScan DAST")]
            IBMAppScanDAST = 51,
            
            /// <summary>
            /// Enum ImmuniwebScan for value: Immuniweb Scan
            /// </summary>
            [EnumMember(Value = "Immuniweb Scan")]
            ImmuniwebScan = 52,
            
            /// <summary>
            /// Enum JFrogXrayScan for value: JFrog Xray Scan
            /// </summary>
            [EnumMember(Value = "JFrog Xray Scan")]
            JFrogXrayScan = 53,
            
            /// <summary>
            /// Enum KiuwanScan for value: Kiuwan Scan
            /// </summary>
            [EnumMember(Value = "Kiuwan Scan")]
            KiuwanScan = 54,
            
            /// <summary>
            /// Enum MicrofocusWebinspectScan for value: Microfocus Webinspect Scan
            /// </summary>
            [EnumMember(Value = "Microfocus Webinspect Scan")]
            MicrofocusWebinspectScan = 55,
            
            /// <summary>
            /// Enum MobSFScan for value: MobSF Scan
            /// </summary>
            [EnumMember(Value = "MobSF Scan")]
            MobSFScan = 56,
            
            /// <summary>
            /// Enum MozillaObservatoryScan for value: Mozilla Observatory Scan
            /// </summary>
            [EnumMember(Value = "Mozilla Observatory Scan")]
            MozillaObservatoryScan = 57,
            
            /// <summary>
            /// Enum NPMAuditScan for value: NPM Audit Scan
            /// </summary>
            [EnumMember(Value = "NPM Audit Scan")]
            NPMAuditScan = 58,
            
            /// <summary>
            /// Enum NessusScan for value: Nessus Scan
            /// </summary>
            [EnumMember(Value = "Nessus Scan")]
            NessusScan = 59,
            
            /// <summary>
            /// Enum NetsparkerScan for value: Netsparker Scan
            /// </summary>
            [EnumMember(Value = "Netsparker Scan")]
            NetsparkerScan = 60,
            
            /// <summary>
            /// Enum NexposeScan for value: Nexpose Scan
            /// </summary>
            [EnumMember(Value = "Nexpose Scan")]
            NexposeScan = 61,
            
            /// <summary>
            /// Enum NiktoScan for value: Nikto Scan
            /// </summary>
            [EnumMember(Value = "Nikto Scan")]
            NiktoScan = 62,
            
            /// <summary>
            /// Enum NmapScan for value: Nmap Scan
            /// </summary>
            [EnumMember(Value = "Nmap Scan")]
            NmapScan = 63,
            
            /// <summary>
            /// Enum NodeSecurityPlatformScan for value: Node Security Platform Scan
            /// </summary>
            [EnumMember(Value = "Node Security Platform Scan")]
            NodeSecurityPlatformScan = 64,
            
            /// <summary>
            /// Enum ORTevaluatedmodelImporter for value: ORT evaluated model Importer
            /// </summary>
            [EnumMember(Value = "ORT evaluated model Importer")]
            ORTevaluatedmodelImporter = 65,
            
            /// <summary>
            /// Enum OpenVASCSV for value: OpenVAS CSV
            /// </summary>
            [EnumMember(Value = "OpenVAS CSV")]
            OpenVASCSV = 66,
            
            /// <summary>
            /// Enum OpenscapVulnerabilityScan for value: Openscap Vulnerability Scan
            /// </summary>
            [EnumMember(Value = "Openscap Vulnerability Scan")]
            OpenscapVulnerabilityScan = 67,
            
            /// <summary>
            /// Enum OssIndexDevauditSCAScanImporter for value: OssIndex Devaudit SCA Scan Importer
            /// </summary>
            [EnumMember(Value = "OssIndex Devaudit SCA Scan Importer")]
            OssIndexDevauditSCAScanImporter = 68,
            
            /// <summary>
            /// Enum Outpost24Scan for value: Outpost24 Scan
            /// </summary>
            [EnumMember(Value = "Outpost24 Scan")]
            Outpost24Scan = 69,
            
            /// <summary>
            /// Enum PHPSecurityAuditv2 for value: PHP Security Audit v2
            /// </summary>
            [EnumMember(Value = "PHP Security Audit v2")]
            PHPSecurityAuditv2 = 70,
            
            /// <summary>
            /// Enum PHPSymfonySecurityCheck for value: PHP Symfony Security Check
            /// </summary>
            [EnumMember(Value = "PHP Symfony Security Check")]
            PHPSymfonySecurityCheck = 71,
            
            /// <summary>
            /// Enum PMDScan for value: PMD Scan
            /// </summary>
            [EnumMember(Value = "PMD Scan")]
            PMDScan = 72,
            
            /// <summary>
            /// Enum QualysInfrastructureScanWebGUIXML for value: Qualys Infrastructure Scan (WebGUI XML)
            /// </summary>
            [EnumMember(Value = "Qualys Infrastructure Scan (WebGUI XML)")]
            QualysInfrastructureScanWebGUIXML = 73,
            
            /// <summary>
            /// Enum QualysScan for value: Qualys Scan
            /// </summary>
            [EnumMember(Value = "Qualys Scan")]
            QualysScan = 74,
            
            /// <summary>
            /// Enum QualysWebappScan for value: Qualys Webapp Scan
            /// </summary>
            [EnumMember(Value = "Qualys Webapp Scan")]
            QualysWebappScan = 75,
            
            /// <summary>
            /// Enum RetireJsScan for value: Retire.js Scan
            /// </summary>
            [EnumMember(Value = "Retire.js Scan")]
            RetireJsScan = 76,
            
            /// <summary>
            /// Enum RiskReconAPIImporter for value: Risk Recon API Importer
            /// </summary>
            [EnumMember(Value = "Risk Recon API Importer")]
            RiskReconAPIImporter = 77,
            
            /// <summary>
            /// Enum SARIF for value: SARIF
            /// </summary>
            [EnumMember(Value = "SARIF")]
            SARIF = 78,
            
            /// <summary>
            /// Enum SKFScan for value: SKF Scan
            /// </summary>
            [EnumMember(Value = "SKF Scan")]
            SKFScan = 79,
            
            /// <summary>
            /// Enum SSLLabsScan for value: SSL Labs Scan
            /// </summary>
            [EnumMember(Value = "SSL Labs Scan")]
            SSLLabsScan = 80,
            
            /// <summary>
            /// Enum SSLyze3ScanJSON for value: SSLyze 3 Scan (JSON)
            /// </summary>
            [EnumMember(Value = "SSLyze 3 Scan (JSON)")]
            SSLyze3ScanJSON = 81,
            
            /// <summary>
            /// Enum SafetyScan for value: Safety Scan
            /// </summary>
            [EnumMember(Value = "Safety Scan")]
            SafetyScan = 82,
            
            /// <summary>
            /// Enum ScantistScan for value: Scantist Scan
            /// </summary>
            [EnumMember(Value = "Scantist Scan")]
            ScantistScan = 83,
            
            /// <summary>
            /// Enum ScoutSuiteScan for value: Scout Suite Scan
            /// </summary>
            [EnumMember(Value = "Scout Suite Scan")]
            ScoutSuiteScan = 84,
            
            /// <summary>
            /// Enum SemgrepJSONReport for value: Semgrep JSON Report
            /// </summary>
            [EnumMember(Value = "Semgrep JSON Report")]
            SemgrepJSONReport = 85,
            
            /// <summary>
            /// Enum SnykScan for value: Snyk Scan
            /// </summary>
            [EnumMember(Value = "Snyk Scan")]
            SnykScan = 86,
            
            /// <summary>
            /// Enum SonarQubeAPIImport for value: SonarQube API Import
            /// </summary>
            [EnumMember(Value = "SonarQube API Import")]
            SonarQubeAPIImport = 87,
            
            /// <summary>
            /// Enum SonarQubeScan for value: SonarQube Scan
            /// </summary>
            [EnumMember(Value = "SonarQube Scan")]
            SonarQubeScan = 88,
            
            /// <summary>
            /// Enum SonarQubeScandetailed for value: SonarQube Scan detailed
            /// </summary>
            [EnumMember(Value = "SonarQube Scan detailed")]
            SonarQubeScandetailed = 89,
            
            /// <summary>
            /// Enum SonatypeApplicationScan for value: Sonatype Application Scan
            /// </summary>
            [EnumMember(Value = "Sonatype Application Scan")]
            SonatypeApplicationScan = 90,
            
            /// <summary>
            /// Enum SpotBugsScan for value: SpotBugs Scan
            /// </summary>
            [EnumMember(Value = "SpotBugs Scan")]
            SpotBugsScan = 91,
            
            /// <summary>
            /// Enum Sslscan for value: Sslscan
            /// </summary>
            [EnumMember(Value = "Sslscan")]
            Sslscan = 92,
            
            /// <summary>
            /// Enum SslyzeScan for value: Sslyze Scan
            /// </summary>
            [EnumMember(Value = "Sslyze Scan")]
            SslyzeScan = 93,
            
            /// <summary>
            /// Enum TestsslScan for value: Testssl Scan
            /// </summary>
            [EnumMember(Value = "Testssl Scan")]
            TestsslScan = 94,
            
            /// <summary>
            /// Enum TrivyScan for value: Trivy Scan
            /// </summary>
            [EnumMember(Value = "Trivy Scan")]
            TrivyScan = 95,
            
            /// <summary>
            /// Enum TrufflehogScan for value: Trufflehog Scan
            /// </summary>
            [EnumMember(Value = "Trufflehog Scan")]
            TrufflehogScan = 96,
            
            /// <summary>
            /// Enum Trufflehog3Scan for value: Trufflehog3 Scan
            /// </summary>
            [EnumMember(Value = "Trufflehog3 Scan")]
            Trufflehog3Scan = 97,
            
            /// <summary>
            /// Enum TrustwaveScanCSV for value: Trustwave Scan (CSV)
            /// </summary>
            [EnumMember(Value = "Trustwave Scan (CSV)")]
            TrustwaveScanCSV = 98,
            
            /// <summary>
            /// Enum TwistlockImageScan for value: Twistlock Image Scan
            /// </summary>
            [EnumMember(Value = "Twistlock Image Scan")]
            TwistlockImageScan = 99,
            
            /// <summary>
            /// Enum VCGScan for value: VCG Scan
            /// </summary>
            [EnumMember(Value = "VCG Scan")]
            VCGScan = 100,
            
            /// <summary>
            /// Enum VeracodeScan for value: Veracode Scan
            /// </summary>
            [EnumMember(Value = "Veracode Scan")]
            VeracodeScan = 101,
            
            /// <summary>
            /// Enum WFuzzJSONreport for value: WFuzz JSON report
            /// </summary>
            [EnumMember(Value = "WFuzz JSON report")]
            WFuzzJSONreport = 102,
            
            /// <summary>
            /// Enum WapitiScan for value: Wapiti Scan
            /// </summary>
            [EnumMember(Value = "Wapiti Scan")]
            WapitiScan = 103,
            
            /// <summary>
            /// Enum WhitesourceScan for value: Whitesource Scan
            /// </summary>
            [EnumMember(Value = "Whitesource Scan")]
            WhitesourceScan = 104,
            
            /// <summary>
            /// Enum Wpscan for value: Wpscan
            /// </summary>
            [EnumMember(Value = "Wpscan")]
            Wpscan = 105,
            
            /// <summary>
            /// Enum XanitizerScan for value: Xanitizer Scan
            /// </summary>
            [EnumMember(Value = "Xanitizer Scan")]
            XanitizerScan = 106,
            
            /// <summary>
            /// Enum YarnAuditScan for value: Yarn Audit Scan
            /// </summary>
            [EnumMember(Value = "Yarn Audit Scan")]
            YarnAuditScan = 107,
            
            /// <summary>
            /// Enum ZAPScan for value: ZAP Scan
            /// </summary>
            [EnumMember(Value = "ZAP Scan")]
            ZAPScan = 108,
            
            /// <summary>
            /// Enum KubeBenchScan for value: kube-bench Scan
            /// </summary>
            [EnumMember(Value = "kube-bench Scan")]
            KubeBenchScan = 109
        }

        /// <summary>
        /// Gets or Sets ScanType
        /// </summary>
        [DataMember(Name="scan_type", EmitDefaultValue=false)]
        public ScanTypeEnum ScanType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReImportScan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReImportScan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReImportScan" /> class.
        /// </summary>
        /// <param name="scanDate">scanDate (required).</param>
        /// <param name="minimumSeverity">minimumSeverity (default to MinimumSeverityEnum.Info).</param>
        /// <param name="active">active (default to true).</param>
        /// <param name="verified">verified (default to true).</param>
        /// <param name="scanType">scanType (required).</param>
        /// <param name="endpointToAdd">endpointToAdd.</param>
        /// <param name="test">test (required).</param>
        /// <param name="pushToJira">pushToJira (default to false).</param>
        /// <param name="closeOldFindings">closeOldFindings (default to true).</param>
        /// <param name="version">version.</param>
        /// <param name="buildId">buildId.</param>
        /// <param name="branchTag">branchTag.</param>
        /// <param name="commitHash">commitHash.</param>
        public ReImportScan(DateTime? scanDate = default(DateTime?), MinimumSeverityEnum? minimumSeverity = MinimumSeverityEnum.Info, bool? active = true, bool? verified = true, ScanTypeEnum scanType = default(ScanTypeEnum), int? endpointToAdd = default(int?), int? test = default(int?), bool? pushToJira = false, bool? closeOldFindings = true, string version = default(string), string buildId = default(string), string branchTag = default(string), string commitHash = default(string))
        {
            // to ensure "scanDate" is required (not null)
            if (scanDate == null)
            {
                throw new InvalidDataException("scanDate is a required property for ReImportScan and cannot be null");
            }
            else
            {
                this.ScanDate = scanDate;
            }
            // to ensure "scanType" is required (not null)
            if (scanType == null)
            {
                throw new InvalidDataException("scanType is a required property for ReImportScan and cannot be null");
            }
            else
            {
                this.ScanType = scanType;
            }
            // to ensure "test" is required (not null)
            if (test == null)
            {
                throw new InvalidDataException("test is a required property for ReImportScan and cannot be null");
            }
            else
            {
                this.Test = test;
            }
            // use default value if no "minimumSeverity" provided
            if (minimumSeverity == null)
            {
                this.MinimumSeverity = MinimumSeverityEnum.Info;
            }
            else
            {
                this.MinimumSeverity = minimumSeverity;
            }
            // use default value if no "active" provided
            if (active == null)
            {
                this.Active = true;
            }
            else
            {
                this.Active = active;
            }
            // use default value if no "verified" provided
            if (verified == null)
            {
                this.Verified = true;
            }
            else
            {
                this.Verified = verified;
            }
            this.EndpointToAdd = endpointToAdd;
            // use default value if no "pushToJira" provided
            if (pushToJira == null)
            {
                this.PushToJira = false;
            }
            else
            {
                this.PushToJira = pushToJira;
            }
            // use default value if no "closeOldFindings" provided
            if (closeOldFindings == null)
            {
                this.CloseOldFindings = true;
            }
            else
            {
                this.CloseOldFindings = closeOldFindings;
            }
            this.Version = version;
            this.BuildId = buildId;
            this.BranchTag = branchTag;
            this.CommitHash = commitHash;
        }
        
        /// <summary>
        /// Gets or Sets ScanDate
        /// </summary>
        [DataMember(Name="scan_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ScanDate { get; set; }


        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>
        [DataMember(Name="verified", EmitDefaultValue=false)]
        public bool? Verified { get; set; }


        /// <summary>
        /// Gets or Sets EndpointToAdd
        /// </summary>
        [DataMember(Name="endpoint_to_add", EmitDefaultValue=false)]
        public int? EndpointToAdd { get; set; }

        /// <summary>
        /// Gets or Sets _File
        /// </summary>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public string _File { get; private set; }

        /// <summary>
        /// Gets or Sets Test
        /// </summary>
        [DataMember(Name="test", EmitDefaultValue=false)]
        public int? Test { get; set; }

        /// <summary>
        /// Gets or Sets PushToJira
        /// </summary>
        [DataMember(Name="push_to_jira", EmitDefaultValue=false)]
        public bool? PushToJira { get; set; }

        /// <summary>
        /// Gets or Sets CloseOldFindings
        /// </summary>
        [DataMember(Name="close_old_findings", EmitDefaultValue=false)]
        public bool? CloseOldFindings { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets BuildId
        /// </summary>
        [DataMember(Name="build_id", EmitDefaultValue=false)]
        public string BuildId { get; set; }

        /// <summary>
        /// Gets or Sets BranchTag
        /// </summary>
        [DataMember(Name="branch_tag", EmitDefaultValue=false)]
        public string BranchTag { get; set; }

        /// <summary>
        /// Gets or Sets CommitHash
        /// </summary>
        [DataMember(Name="commit_hash", EmitDefaultValue=false)]
        public string CommitHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReImportScan {\n");
            sb.Append("  ScanDate: ").Append(ScanDate).Append("\n");
            sb.Append("  MinimumSeverity: ").Append(MinimumSeverity).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  ScanType: ").Append(ScanType).Append("\n");
            sb.Append("  EndpointToAdd: ").Append(EndpointToAdd).Append("\n");
            sb.Append("  _File: ").Append(_File).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  PushToJira: ").Append(PushToJira).Append("\n");
            sb.Append("  CloseOldFindings: ").Append(CloseOldFindings).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  BuildId: ").Append(BuildId).Append("\n");
            sb.Append("  BranchTag: ").Append(BranchTag).Append("\n");
            sb.Append("  CommitHash: ").Append(CommitHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReImportScan);
        }

        /// <summary>
        /// Returns true if ReImportScan instances are equal
        /// </summary>
        /// <param name="input">Instance of ReImportScan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReImportScan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScanDate == input.ScanDate ||
                    (this.ScanDate != null &&
                    this.ScanDate.Equals(input.ScanDate))
                ) && 
                (
                    this.MinimumSeverity == input.MinimumSeverity ||
                    (this.MinimumSeverity != null &&
                    this.MinimumSeverity.Equals(input.MinimumSeverity))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Verified == input.Verified ||
                    (this.Verified != null &&
                    this.Verified.Equals(input.Verified))
                ) && 
                (
                    this.ScanType == input.ScanType ||
                    (this.ScanType != null &&
                    this.ScanType.Equals(input.ScanType))
                ) && 
                (
                    this.EndpointToAdd == input.EndpointToAdd ||
                    (this.EndpointToAdd != null &&
                    this.EndpointToAdd.Equals(input.EndpointToAdd))
                ) && 
                (
                    this._File == input._File ||
                    (this._File != null &&
                    this._File.Equals(input._File))
                ) && 
                (
                    this.Test == input.Test ||
                    (this.Test != null &&
                    this.Test.Equals(input.Test))
                ) && 
                (
                    this.PushToJira == input.PushToJira ||
                    (this.PushToJira != null &&
                    this.PushToJira.Equals(input.PushToJira))
                ) && 
                (
                    this.CloseOldFindings == input.CloseOldFindings ||
                    (this.CloseOldFindings != null &&
                    this.CloseOldFindings.Equals(input.CloseOldFindings))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.BuildId == input.BuildId ||
                    (this.BuildId != null &&
                    this.BuildId.Equals(input.BuildId))
                ) && 
                (
                    this.BranchTag == input.BranchTag ||
                    (this.BranchTag != null &&
                    this.BranchTag.Equals(input.BranchTag))
                ) && 
                (
                    this.CommitHash == input.CommitHash ||
                    (this.CommitHash != null &&
                    this.CommitHash.Equals(input.CommitHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScanDate != null)
                    hashCode = hashCode * 59 + this.ScanDate.GetHashCode();
                if (this.MinimumSeverity != null)
                    hashCode = hashCode * 59 + this.MinimumSeverity.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Verified != null)
                    hashCode = hashCode * 59 + this.Verified.GetHashCode();
                if (this.ScanType != null)
                    hashCode = hashCode * 59 + this.ScanType.GetHashCode();
                if (this.EndpointToAdd != null)
                    hashCode = hashCode * 59 + this.EndpointToAdd.GetHashCode();
                if (this._File != null)
                    hashCode = hashCode * 59 + this._File.GetHashCode();
                if (this.Test != null)
                    hashCode = hashCode * 59 + this.Test.GetHashCode();
                if (this.PushToJira != null)
                    hashCode = hashCode * 59 + this.PushToJira.GetHashCode();
                if (this.CloseOldFindings != null)
                    hashCode = hashCode * 59 + this.CloseOldFindings.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.BuildId != null)
                    hashCode = hashCode * 59 + this.BuildId.GetHashCode();
                if (this.BranchTag != null)
                    hashCode = hashCode * 59 + this.BranchTag.GetHashCode();
                if (this.CommitHash != null)
                    hashCode = hashCode * 59 + this.CommitHash.GetHashCode();
                return hashCode;
            }
        }
    }

}
