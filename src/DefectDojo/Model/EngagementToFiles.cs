/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// EngagementToFiles
    /// </summary>
    [DataContract]
    public partial class EngagementToFiles :  IEquatable<EngagementToFiles>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EngagementToFiles" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EngagementToFiles() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EngagementToFiles" /> class.
        /// </summary>
        /// <param name="engagementId">engagementId (required).</param>
        /// <param name="files">files (required).</param>
        public EngagementToFiles(int? engagementId = default(int?), List<ModelFile> files = default(List<ModelFile>))
        {
            // to ensure "engagementId" is required (not null)
            if (engagementId == null)
            {
                throw new InvalidDataException("engagementId is a required property for EngagementToFiles and cannot be null");
            }
            else
            {
                this.EngagementId = engagementId;
            }
            // to ensure "files" is required (not null)
            if (files == null)
            {
                throw new InvalidDataException("files is a required property for EngagementToFiles and cannot be null");
            }
            else
            {
                this.Files = files;
            }
        }
        
        /// <summary>
        /// Gets or Sets EngagementId
        /// </summary>
        [DataMember(Name="engagement_id", EmitDefaultValue=false)]
        public int? EngagementId { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public List<ModelFile> Files { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EngagementToFiles {\n");
            sb.Append("  EngagementId: ").Append(EngagementId).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EngagementToFiles);
        }

        /// <summary>
        /// Returns true if EngagementToFiles instances are equal
        /// </summary>
        /// <param name="input">Instance of EngagementToFiles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EngagementToFiles input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EngagementId == input.EngagementId ||
                    (this.EngagementId != null &&
                    this.EngagementId.Equals(input.EngagementId))
                ) && 
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EngagementId != null)
                    hashCode = hashCode * 59 + this.EngagementId.GetHashCode();
                if (this.Files != null)
                    hashCode = hashCode * 59 + this.Files.GetHashCode();
                return hashCode;
            }
        }
    }

}
