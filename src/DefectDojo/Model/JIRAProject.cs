/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// JIRAProject
    /// </summary>
    [DataContract]
    public partial class JIRAProject :  IEquatable<JIRAProject>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JIRAProject" /> class.
        /// </summary>
        /// <param name="projectKey">projectKey.</param>
        /// <param name="issueTemplateDir">Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates..</param>
        /// <param name="component">component.</param>
        /// <param name="pushAllIssues">Automatically maintain parity with JIRA. Always create and update JIRA tickets for findings in this Product..</param>
        /// <param name="enableEngagementEpicMapping">enableEngagementEpicMapping.</param>
        /// <param name="pushNotes">pushNotes.</param>
        /// <param name="productJiraSlaNotification">productJiraSlaNotification.</param>
        /// <param name="riskAcceptanceExpirationNotification">riskAcceptanceExpirationNotification.</param>
        /// <param name="jiraInstance">jiraInstance.</param>
        /// <param name="product">product.</param>
        /// <param name="engagement">engagement.</param>
        public JIRAProject(string projectKey = default(string), string issueTemplateDir = default(string), string component = default(string), bool? pushAllIssues = default(bool?), bool? enableEngagementEpicMapping = default(bool?), bool? pushNotes = default(bool?), bool? productJiraSlaNotification = default(bool?), bool? riskAcceptanceExpirationNotification = default(bool?), int? jiraInstance = default(int?), int? product = default(int?), int? engagement = default(int?))
        {
            this.ProjectKey = projectKey;
            this.IssueTemplateDir = issueTemplateDir;
            this.Component = component;
            this.PushAllIssues = pushAllIssues;
            this.EnableEngagementEpicMapping = enableEngagementEpicMapping;
            this.PushNotes = pushNotes;
            this.ProductJiraSlaNotification = productJiraSlaNotification;
            this.RiskAcceptanceExpirationNotification = riskAcceptanceExpirationNotification;
            this.JiraInstance = jiraInstance;
            this.Product = product;
            this.Engagement = engagement;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets ProjectKey
        /// </summary>
        [DataMember(Name="project_key", EmitDefaultValue=false)]
        public string ProjectKey { get; set; }

        /// <summary>
        /// Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.
        /// </summary>
        /// <value>Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.</value>
        [DataMember(Name="issue_template_dir", EmitDefaultValue=false)]
        public string IssueTemplateDir { get; set; }

        /// <summary>
        /// Gets or Sets Component
        /// </summary>
        [DataMember(Name="component", EmitDefaultValue=false)]
        public string Component { get; set; }

        /// <summary>
        /// Automatically maintain parity with JIRA. Always create and update JIRA tickets for findings in this Product.
        /// </summary>
        /// <value>Automatically maintain parity with JIRA. Always create and update JIRA tickets for findings in this Product.</value>
        [DataMember(Name="push_all_issues", EmitDefaultValue=false)]
        public bool? PushAllIssues { get; set; }

        /// <summary>
        /// Gets or Sets EnableEngagementEpicMapping
        /// </summary>
        [DataMember(Name="enable_engagement_epic_mapping", EmitDefaultValue=false)]
        public bool? EnableEngagementEpicMapping { get; set; }

        /// <summary>
        /// Gets or Sets PushNotes
        /// </summary>
        [DataMember(Name="push_notes", EmitDefaultValue=false)]
        public bool? PushNotes { get; set; }

        /// <summary>
        /// Gets or Sets ProductJiraSlaNotification
        /// </summary>
        [DataMember(Name="product_jira_sla_notification", EmitDefaultValue=false)]
        public bool? ProductJiraSlaNotification { get; set; }

        /// <summary>
        /// Gets or Sets RiskAcceptanceExpirationNotification
        /// </summary>
        [DataMember(Name="risk_acceptance_expiration_notification", EmitDefaultValue=false)]
        public bool? RiskAcceptanceExpirationNotification { get; set; }

        /// <summary>
        /// Gets or Sets JiraInstance
        /// </summary>
        [DataMember(Name="jira_instance", EmitDefaultValue=false)]
        public int? JiraInstance { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public int? Product { get; set; }

        /// <summary>
        /// Gets or Sets Engagement
        /// </summary>
        [DataMember(Name="engagement", EmitDefaultValue=false)]
        public int? Engagement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JIRAProject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProjectKey: ").Append(ProjectKey).Append("\n");
            sb.Append("  IssueTemplateDir: ").Append(IssueTemplateDir).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  PushAllIssues: ").Append(PushAllIssues).Append("\n");
            sb.Append("  EnableEngagementEpicMapping: ").Append(EnableEngagementEpicMapping).Append("\n");
            sb.Append("  PushNotes: ").Append(PushNotes).Append("\n");
            sb.Append("  ProductJiraSlaNotification: ").Append(ProductJiraSlaNotification).Append("\n");
            sb.Append("  RiskAcceptanceExpirationNotification: ").Append(RiskAcceptanceExpirationNotification).Append("\n");
            sb.Append("  JiraInstance: ").Append(JiraInstance).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Engagement: ").Append(Engagement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JIRAProject);
        }

        /// <summary>
        /// Returns true if JIRAProject instances are equal
        /// </summary>
        /// <param name="input">Instance of JIRAProject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JIRAProject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProjectKey == input.ProjectKey ||
                    (this.ProjectKey != null &&
                    this.ProjectKey.Equals(input.ProjectKey))
                ) && 
                (
                    this.IssueTemplateDir == input.IssueTemplateDir ||
                    (this.IssueTemplateDir != null &&
                    this.IssueTemplateDir.Equals(input.IssueTemplateDir))
                ) && 
                (
                    this.Component == input.Component ||
                    (this.Component != null &&
                    this.Component.Equals(input.Component))
                ) && 
                (
                    this.PushAllIssues == input.PushAllIssues ||
                    (this.PushAllIssues != null &&
                    this.PushAllIssues.Equals(input.PushAllIssues))
                ) && 
                (
                    this.EnableEngagementEpicMapping == input.EnableEngagementEpicMapping ||
                    (this.EnableEngagementEpicMapping != null &&
                    this.EnableEngagementEpicMapping.Equals(input.EnableEngagementEpicMapping))
                ) && 
                (
                    this.PushNotes == input.PushNotes ||
                    (this.PushNotes != null &&
                    this.PushNotes.Equals(input.PushNotes))
                ) && 
                (
                    this.ProductJiraSlaNotification == input.ProductJiraSlaNotification ||
                    (this.ProductJiraSlaNotification != null &&
                    this.ProductJiraSlaNotification.Equals(input.ProductJiraSlaNotification))
                ) && 
                (
                    this.RiskAcceptanceExpirationNotification == input.RiskAcceptanceExpirationNotification ||
                    (this.RiskAcceptanceExpirationNotification != null &&
                    this.RiskAcceptanceExpirationNotification.Equals(input.RiskAcceptanceExpirationNotification))
                ) && 
                (
                    this.JiraInstance == input.JiraInstance ||
                    (this.JiraInstance != null &&
                    this.JiraInstance.Equals(input.JiraInstance))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Engagement == input.Engagement ||
                    (this.Engagement != null &&
                    this.Engagement.Equals(input.Engagement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProjectKey != null)
                    hashCode = hashCode * 59 + this.ProjectKey.GetHashCode();
                if (this.IssueTemplateDir != null)
                    hashCode = hashCode * 59 + this.IssueTemplateDir.GetHashCode();
                if (this.Component != null)
                    hashCode = hashCode * 59 + this.Component.GetHashCode();
                if (this.PushAllIssues != null)
                    hashCode = hashCode * 59 + this.PushAllIssues.GetHashCode();
                if (this.EnableEngagementEpicMapping != null)
                    hashCode = hashCode * 59 + this.EnableEngagementEpicMapping.GetHashCode();
                if (this.PushNotes != null)
                    hashCode = hashCode * 59 + this.PushNotes.GetHashCode();
                if (this.ProductJiraSlaNotification != null)
                    hashCode = hashCode * 59 + this.ProductJiraSlaNotification.GetHashCode();
                if (this.RiskAcceptanceExpirationNotification != null)
                    hashCode = hashCode * 59 + this.RiskAcceptanceExpirationNotification.GetHashCode();
                if (this.JiraInstance != null)
                    hashCode = hashCode * 59 + this.JiraInstance.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Engagement != null)
                    hashCode = hashCode * 59 + this.Engagement.GetHashCode();
                return hashCode;
            }
        }
    }

}
