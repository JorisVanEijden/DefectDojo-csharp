/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// Endpoint
    /// </summary>
    [DataContract]
    public partial class Endpoint :  IEquatable<Endpoint>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Endpoint" /> class.
        /// </summary>
        /// <param name="tags">tags.</param>
        /// <param name="protocol">The communication protocol such as &#39;http&#39;, &#39;ftp&#39;, etc..</param>
        /// <param name="host">The host name or IP address, you can also include the port number. For example&#39;127.0.0.1&#39;, &#39;127.0.0.1:8080&#39;, &#39;localhost&#39;, &#39;yourdomain.com&#39;..</param>
        /// <param name="fqdn">fqdn.</param>
        /// <param name="port">The network port associated with the endpoint..</param>
        /// <param name="path">The location of the resource, it should start with a &#39;/&#39;. For example/endpoint/420/edit.</param>
        /// <param name="query">The query string, the question mark should be omitted.For example &#39;group&#x3D;4&amp;team&#x3D;8&#39;.</param>
        /// <param name="fragment">The fragment identifier which follows the hash mark. The hash mark should be omitted. For example &#39;section-13&#39;, &#39;paragraph-2&#39;..</param>
        /// <param name="mitigated">mitigated.</param>
        /// <param name="product">product.</param>
        /// <param name="endpointStatus">endpointStatus.</param>
        public Endpoint(List<string> tags = default(List<string>), string protocol = default(string), string host = default(string), string fqdn = default(string), int? port = default(int?), string path = default(string), string query = default(string), string fragment = default(string), bool? mitigated = default(bool?), int? product = default(int?), List<int?> endpointStatus = default(List<int?>))
        {
            this.Tags = tags;
            this.Protocol = protocol;
            this.Host = host;
            this.Fqdn = fqdn;
            this.Port = port;
            this.Path = path;
            this.Query = query;
            this.Fragment = fragment;
            this.Mitigated = mitigated;
            this.Product = product;
            this.EndpointStatus = endpointStatus;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// The communication protocol such as &#39;http&#39;, &#39;ftp&#39;, etc.
        /// </summary>
        /// <value>The communication protocol such as &#39;http&#39;, &#39;ftp&#39;, etc.</value>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public string Protocol { get; set; }

        /// <summary>
        /// The host name or IP address, you can also include the port number. For example&#39;127.0.0.1&#39;, &#39;127.0.0.1:8080&#39;, &#39;localhost&#39;, &#39;yourdomain.com&#39;.
        /// </summary>
        /// <value>The host name or IP address, you can also include the port number. For example&#39;127.0.0.1&#39;, &#39;127.0.0.1:8080&#39;, &#39;localhost&#39;, &#39;yourdomain.com&#39;.</value>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets Fqdn
        /// </summary>
        [DataMember(Name="fqdn", EmitDefaultValue=false)]
        public string Fqdn { get; set; }

        /// <summary>
        /// The network port associated with the endpoint.
        /// </summary>
        /// <value>The network port associated with the endpoint.</value>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// The location of the resource, it should start with a &#39;/&#39;. For example/endpoint/420/edit
        /// </summary>
        /// <value>The location of the resource, it should start with a &#39;/&#39;. For example/endpoint/420/edit</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// The query string, the question mark should be omitted.For example &#39;group&#x3D;4&amp;team&#x3D;8&#39;
        /// </summary>
        /// <value>The query string, the question mark should be omitted.For example &#39;group&#x3D;4&amp;team&#x3D;8&#39;</value>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public string Query { get; set; }

        /// <summary>
        /// The fragment identifier which follows the hash mark. The hash mark should be omitted. For example &#39;section-13&#39;, &#39;paragraph-2&#39;.
        /// </summary>
        /// <value>The fragment identifier which follows the hash mark. The hash mark should be omitted. For example &#39;section-13&#39;, &#39;paragraph-2&#39;.</value>
        [DataMember(Name="fragment", EmitDefaultValue=false)]
        public string Fragment { get; set; }

        /// <summary>
        /// Gets or Sets Mitigated
        /// </summary>
        [DataMember(Name="mitigated", EmitDefaultValue=false)]
        public bool? Mitigated { get; set; }

        /// <summary>
        /// Temporary archive with tags from the previous tagging library we used
        /// </summary>
        /// <value>Temporary archive with tags from the previous tagging library we used</value>
        [DataMember(Name="tags_from_django_tagging", EmitDefaultValue=false)]
        public string TagsFromDjangoTagging { get; private set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public int? Product { get; set; }

        /// <summary>
        /// Gets or Sets EndpointParams
        /// </summary>
        [DataMember(Name="endpoint_params", EmitDefaultValue=false)]
        public List<int?> EndpointParams { get; private set; }

        /// <summary>
        /// Gets or Sets EndpointStatus
        /// </summary>
        [DataMember(Name="endpoint_status", EmitDefaultValue=false)]
        public List<int?> EndpointStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Endpoint {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Fqdn: ").Append(Fqdn).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Fragment: ").Append(Fragment).Append("\n");
            sb.Append("  Mitigated: ").Append(Mitigated).Append("\n");
            sb.Append("  TagsFromDjangoTagging: ").Append(TagsFromDjangoTagging).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  EndpointParams: ").Append(EndpointParams).Append("\n");
            sb.Append("  EndpointStatus: ").Append(EndpointStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Endpoint);
        }

        /// <summary>
        /// Returns true if Endpoint instances are equal
        /// </summary>
        /// <param name="input">Instance of Endpoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Endpoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Fqdn == input.Fqdn ||
                    (this.Fqdn != null &&
                    this.Fqdn.Equals(input.Fqdn))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.Fragment == input.Fragment ||
                    (this.Fragment != null &&
                    this.Fragment.Equals(input.Fragment))
                ) && 
                (
                    this.Mitigated == input.Mitigated ||
                    (this.Mitigated != null &&
                    this.Mitigated.Equals(input.Mitigated))
                ) && 
                (
                    this.TagsFromDjangoTagging == input.TagsFromDjangoTagging ||
                    (this.TagsFromDjangoTagging != null &&
                    this.TagsFromDjangoTagging.Equals(input.TagsFromDjangoTagging))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.EndpointParams == input.EndpointParams ||
                    this.EndpointParams != null &&
                    this.EndpointParams.SequenceEqual(input.EndpointParams)
                ) && 
                (
                    this.EndpointStatus == input.EndpointStatus ||
                    this.EndpointStatus != null &&
                    this.EndpointStatus.SequenceEqual(input.EndpointStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.Fqdn != null)
                    hashCode = hashCode * 59 + this.Fqdn.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.Fragment != null)
                    hashCode = hashCode * 59 + this.Fragment.GetHashCode();
                if (this.Mitigated != null)
                    hashCode = hashCode * 59 + this.Mitigated.GetHashCode();
                if (this.TagsFromDjangoTagging != null)
                    hashCode = hashCode * 59 + this.TagsFromDjangoTagging.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.EndpointParams != null)
                    hashCode = hashCode * 59 + this.EndpointParams.GetHashCode();
                if (this.EndpointStatus != null)
                    hashCode = hashCode * 59 + this.EndpointStatus.GetHashCode();
                return hashCode;
            }
        }
    }

}
