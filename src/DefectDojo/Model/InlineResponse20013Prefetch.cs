/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// InlineResponse20013Prefetch
    /// </summary>
    [DataContract]
    public partial class InlineResponse20013Prefetch :  IEquatable<InlineResponse20013Prefetch>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20013Prefetch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public InlineResponse20013Prefetch()
        {
        }
        
        /// <summary>
        /// Gets or Sets AuthorizedUsers
        /// </summary>
        [DataMember(Name="authorized_users", EmitDefaultValue=false)]
        public Dictionary<string, UserStub> AuthorizedUsers { get; private set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public Dictionary<string, UserStub> Members { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20013Prefetch {\n");
            sb.Append("  AuthorizedUsers: ").Append(AuthorizedUsers).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20013Prefetch);
        }

        /// <summary>
        /// Returns true if InlineResponse20013Prefetch instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20013Prefetch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20013Prefetch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthorizedUsers == input.AuthorizedUsers ||
                    this.AuthorizedUsers != null &&
                    this.AuthorizedUsers.SequenceEqual(input.AuthorizedUsers)
                ) && 
                (
                    this.Members == input.Members ||
                    this.Members != null &&
                    this.Members.SequenceEqual(input.Members)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthorizedUsers != null)
                    hashCode = hashCode * 59 + this.AuthorizedUsers.GetHashCode();
                if (this.Members != null)
                    hashCode = hashCode * 59 + this.Members.GetHashCode();
                return hashCode;
            }
        }
    }

}
