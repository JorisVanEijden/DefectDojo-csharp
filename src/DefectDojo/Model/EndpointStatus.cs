/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// EndpointStatus
    /// </summary>
    [DataContract]
    public partial class EndpointStatus :  IEquatable<EndpointStatus>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointStatus" /> class.
        /// </summary>
        /// <param name="date">date.</param>
        /// <param name="mitigated">mitigated.</param>
        /// <param name="falsePositive">falsePositive.</param>
        /// <param name="outOfScope">outOfScope.</param>
        /// <param name="riskAccepted">riskAccepted.</param>
        /// <param name="mitigatedBy">mitigatedBy.</param>
        /// <param name="endpoint">endpoint.</param>
        /// <param name="finding">finding.</param>
        public EndpointStatus(DateTime? date = default(DateTime?), bool? mitigated = default(bool?), bool? falsePositive = default(bool?), bool? outOfScope = default(bool?), bool? riskAccepted = default(bool?), int? mitigatedBy = default(int?), int? endpoint = default(int?), int? finding = default(int?))
        {
            this.Date = date;
            this.Mitigated = mitigated;
            this.FalsePositive = falsePositive;
            this.OutOfScope = outOfScope;
            this.RiskAccepted = riskAccepted;
            this.MitigatedBy = mitigatedBy;
            this.Endpoint = endpoint;
            this.Finding = finding;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name="last_modified", EmitDefaultValue=false)]
        public DateTime? LastModified { get; private set; }

        /// <summary>
        /// Gets or Sets Mitigated
        /// </summary>
        [DataMember(Name="mitigated", EmitDefaultValue=false)]
        public bool? Mitigated { get; set; }

        /// <summary>
        /// Gets or Sets MitigatedTime
        /// </summary>
        [DataMember(Name="mitigated_time", EmitDefaultValue=false)]
        public DateTime? MitigatedTime { get; private set; }

        /// <summary>
        /// Gets or Sets FalsePositive
        /// </summary>
        [DataMember(Name="false_positive", EmitDefaultValue=false)]
        public bool? FalsePositive { get; set; }

        /// <summary>
        /// Gets or Sets OutOfScope
        /// </summary>
        [DataMember(Name="out_of_scope", EmitDefaultValue=false)]
        public bool? OutOfScope { get; set; }

        /// <summary>
        /// Gets or Sets RiskAccepted
        /// </summary>
        [DataMember(Name="risk_accepted", EmitDefaultValue=false)]
        public bool? RiskAccepted { get; set; }

        /// <summary>
        /// Gets or Sets MitigatedBy
        /// </summary>
        [DataMember(Name="mitigated_by", EmitDefaultValue=false)]
        public int? MitigatedBy { get; set; }

        /// <summary>
        /// Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name="endpoint", EmitDefaultValue=false)]
        public int? Endpoint { get; set; }

        /// <summary>
        /// Gets or Sets Finding
        /// </summary>
        [DataMember(Name="finding", EmitDefaultValue=false)]
        public int? Finding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EndpointStatus {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Mitigated: ").Append(Mitigated).Append("\n");
            sb.Append("  MitigatedTime: ").Append(MitigatedTime).Append("\n");
            sb.Append("  FalsePositive: ").Append(FalsePositive).Append("\n");
            sb.Append("  OutOfScope: ").Append(OutOfScope).Append("\n");
            sb.Append("  RiskAccepted: ").Append(RiskAccepted).Append("\n");
            sb.Append("  MitigatedBy: ").Append(MitigatedBy).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  Finding: ").Append(Finding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EndpointStatus);
        }

        /// <summary>
        /// Returns true if EndpointStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of EndpointStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndpointStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.Mitigated == input.Mitigated ||
                    (this.Mitigated != null &&
                    this.Mitigated.Equals(input.Mitigated))
                ) && 
                (
                    this.MitigatedTime == input.MitigatedTime ||
                    (this.MitigatedTime != null &&
                    this.MitigatedTime.Equals(input.MitigatedTime))
                ) && 
                (
                    this.FalsePositive == input.FalsePositive ||
                    (this.FalsePositive != null &&
                    this.FalsePositive.Equals(input.FalsePositive))
                ) && 
                (
                    this.OutOfScope == input.OutOfScope ||
                    (this.OutOfScope != null &&
                    this.OutOfScope.Equals(input.OutOfScope))
                ) && 
                (
                    this.RiskAccepted == input.RiskAccepted ||
                    (this.RiskAccepted != null &&
                    this.RiskAccepted.Equals(input.RiskAccepted))
                ) && 
                (
                    this.MitigatedBy == input.MitigatedBy ||
                    (this.MitigatedBy != null &&
                    this.MitigatedBy.Equals(input.MitigatedBy))
                ) && 
                (
                    this.Endpoint == input.Endpoint ||
                    (this.Endpoint != null &&
                    this.Endpoint.Equals(input.Endpoint))
                ) && 
                (
                    this.Finding == input.Finding ||
                    (this.Finding != null &&
                    this.Finding.Equals(input.Finding))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.Mitigated != null)
                    hashCode = hashCode * 59 + this.Mitigated.GetHashCode();
                if (this.MitigatedTime != null)
                    hashCode = hashCode * 59 + this.MitigatedTime.GetHashCode();
                if (this.FalsePositive != null)
                    hashCode = hashCode * 59 + this.FalsePositive.GetHashCode();
                if (this.OutOfScope != null)
                    hashCode = hashCode * 59 + this.OutOfScope.GetHashCode();
                if (this.RiskAccepted != null)
                    hashCode = hashCode * 59 + this.RiskAccepted.GetHashCode();
                if (this.MitigatedBy != null)
                    hashCode = hashCode * 59 + this.MitigatedBy.GetHashCode();
                if (this.Endpoint != null)
                    hashCode = hashCode * 59 + this.Endpoint.GetHashCode();
                if (this.Finding != null)
                    hashCode = hashCode * 59 + this.Finding.GetHashCode();
                return hashCode;
            }
        }
    }

}
