/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// FindingCreate
    /// </summary>
    [DataContract]
    public partial class FindingCreate :  IEquatable<FindingCreate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FindingCreate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FindingCreate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FindingCreate" /> class.
        /// </summary>
        /// <param name="test">test (required).</param>
        /// <param name="threadId">threadId.</param>
        /// <param name="foundBy">foundBy (required).</param>
        /// <param name="url">url.</param>
        /// <param name="tags">tags.</param>
        /// <param name="pushToJira">pushToJira (default to false).</param>
        /// <param name="title">A short description of the flaw. (required).</param>
        /// <param name="date">The date the flaw was discovered..</param>
        /// <param name="slaStartDate">(readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to &#39;date&#39;..</param>
        /// <param name="cwe">The CWE number associated with this flaw..</param>
        /// <param name="cve">The Common Vulnerabilities and Exposures (CVE) associated with this flaw..</param>
        /// <param name="cvssv3">Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw..</param>
        /// <param name="cvssv3Score">Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding.</param>
        /// <param name="severity">The severity level of this flaw (Critical, High, Medium, Low, Informational). (required).</param>
        /// <param name="description">Longer more descriptive information about the flaw. (required).</param>
        /// <param name="mitigation">Text describing how to best fix the flaw..</param>
        /// <param name="impact">Text describing the impact this flaw has on systems, products, enterprise, etc..</param>
        /// <param name="stepsToReproduce">Text describing the steps that must be followed in order to reproduce the flaw / bug..</param>
        /// <param name="severityJustification">Text describing why a certain severity was associated with this flaw..</param>
        /// <param name="references">The external documentation available for this flaw..</param>
        /// <param name="isTemplate">Denotes if this finding is a template and can be reused..</param>
        /// <param name="active">Denotes if this flaw is active or not..</param>
        /// <param name="verified">Denotes if this flaw has been manually verified by the tester..</param>
        /// <param name="falseP">Denotes if this flaw has been deemed a false positive by the tester..</param>
        /// <param name="duplicate">Denotes if this flaw is a duplicate of other flaws reported..</param>
        /// <param name="outOfScope">Denotes if this flaw falls outside the scope of the test and/or engagement..</param>
        /// <param name="riskAccepted">Denotes if this finding has been marked as an accepted risk..</param>
        /// <param name="underReview">Denotes is this flaw is currently being reviewed..</param>
        /// <param name="underDefectReview">Denotes if this finding is under defect review..</param>
        /// <param name="isMitigated">Denotes if this flaw has been fixed..</param>
        /// <param name="numericalSeverity">The numerical representation of the severity (S0, S1, S2, S3, S4). (required).</param>
        /// <param name="line">Source line number of the attack vector..</param>
        /// <param name="filePath">Identified file(s) containing the flaw..</param>
        /// <param name="componentName">Name of the affected component (library name, part of a system, ...)..</param>
        /// <param name="componentVersion">Version of the affected component..</param>
        /// <param name="staticFinding">Flaw has been detected from a Static Application Security Testing tool (SAST)..</param>
        /// <param name="dynamicFinding">Flaw has been detected from a Dynamic Application Security Testing tool (DAST)..</param>
        /// <param name="uniqueIdFromTool">Vulnerability technical id from the source tool. Allows to track unique vulnerabilities..</param>
        /// <param name="vulnIdFromTool">Non-unique technical id from the source tool associated with the vulnerability type..</param>
        /// <param name="sastSourceObject">Source object (variable, function...) of the attack vector..</param>
        /// <param name="sastSinkObject">Sink object (variable, function...) of the attack vector..</param>
        /// <param name="sastSourceLine">Source line number of the attack vector..</param>
        /// <param name="sastSourceFilePath">Source file path of the attack vector..</param>
        /// <param name="nbOccurences">Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner..</param>
        /// <param name="publishDate">Date when this vulnerability was made publicly available..</param>
        /// <param name="reviewRequestedBy">Documents who requested a review for this finding..</param>
        /// <param name="defectReviewRequestedBy">Documents who requested a defect review for this flaw..</param>
        /// <param name="sonarqubeIssue">The SonarQube issue associated with this finding..</param>
        /// <param name="endpoints">The hosts within the product that are susceptible to this flaw..</param>
        /// <param name="endpointStatus">The status of the endpoint associated with this flaw (Vulnerable, Mitigated, ...)..</param>
        /// <param name="reviewers">Documents who reviewed the flaw..</param>
        public FindingCreate(int? test = default(int?), int? threadId = default(int?), List<int?> foundBy = default(List<int?>), string url = default(string), List<string> tags = default(List<string>), bool? pushToJira = false, string title = default(string), DateTime? date = default(DateTime?), DateTime? slaStartDate = default(DateTime?), int? cwe = default(int?), string cve = default(string), string cvssv3 = default(string), decimal? cvssv3Score = default(decimal?), string severity = default(string), string description = default(string), string mitigation = default(string), string impact = default(string), string stepsToReproduce = default(string), string severityJustification = default(string), string references = default(string), bool? isTemplate = default(bool?), bool? active = default(bool?), bool? verified = default(bool?), bool? falseP = default(bool?), bool? duplicate = default(bool?), bool? outOfScope = default(bool?), bool? riskAccepted = default(bool?), bool? underReview = default(bool?), bool? underDefectReview = default(bool?), bool? isMitigated = default(bool?), string numericalSeverity = default(string), int? line = default(int?), string filePath = default(string), string componentName = default(string), string componentVersion = default(string), bool? staticFinding = default(bool?), bool? dynamicFinding = default(bool?), string uniqueIdFromTool = default(string), string vulnIdFromTool = default(string), string sastSourceObject = default(string), string sastSinkObject = default(string), int? sastSourceLine = default(int?), string sastSourceFilePath = default(string), int? nbOccurences = default(int?), DateTime? publishDate = default(DateTime?), int? reviewRequestedBy = default(int?), int? defectReviewRequestedBy = default(int?), int? sonarqubeIssue = default(int?), List<int?> endpoints = default(List<int?>), List<int?> endpointStatus = default(List<int?>), List<int?> reviewers = default(List<int?>))
        {
            // to ensure "test" is required (not null)
            if (test == null)
            {
                throw new InvalidDataException("test is a required property for FindingCreate and cannot be null");
            }
            else
            {
                this.Test = test;
            }
            // to ensure "foundBy" is required (not null)
            if (foundBy == null)
            {
                throw new InvalidDataException("foundBy is a required property for FindingCreate and cannot be null");
            }
            else
            {
                this.FoundBy = foundBy;
            }
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for FindingCreate and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            // to ensure "severity" is required (not null)
            if (severity == null)
            {
                throw new InvalidDataException("severity is a required property for FindingCreate and cannot be null");
            }
            else
            {
                this.Severity = severity;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for FindingCreate and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "numericalSeverity" is required (not null)
            if (numericalSeverity == null)
            {
                throw new InvalidDataException("numericalSeverity is a required property for FindingCreate and cannot be null");
            }
            else
            {
                this.NumericalSeverity = numericalSeverity;
            }
            this.ThreadId = threadId;
            this.Url = url;
            this.Tags = tags;
            // use default value if no "pushToJira" provided
            if (pushToJira == null)
            {
                this.PushToJira = false;
            }
            else
            {
                this.PushToJira = pushToJira;
            }
            this.Date = date;
            this.SlaStartDate = slaStartDate;
            this.Cwe = cwe;
            this.Cve = cve;
            this.Cvssv3 = cvssv3;
            this.Cvssv3Score = cvssv3Score;
            this.Mitigation = mitigation;
            this.Impact = impact;
            this.StepsToReproduce = stepsToReproduce;
            this.SeverityJustification = severityJustification;
            this.References = references;
            this.IsTemplate = isTemplate;
            this.Active = active;
            this.Verified = verified;
            this.FalseP = falseP;
            this.Duplicate = duplicate;
            this.OutOfScope = outOfScope;
            this.RiskAccepted = riskAccepted;
            this.UnderReview = underReview;
            this.UnderDefectReview = underDefectReview;
            this.IsMitigated = isMitigated;
            this.Line = line;
            this.FilePath = filePath;
            this.ComponentName = componentName;
            this.ComponentVersion = componentVersion;
            this.StaticFinding = staticFinding;
            this.DynamicFinding = dynamicFinding;
            this.UniqueIdFromTool = uniqueIdFromTool;
            this.VulnIdFromTool = vulnIdFromTool;
            this.SastSourceObject = sastSourceObject;
            this.SastSinkObject = sastSinkObject;
            this.SastSourceLine = sastSourceLine;
            this.SastSourceFilePath = sastSourceFilePath;
            this.NbOccurences = nbOccurences;
            this.PublishDate = publishDate;
            this.ReviewRequestedBy = reviewRequestedBy;
            this.DefectReviewRequestedBy = defectReviewRequestedBy;
            this.SonarqubeIssue = sonarqubeIssue;
            this.Endpoints = endpoints;
            this.EndpointStatus = endpointStatus;
            this.Reviewers = reviewers;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<int?> Notes { get; private set; }

        /// <summary>
        /// Gets or Sets Test
        /// </summary>
        [DataMember(Name="test", EmitDefaultValue=false)]
        public int? Test { get; set; }

        /// <summary>
        /// Gets or Sets ThreadId
        /// </summary>
        [DataMember(Name="thread_id", EmitDefaultValue=false)]
        public int? ThreadId { get; set; }

        /// <summary>
        /// Gets or Sets FoundBy
        /// </summary>
        [DataMember(Name="found_by", EmitDefaultValue=false)]
        public List<int?> FoundBy { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets PushToJira
        /// </summary>
        [DataMember(Name="push_to_jira", EmitDefaultValue=false)]
        public bool? PushToJira { get; set; }

        /// <summary>
        /// A short description of the flaw.
        /// </summary>
        /// <value>A short description of the flaw.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The date the flaw was discovered.
        /// </summary>
        /// <value>The date the flaw was discovered.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// (readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to &#39;date&#39;.
        /// </summary>
        /// <value>(readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to &#39;date&#39;.</value>
        [DataMember(Name="sla_start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? SlaStartDate { get; set; }

        /// <summary>
        /// The CWE number associated with this flaw.
        /// </summary>
        /// <value>The CWE number associated with this flaw.</value>
        [DataMember(Name="cwe", EmitDefaultValue=false)]
        public int? Cwe { get; set; }

        /// <summary>
        /// The Common Vulnerabilities and Exposures (CVE) associated with this flaw.
        /// </summary>
        /// <value>The Common Vulnerabilities and Exposures (CVE) associated with this flaw.</value>
        [DataMember(Name="cve", EmitDefaultValue=false)]
        public string Cve { get; set; }

        /// <summary>
        /// Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.
        /// </summary>
        /// <value>Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.</value>
        [DataMember(Name="cvssv3", EmitDefaultValue=false)]
        public string Cvssv3 { get; set; }

        /// <summary>
        /// Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding
        /// </summary>
        /// <value>Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding</value>
        [DataMember(Name="cvssv3_score", EmitDefaultValue=false)]
        public decimal? Cvssv3Score { get; set; }

        /// <summary>
        /// The severity level of this flaw (Critical, High, Medium, Low, Informational).
        /// </summary>
        /// <value>The severity level of this flaw (Critical, High, Medium, Low, Informational).</value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public string Severity { get; set; }

        /// <summary>
        /// Longer more descriptive information about the flaw.
        /// </summary>
        /// <value>Longer more descriptive information about the flaw.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Text describing how to best fix the flaw.
        /// </summary>
        /// <value>Text describing how to best fix the flaw.</value>
        [DataMember(Name="mitigation", EmitDefaultValue=false)]
        public string Mitigation { get; set; }

        /// <summary>
        /// Text describing the impact this flaw has on systems, products, enterprise, etc.
        /// </summary>
        /// <value>Text describing the impact this flaw has on systems, products, enterprise, etc.</value>
        [DataMember(Name="impact", EmitDefaultValue=false)]
        public string Impact { get; set; }

        /// <summary>
        /// Text describing the steps that must be followed in order to reproduce the flaw / bug.
        /// </summary>
        /// <value>Text describing the steps that must be followed in order to reproduce the flaw / bug.</value>
        [DataMember(Name="steps_to_reproduce", EmitDefaultValue=false)]
        public string StepsToReproduce { get; set; }

        /// <summary>
        /// Text describing why a certain severity was associated with this flaw.
        /// </summary>
        /// <value>Text describing why a certain severity was associated with this flaw.</value>
        [DataMember(Name="severity_justification", EmitDefaultValue=false)]
        public string SeverityJustification { get; set; }

        /// <summary>
        /// The external documentation available for this flaw.
        /// </summary>
        /// <value>The external documentation available for this flaw.</value>
        [DataMember(Name="references", EmitDefaultValue=false)]
        public string References { get; set; }

        /// <summary>
        /// Denotes if this finding is a template and can be reused.
        /// </summary>
        /// <value>Denotes if this finding is a template and can be reused.</value>
        [DataMember(Name="is_template", EmitDefaultValue=false)]
        public bool? IsTemplate { get; set; }

        /// <summary>
        /// Denotes if this flaw is active or not.
        /// </summary>
        /// <value>Denotes if this flaw is active or not.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Denotes if this flaw has been manually verified by the tester.
        /// </summary>
        /// <value>Denotes if this flaw has been manually verified by the tester.</value>
        [DataMember(Name="verified", EmitDefaultValue=false)]
        public bool? Verified { get; set; }

        /// <summary>
        /// Denotes if this flaw has been deemed a false positive by the tester.
        /// </summary>
        /// <value>Denotes if this flaw has been deemed a false positive by the tester.</value>
        [DataMember(Name="false_p", EmitDefaultValue=false)]
        public bool? FalseP { get; set; }

        /// <summary>
        /// Denotes if this flaw is a duplicate of other flaws reported.
        /// </summary>
        /// <value>Denotes if this flaw is a duplicate of other flaws reported.</value>
        [DataMember(Name="duplicate", EmitDefaultValue=false)]
        public bool? Duplicate { get; set; }

        /// <summary>
        /// Denotes if this flaw falls outside the scope of the test and/or engagement.
        /// </summary>
        /// <value>Denotes if this flaw falls outside the scope of the test and/or engagement.</value>
        [DataMember(Name="out_of_scope", EmitDefaultValue=false)]
        public bool? OutOfScope { get; set; }

        /// <summary>
        /// Denotes if this finding has been marked as an accepted risk.
        /// </summary>
        /// <value>Denotes if this finding has been marked as an accepted risk.</value>
        [DataMember(Name="risk_accepted", EmitDefaultValue=false)]
        public bool? RiskAccepted { get; set; }

        /// <summary>
        /// Denotes is this flaw is currently being reviewed.
        /// </summary>
        /// <value>Denotes is this flaw is currently being reviewed.</value>
        [DataMember(Name="under_review", EmitDefaultValue=false)]
        public bool? UnderReview { get; set; }

        /// <summary>
        /// Timestamp of latest status update (change in status related fields).
        /// </summary>
        /// <value>Timestamp of latest status update (change in status related fields).</value>
        [DataMember(Name="last_status_update", EmitDefaultValue=false)]
        public DateTime? LastStatusUpdate { get; private set; }

        /// <summary>
        /// Denotes if this finding is under defect review.
        /// </summary>
        /// <value>Denotes if this finding is under defect review.</value>
        [DataMember(Name="under_defect_review", EmitDefaultValue=false)]
        public bool? UnderDefectReview { get; set; }

        /// <summary>
        /// Denotes if this flaw has been fixed.
        /// </summary>
        /// <value>Denotes if this flaw has been fixed.</value>
        [DataMember(Name="is_Mitigated", EmitDefaultValue=false)]
        public bool? IsMitigated { get; set; }

        /// <summary>
        /// Denotes if this flaw has been fixed by storing the date it was fixed.
        /// </summary>
        /// <value>Denotes if this flaw has been fixed by storing the date it was fixed.</value>
        [DataMember(Name="mitigated", EmitDefaultValue=false)]
        public DateTime? Mitigated { get; private set; }

        /// <summary>
        /// The numerical representation of the severity (S0, S1, S2, S3, S4).
        /// </summary>
        /// <value>The numerical representation of the severity (S0, S1, S2, S3, S4).</value>
        [DataMember(Name="numerical_severity", EmitDefaultValue=false)]
        public string NumericalSeverity { get; set; }

        /// <summary>
        /// Provides the date the flaw was last &#39;touched&#39; by a tester.
        /// </summary>
        /// <value>Provides the date the flaw was last &#39;touched&#39; by a tester.</value>
        [DataMember(Name="last_reviewed", EmitDefaultValue=false)]
        public DateTime? LastReviewed { get; private set; }

        /// <summary>
        /// Deprecated will be removed, use line
        /// </summary>
        /// <value>Deprecated will be removed, use line</value>
        [DataMember(Name="line_number", EmitDefaultValue=false)]
        public string LineNumber { get; private set; }

        /// <summary>
        /// Filepath of the source code file in which the flaw is located.
        /// </summary>
        /// <value>Filepath of the source code file in which the flaw is located.</value>
        [DataMember(Name="sourcefilepath", EmitDefaultValue=false)]
        public string Sourcefilepath { get; private set; }

        /// <summary>
        /// Name of the source code file in which the flaw is located.
        /// </summary>
        /// <value>Name of the source code file in which the flaw is located.</value>
        [DataMember(Name="sourcefile", EmitDefaultValue=false)]
        public string Sourcefile { get; private set; }

        /// <summary>
        /// Parameter used to trigger the issue (DAST).
        /// </summary>
        /// <value>Parameter used to trigger the issue (DAST).</value>
        [DataMember(Name="param", EmitDefaultValue=false)]
        public string Param { get; private set; }

        /// <summary>
        /// Payload used to attack the service / application and trigger the bug / problem.
        /// </summary>
        /// <value>Payload used to attack the service / application and trigger the bug / problem.</value>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public string Payload { get; private set; }

        /// <summary>
        /// A hash over a configurable set of fields that is used for findings deduplication.
        /// </summary>
        /// <value>A hash over a configurable set of fields that is used for findings deduplication.</value>
        [DataMember(Name="hash_code", EmitDefaultValue=false)]
        public string HashCode { get; private set; }

        /// <summary>
        /// Source line number of the attack vector.
        /// </summary>
        /// <value>Source line number of the attack vector.</value>
        [DataMember(Name="line", EmitDefaultValue=false)]
        public int? Line { get; set; }

        /// <summary>
        /// Identified file(s) containing the flaw.
        /// </summary>
        /// <value>Identified file(s) containing the flaw.</value>
        [DataMember(Name="file_path", EmitDefaultValue=false)]
        public string FilePath { get; set; }

        /// <summary>
        /// Name of the affected component (library name, part of a system, ...).
        /// </summary>
        /// <value>Name of the affected component (library name, part of a system, ...).</value>
        [DataMember(Name="component_name", EmitDefaultValue=false)]
        public string ComponentName { get; set; }

        /// <summary>
        /// Version of the affected component.
        /// </summary>
        /// <value>Version of the affected component.</value>
        [DataMember(Name="component_version", EmitDefaultValue=false)]
        public string ComponentVersion { get; set; }

        /// <summary>
        /// Flaw has been detected from a Static Application Security Testing tool (SAST).
        /// </summary>
        /// <value>Flaw has been detected from a Static Application Security Testing tool (SAST).</value>
        [DataMember(Name="static_finding", EmitDefaultValue=false)]
        public bool? StaticFinding { get; set; }

        /// <summary>
        /// Flaw has been detected from a Dynamic Application Security Testing tool (DAST).
        /// </summary>
        /// <value>Flaw has been detected from a Dynamic Application Security Testing tool (DAST).</value>
        [DataMember(Name="dynamic_finding", EmitDefaultValue=false)]
        public bool? DynamicFinding { get; set; }

        /// <summary>
        /// The date the finding was created inside DefectDojo.
        /// </summary>
        /// <value>The date the finding was created inside DefectDojo.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }

        /// <summary>
        /// Confidence level of vulnerability which is supplied by the scanner.
        /// </summary>
        /// <value>Confidence level of vulnerability which is supplied by the scanner.</value>
        [DataMember(Name="scanner_confidence", EmitDefaultValue=false)]
        public int? ScannerConfidence { get; private set; }

        /// <summary>
        /// Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.
        /// </summary>
        /// <value>Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.</value>
        [DataMember(Name="unique_id_from_tool", EmitDefaultValue=false)]
        public string UniqueIdFromTool { get; set; }

        /// <summary>
        /// Non-unique technical id from the source tool associated with the vulnerability type.
        /// </summary>
        /// <value>Non-unique technical id from the source tool associated with the vulnerability type.</value>
        [DataMember(Name="vuln_id_from_tool", EmitDefaultValue=false)]
        public string VulnIdFromTool { get; set; }

        /// <summary>
        /// Source object (variable, function...) of the attack vector.
        /// </summary>
        /// <value>Source object (variable, function...) of the attack vector.</value>
        [DataMember(Name="sast_source_object", EmitDefaultValue=false)]
        public string SastSourceObject { get; set; }

        /// <summary>
        /// Sink object (variable, function...) of the attack vector.
        /// </summary>
        /// <value>Sink object (variable, function...) of the attack vector.</value>
        [DataMember(Name="sast_sink_object", EmitDefaultValue=false)]
        public string SastSinkObject { get; set; }

        /// <summary>
        /// Source line number of the attack vector.
        /// </summary>
        /// <value>Source line number of the attack vector.</value>
        [DataMember(Name="sast_source_line", EmitDefaultValue=false)]
        public int? SastSourceLine { get; set; }

        /// <summary>
        /// Source file path of the attack vector.
        /// </summary>
        /// <value>Source file path of the attack vector.</value>
        [DataMember(Name="sast_source_file_path", EmitDefaultValue=false)]
        public string SastSourceFilePath { get; set; }

        /// <summary>
        /// Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner.
        /// </summary>
        /// <value>Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner.</value>
        [DataMember(Name="nb_occurences", EmitDefaultValue=false)]
        public int? NbOccurences { get; set; }

        /// <summary>
        /// Date when this vulnerability was made publicly available.
        /// </summary>
        /// <value>Date when this vulnerability was made publicly available.</value>
        [DataMember(Name="publish_date", EmitDefaultValue=false)]
        public DateTime? PublishDate { get; set; }

        /// <summary>
        /// Temporary archive with tags from the previous tagging library we used
        /// </summary>
        /// <value>Temporary archive with tags from the previous tagging library we used</value>
        [DataMember(Name="tags_from_django_tagging", EmitDefaultValue=false)]
        public string TagsFromDjangoTagging { get; private set; }

        /// <summary>
        /// Link to the original finding if this finding is a duplicate.
        /// </summary>
        /// <value>Link to the original finding if this finding is a duplicate.</value>
        [DataMember(Name="duplicate_finding", EmitDefaultValue=false)]
        public int? DuplicateFinding { get; private set; }

        /// <summary>
        /// Documents who requested a review for this finding.
        /// </summary>
        /// <value>Documents who requested a review for this finding.</value>
        [DataMember(Name="review_requested_by", EmitDefaultValue=false)]
        public int? ReviewRequestedBy { get; set; }

        /// <summary>
        /// Documents who requested a defect review for this flaw.
        /// </summary>
        /// <value>Documents who requested a defect review for this flaw.</value>
        [DataMember(Name="defect_review_requested_by", EmitDefaultValue=false)]
        public int? DefectReviewRequestedBy { get; set; }

        /// <summary>
        /// Documents who has marked this flaw as fixed.
        /// </summary>
        /// <value>Documents who has marked this flaw as fixed.</value>
        [DataMember(Name="mitigated_by", EmitDefaultValue=false)]
        public int? MitigatedBy { get; private set; }

        /// <summary>
        /// Documents who reported the flaw.
        /// </summary>
        /// <value>Documents who reported the flaw.</value>
        [DataMember(Name="reporter", EmitDefaultValue=false)]
        public int? Reporter { get; private set; }

        /// <summary>
        /// Provides the person who last reviewed the flaw.
        /// </summary>
        /// <value>Provides the person who last reviewed the flaw.</value>
        [DataMember(Name="last_reviewed_by", EmitDefaultValue=false)]
        public int? LastReviewedBy { get; private set; }

        /// <summary>
        /// The SonarQube issue associated with this finding.
        /// </summary>
        /// <value>The SonarQube issue associated with this finding.</value>
        [DataMember(Name="sonarqube_issue", EmitDefaultValue=false)]
        public int? SonarqubeIssue { get; set; }

        /// <summary>
        /// The hosts within the product that are susceptible to this flaw.
        /// </summary>
        /// <value>The hosts within the product that are susceptible to this flaw.</value>
        [DataMember(Name="endpoints", EmitDefaultValue=false)]
        public List<int?> Endpoints { get; set; }

        /// <summary>
        /// The status of the endpoint associated with this flaw (Vulnerable, Mitigated, ...).
        /// </summary>
        /// <value>The status of the endpoint associated with this flaw (Vulnerable, Mitigated, ...).</value>
        [DataMember(Name="endpoint_status", EmitDefaultValue=false)]
        public List<int?> EndpointStatus { get; set; }

        /// <summary>
        /// Documents who reviewed the flaw.
        /// </summary>
        /// <value>Documents who reviewed the flaw.</value>
        [DataMember(Name="reviewers", EmitDefaultValue=false)]
        public List<int?> Reviewers { get; set; }

        /// <summary>
        /// Files(s) related to the flaw.
        /// </summary>
        /// <value>Files(s) related to the flaw.</value>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public List<int?> Files { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FindingCreate {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  FoundBy: ").Append(FoundBy).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  PushToJira: ").Append(PushToJira).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  SlaStartDate: ").Append(SlaStartDate).Append("\n");
            sb.Append("  Cwe: ").Append(Cwe).Append("\n");
            sb.Append("  Cve: ").Append(Cve).Append("\n");
            sb.Append("  Cvssv3: ").Append(Cvssv3).Append("\n");
            sb.Append("  Cvssv3Score: ").Append(Cvssv3Score).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Mitigation: ").Append(Mitigation).Append("\n");
            sb.Append("  Impact: ").Append(Impact).Append("\n");
            sb.Append("  StepsToReproduce: ").Append(StepsToReproduce).Append("\n");
            sb.Append("  SeverityJustification: ").Append(SeverityJustification).Append("\n");
            sb.Append("  References: ").Append(References).Append("\n");
            sb.Append("  IsTemplate: ").Append(IsTemplate).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  FalseP: ").Append(FalseP).Append("\n");
            sb.Append("  Duplicate: ").Append(Duplicate).Append("\n");
            sb.Append("  OutOfScope: ").Append(OutOfScope).Append("\n");
            sb.Append("  RiskAccepted: ").Append(RiskAccepted).Append("\n");
            sb.Append("  UnderReview: ").Append(UnderReview).Append("\n");
            sb.Append("  LastStatusUpdate: ").Append(LastStatusUpdate).Append("\n");
            sb.Append("  UnderDefectReview: ").Append(UnderDefectReview).Append("\n");
            sb.Append("  IsMitigated: ").Append(IsMitigated).Append("\n");
            sb.Append("  Mitigated: ").Append(Mitigated).Append("\n");
            sb.Append("  NumericalSeverity: ").Append(NumericalSeverity).Append("\n");
            sb.Append("  LastReviewed: ").Append(LastReviewed).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  Sourcefilepath: ").Append(Sourcefilepath).Append("\n");
            sb.Append("  Sourcefile: ").Append(Sourcefile).Append("\n");
            sb.Append("  Param: ").Append(Param).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  HashCode: ").Append(HashCode).Append("\n");
            sb.Append("  Line: ").Append(Line).Append("\n");
            sb.Append("  FilePath: ").Append(FilePath).Append("\n");
            sb.Append("  ComponentName: ").Append(ComponentName).Append("\n");
            sb.Append("  ComponentVersion: ").Append(ComponentVersion).Append("\n");
            sb.Append("  StaticFinding: ").Append(StaticFinding).Append("\n");
            sb.Append("  DynamicFinding: ").Append(DynamicFinding).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  ScannerConfidence: ").Append(ScannerConfidence).Append("\n");
            sb.Append("  UniqueIdFromTool: ").Append(UniqueIdFromTool).Append("\n");
            sb.Append("  VulnIdFromTool: ").Append(VulnIdFromTool).Append("\n");
            sb.Append("  SastSourceObject: ").Append(SastSourceObject).Append("\n");
            sb.Append("  SastSinkObject: ").Append(SastSinkObject).Append("\n");
            sb.Append("  SastSourceLine: ").Append(SastSourceLine).Append("\n");
            sb.Append("  SastSourceFilePath: ").Append(SastSourceFilePath).Append("\n");
            sb.Append("  NbOccurences: ").Append(NbOccurences).Append("\n");
            sb.Append("  PublishDate: ").Append(PublishDate).Append("\n");
            sb.Append("  TagsFromDjangoTagging: ").Append(TagsFromDjangoTagging).Append("\n");
            sb.Append("  DuplicateFinding: ").Append(DuplicateFinding).Append("\n");
            sb.Append("  ReviewRequestedBy: ").Append(ReviewRequestedBy).Append("\n");
            sb.Append("  DefectReviewRequestedBy: ").Append(DefectReviewRequestedBy).Append("\n");
            sb.Append("  MitigatedBy: ").Append(MitigatedBy).Append("\n");
            sb.Append("  Reporter: ").Append(Reporter).Append("\n");
            sb.Append("  LastReviewedBy: ").Append(LastReviewedBy).Append("\n");
            sb.Append("  SonarqubeIssue: ").Append(SonarqubeIssue).Append("\n");
            sb.Append("  Endpoints: ").Append(Endpoints).Append("\n");
            sb.Append("  EndpointStatus: ").Append(EndpointStatus).Append("\n");
            sb.Append("  Reviewers: ").Append(Reviewers).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindingCreate);
        }

        /// <summary>
        /// Returns true if FindingCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of FindingCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindingCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                ) && 
                (
                    this.Test == input.Test ||
                    (this.Test != null &&
                    this.Test.Equals(input.Test))
                ) && 
                (
                    this.ThreadId == input.ThreadId ||
                    (this.ThreadId != null &&
                    this.ThreadId.Equals(input.ThreadId))
                ) && 
                (
                    this.FoundBy == input.FoundBy ||
                    this.FoundBy != null &&
                    this.FoundBy.SequenceEqual(input.FoundBy)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.PushToJira == input.PushToJira ||
                    (this.PushToJira != null &&
                    this.PushToJira.Equals(input.PushToJira))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.SlaStartDate == input.SlaStartDate ||
                    (this.SlaStartDate != null &&
                    this.SlaStartDate.Equals(input.SlaStartDate))
                ) && 
                (
                    this.Cwe == input.Cwe ||
                    (this.Cwe != null &&
                    this.Cwe.Equals(input.Cwe))
                ) && 
                (
                    this.Cve == input.Cve ||
                    (this.Cve != null &&
                    this.Cve.Equals(input.Cve))
                ) && 
                (
                    this.Cvssv3 == input.Cvssv3 ||
                    (this.Cvssv3 != null &&
                    this.Cvssv3.Equals(input.Cvssv3))
                ) && 
                (
                    this.Cvssv3Score == input.Cvssv3Score ||
                    (this.Cvssv3Score != null &&
                    this.Cvssv3Score.Equals(input.Cvssv3Score))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Mitigation == input.Mitigation ||
                    (this.Mitigation != null &&
                    this.Mitigation.Equals(input.Mitigation))
                ) && 
                (
                    this.Impact == input.Impact ||
                    (this.Impact != null &&
                    this.Impact.Equals(input.Impact))
                ) && 
                (
                    this.StepsToReproduce == input.StepsToReproduce ||
                    (this.StepsToReproduce != null &&
                    this.StepsToReproduce.Equals(input.StepsToReproduce))
                ) && 
                (
                    this.SeverityJustification == input.SeverityJustification ||
                    (this.SeverityJustification != null &&
                    this.SeverityJustification.Equals(input.SeverityJustification))
                ) && 
                (
                    this.References == input.References ||
                    (this.References != null &&
                    this.References.Equals(input.References))
                ) && 
                (
                    this.IsTemplate == input.IsTemplate ||
                    (this.IsTemplate != null &&
                    this.IsTemplate.Equals(input.IsTemplate))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Verified == input.Verified ||
                    (this.Verified != null &&
                    this.Verified.Equals(input.Verified))
                ) && 
                (
                    this.FalseP == input.FalseP ||
                    (this.FalseP != null &&
                    this.FalseP.Equals(input.FalseP))
                ) && 
                (
                    this.Duplicate == input.Duplicate ||
                    (this.Duplicate != null &&
                    this.Duplicate.Equals(input.Duplicate))
                ) && 
                (
                    this.OutOfScope == input.OutOfScope ||
                    (this.OutOfScope != null &&
                    this.OutOfScope.Equals(input.OutOfScope))
                ) && 
                (
                    this.RiskAccepted == input.RiskAccepted ||
                    (this.RiskAccepted != null &&
                    this.RiskAccepted.Equals(input.RiskAccepted))
                ) && 
                (
                    this.UnderReview == input.UnderReview ||
                    (this.UnderReview != null &&
                    this.UnderReview.Equals(input.UnderReview))
                ) && 
                (
                    this.LastStatusUpdate == input.LastStatusUpdate ||
                    (this.LastStatusUpdate != null &&
                    this.LastStatusUpdate.Equals(input.LastStatusUpdate))
                ) && 
                (
                    this.UnderDefectReview == input.UnderDefectReview ||
                    (this.UnderDefectReview != null &&
                    this.UnderDefectReview.Equals(input.UnderDefectReview))
                ) && 
                (
                    this.IsMitigated == input.IsMitigated ||
                    (this.IsMitigated != null &&
                    this.IsMitigated.Equals(input.IsMitigated))
                ) && 
                (
                    this.Mitigated == input.Mitigated ||
                    (this.Mitigated != null &&
                    this.Mitigated.Equals(input.Mitigated))
                ) && 
                (
                    this.NumericalSeverity == input.NumericalSeverity ||
                    (this.NumericalSeverity != null &&
                    this.NumericalSeverity.Equals(input.NumericalSeverity))
                ) && 
                (
                    this.LastReviewed == input.LastReviewed ||
                    (this.LastReviewed != null &&
                    this.LastReviewed.Equals(input.LastReviewed))
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                ) && 
                (
                    this.Sourcefilepath == input.Sourcefilepath ||
                    (this.Sourcefilepath != null &&
                    this.Sourcefilepath.Equals(input.Sourcefilepath))
                ) && 
                (
                    this.Sourcefile == input.Sourcefile ||
                    (this.Sourcefile != null &&
                    this.Sourcefile.Equals(input.Sourcefile))
                ) && 
                (
                    this.Param == input.Param ||
                    (this.Param != null &&
                    this.Param.Equals(input.Param))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                ) && 
                (
                    this.HashCode == input.HashCode ||
                    (this.HashCode != null &&
                    this.HashCode.Equals(input.HashCode))
                ) && 
                (
                    this.Line == input.Line ||
                    (this.Line != null &&
                    this.Line.Equals(input.Line))
                ) && 
                (
                    this.FilePath == input.FilePath ||
                    (this.FilePath != null &&
                    this.FilePath.Equals(input.FilePath))
                ) && 
                (
                    this.ComponentName == input.ComponentName ||
                    (this.ComponentName != null &&
                    this.ComponentName.Equals(input.ComponentName))
                ) && 
                (
                    this.ComponentVersion == input.ComponentVersion ||
                    (this.ComponentVersion != null &&
                    this.ComponentVersion.Equals(input.ComponentVersion))
                ) && 
                (
                    this.StaticFinding == input.StaticFinding ||
                    (this.StaticFinding != null &&
                    this.StaticFinding.Equals(input.StaticFinding))
                ) && 
                (
                    this.DynamicFinding == input.DynamicFinding ||
                    (this.DynamicFinding != null &&
                    this.DynamicFinding.Equals(input.DynamicFinding))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.ScannerConfidence == input.ScannerConfidence ||
                    (this.ScannerConfidence != null &&
                    this.ScannerConfidence.Equals(input.ScannerConfidence))
                ) && 
                (
                    this.UniqueIdFromTool == input.UniqueIdFromTool ||
                    (this.UniqueIdFromTool != null &&
                    this.UniqueIdFromTool.Equals(input.UniqueIdFromTool))
                ) && 
                (
                    this.VulnIdFromTool == input.VulnIdFromTool ||
                    (this.VulnIdFromTool != null &&
                    this.VulnIdFromTool.Equals(input.VulnIdFromTool))
                ) && 
                (
                    this.SastSourceObject == input.SastSourceObject ||
                    (this.SastSourceObject != null &&
                    this.SastSourceObject.Equals(input.SastSourceObject))
                ) && 
                (
                    this.SastSinkObject == input.SastSinkObject ||
                    (this.SastSinkObject != null &&
                    this.SastSinkObject.Equals(input.SastSinkObject))
                ) && 
                (
                    this.SastSourceLine == input.SastSourceLine ||
                    (this.SastSourceLine != null &&
                    this.SastSourceLine.Equals(input.SastSourceLine))
                ) && 
                (
                    this.SastSourceFilePath == input.SastSourceFilePath ||
                    (this.SastSourceFilePath != null &&
                    this.SastSourceFilePath.Equals(input.SastSourceFilePath))
                ) && 
                (
                    this.NbOccurences == input.NbOccurences ||
                    (this.NbOccurences != null &&
                    this.NbOccurences.Equals(input.NbOccurences))
                ) && 
                (
                    this.PublishDate == input.PublishDate ||
                    (this.PublishDate != null &&
                    this.PublishDate.Equals(input.PublishDate))
                ) && 
                (
                    this.TagsFromDjangoTagging == input.TagsFromDjangoTagging ||
                    (this.TagsFromDjangoTagging != null &&
                    this.TagsFromDjangoTagging.Equals(input.TagsFromDjangoTagging))
                ) && 
                (
                    this.DuplicateFinding == input.DuplicateFinding ||
                    (this.DuplicateFinding != null &&
                    this.DuplicateFinding.Equals(input.DuplicateFinding))
                ) && 
                (
                    this.ReviewRequestedBy == input.ReviewRequestedBy ||
                    (this.ReviewRequestedBy != null &&
                    this.ReviewRequestedBy.Equals(input.ReviewRequestedBy))
                ) && 
                (
                    this.DefectReviewRequestedBy == input.DefectReviewRequestedBy ||
                    (this.DefectReviewRequestedBy != null &&
                    this.DefectReviewRequestedBy.Equals(input.DefectReviewRequestedBy))
                ) && 
                (
                    this.MitigatedBy == input.MitigatedBy ||
                    (this.MitigatedBy != null &&
                    this.MitigatedBy.Equals(input.MitigatedBy))
                ) && 
                (
                    this.Reporter == input.Reporter ||
                    (this.Reporter != null &&
                    this.Reporter.Equals(input.Reporter))
                ) && 
                (
                    this.LastReviewedBy == input.LastReviewedBy ||
                    (this.LastReviewedBy != null &&
                    this.LastReviewedBy.Equals(input.LastReviewedBy))
                ) && 
                (
                    this.SonarqubeIssue == input.SonarqubeIssue ||
                    (this.SonarqubeIssue != null &&
                    this.SonarqubeIssue.Equals(input.SonarqubeIssue))
                ) && 
                (
                    this.Endpoints == input.Endpoints ||
                    this.Endpoints != null &&
                    this.Endpoints.SequenceEqual(input.Endpoints)
                ) && 
                (
                    this.EndpointStatus == input.EndpointStatus ||
                    this.EndpointStatus != null &&
                    this.EndpointStatus.SequenceEqual(input.EndpointStatus)
                ) && 
                (
                    this.Reviewers == input.Reviewers ||
                    this.Reviewers != null &&
                    this.Reviewers.SequenceEqual(input.Reviewers)
                ) && 
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Test != null)
                    hashCode = hashCode * 59 + this.Test.GetHashCode();
                if (this.ThreadId != null)
                    hashCode = hashCode * 59 + this.ThreadId.GetHashCode();
                if (this.FoundBy != null)
                    hashCode = hashCode * 59 + this.FoundBy.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.PushToJira != null)
                    hashCode = hashCode * 59 + this.PushToJira.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.SlaStartDate != null)
                    hashCode = hashCode * 59 + this.SlaStartDate.GetHashCode();
                if (this.Cwe != null)
                    hashCode = hashCode * 59 + this.Cwe.GetHashCode();
                if (this.Cve != null)
                    hashCode = hashCode * 59 + this.Cve.GetHashCode();
                if (this.Cvssv3 != null)
                    hashCode = hashCode * 59 + this.Cvssv3.GetHashCode();
                if (this.Cvssv3Score != null)
                    hashCode = hashCode * 59 + this.Cvssv3Score.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Mitigation != null)
                    hashCode = hashCode * 59 + this.Mitigation.GetHashCode();
                if (this.Impact != null)
                    hashCode = hashCode * 59 + this.Impact.GetHashCode();
                if (this.StepsToReproduce != null)
                    hashCode = hashCode * 59 + this.StepsToReproduce.GetHashCode();
                if (this.SeverityJustification != null)
                    hashCode = hashCode * 59 + this.SeverityJustification.GetHashCode();
                if (this.References != null)
                    hashCode = hashCode * 59 + this.References.GetHashCode();
                if (this.IsTemplate != null)
                    hashCode = hashCode * 59 + this.IsTemplate.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Verified != null)
                    hashCode = hashCode * 59 + this.Verified.GetHashCode();
                if (this.FalseP != null)
                    hashCode = hashCode * 59 + this.FalseP.GetHashCode();
                if (this.Duplicate != null)
                    hashCode = hashCode * 59 + this.Duplicate.GetHashCode();
                if (this.OutOfScope != null)
                    hashCode = hashCode * 59 + this.OutOfScope.GetHashCode();
                if (this.RiskAccepted != null)
                    hashCode = hashCode * 59 + this.RiskAccepted.GetHashCode();
                if (this.UnderReview != null)
                    hashCode = hashCode * 59 + this.UnderReview.GetHashCode();
                if (this.LastStatusUpdate != null)
                    hashCode = hashCode * 59 + this.LastStatusUpdate.GetHashCode();
                if (this.UnderDefectReview != null)
                    hashCode = hashCode * 59 + this.UnderDefectReview.GetHashCode();
                if (this.IsMitigated != null)
                    hashCode = hashCode * 59 + this.IsMitigated.GetHashCode();
                if (this.Mitigated != null)
                    hashCode = hashCode * 59 + this.Mitigated.GetHashCode();
                if (this.NumericalSeverity != null)
                    hashCode = hashCode * 59 + this.NumericalSeverity.GetHashCode();
                if (this.LastReviewed != null)
                    hashCode = hashCode * 59 + this.LastReviewed.GetHashCode();
                if (this.LineNumber != null)
                    hashCode = hashCode * 59 + this.LineNumber.GetHashCode();
                if (this.Sourcefilepath != null)
                    hashCode = hashCode * 59 + this.Sourcefilepath.GetHashCode();
                if (this.Sourcefile != null)
                    hashCode = hashCode * 59 + this.Sourcefile.GetHashCode();
                if (this.Param != null)
                    hashCode = hashCode * 59 + this.Param.GetHashCode();
                if (this.Payload != null)
                    hashCode = hashCode * 59 + this.Payload.GetHashCode();
                if (this.HashCode != null)
                    hashCode = hashCode * 59 + this.HashCode.GetHashCode();
                if (this.Line != null)
                    hashCode = hashCode * 59 + this.Line.GetHashCode();
                if (this.FilePath != null)
                    hashCode = hashCode * 59 + this.FilePath.GetHashCode();
                if (this.ComponentName != null)
                    hashCode = hashCode * 59 + this.ComponentName.GetHashCode();
                if (this.ComponentVersion != null)
                    hashCode = hashCode * 59 + this.ComponentVersion.GetHashCode();
                if (this.StaticFinding != null)
                    hashCode = hashCode * 59 + this.StaticFinding.GetHashCode();
                if (this.DynamicFinding != null)
                    hashCode = hashCode * 59 + this.DynamicFinding.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.ScannerConfidence != null)
                    hashCode = hashCode * 59 + this.ScannerConfidence.GetHashCode();
                if (this.UniqueIdFromTool != null)
                    hashCode = hashCode * 59 + this.UniqueIdFromTool.GetHashCode();
                if (this.VulnIdFromTool != null)
                    hashCode = hashCode * 59 + this.VulnIdFromTool.GetHashCode();
                if (this.SastSourceObject != null)
                    hashCode = hashCode * 59 + this.SastSourceObject.GetHashCode();
                if (this.SastSinkObject != null)
                    hashCode = hashCode * 59 + this.SastSinkObject.GetHashCode();
                if (this.SastSourceLine != null)
                    hashCode = hashCode * 59 + this.SastSourceLine.GetHashCode();
                if (this.SastSourceFilePath != null)
                    hashCode = hashCode * 59 + this.SastSourceFilePath.GetHashCode();
                if (this.NbOccurences != null)
                    hashCode = hashCode * 59 + this.NbOccurences.GetHashCode();
                if (this.PublishDate != null)
                    hashCode = hashCode * 59 + this.PublishDate.GetHashCode();
                if (this.TagsFromDjangoTagging != null)
                    hashCode = hashCode * 59 + this.TagsFromDjangoTagging.GetHashCode();
                if (this.DuplicateFinding != null)
                    hashCode = hashCode * 59 + this.DuplicateFinding.GetHashCode();
                if (this.ReviewRequestedBy != null)
                    hashCode = hashCode * 59 + this.ReviewRequestedBy.GetHashCode();
                if (this.DefectReviewRequestedBy != null)
                    hashCode = hashCode * 59 + this.DefectReviewRequestedBy.GetHashCode();
                if (this.MitigatedBy != null)
                    hashCode = hashCode * 59 + this.MitigatedBy.GetHashCode();
                if (this.Reporter != null)
                    hashCode = hashCode * 59 + this.Reporter.GetHashCode();
                if (this.LastReviewedBy != null)
                    hashCode = hashCode * 59 + this.LastReviewedBy.GetHashCode();
                if (this.SonarqubeIssue != null)
                    hashCode = hashCode * 59 + this.SonarqubeIssue.GetHashCode();
                if (this.Endpoints != null)
                    hashCode = hashCode * 59 + this.Endpoints.GetHashCode();
                if (this.EndpointStatus != null)
                    hashCode = hashCode * 59 + this.EndpointStatus.GetHashCode();
                if (this.Reviewers != null)
                    hashCode = hashCode * 59 + this.Reviewers.GetHashCode();
                if (this.Files != null)
                    hashCode = hashCode * 59 + this.Files.GetHashCode();
                return hashCode;
            }
        }
    }

}
