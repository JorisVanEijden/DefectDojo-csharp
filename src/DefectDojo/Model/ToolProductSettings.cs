/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// ToolProductSettings
    /// </summary>
    [DataContract]
    public partial class ToolProductSettings :  IEquatable<ToolProductSettings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolProductSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolProductSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolProductSettings" /> class.
        /// </summary>
        /// <param name="settingUrl">settingUrl (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="url">url.</param>
        /// <param name="toolProjectId">toolProjectId.</param>
        /// <param name="toolConfiguration">toolConfiguration (required).</param>
        public ToolProductSettings(string settingUrl = default(string), string name = default(string), string description = default(string), string url = default(string), string toolProjectId = default(string), int? toolConfiguration = default(int?))
        {
            // to ensure "settingUrl" is required (not null)
            if (settingUrl == null)
            {
                throw new InvalidDataException("settingUrl is a required property for ToolProductSettings and cannot be null");
            }
            else
            {
                this.SettingUrl = settingUrl;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ToolProductSettings and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "toolConfiguration" is required (not null)
            if (toolConfiguration == null)
            {
                throw new InvalidDataException("toolConfiguration is a required property for ToolProductSettings and cannot be null");
            }
            else
            {
                this.ToolConfiguration = toolConfiguration;
            }
            this.Description = description;
            this.Url = url;
            this.ToolProjectId = toolProjectId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets SettingUrl
        /// </summary>
        [DataMember(Name="setting_url", EmitDefaultValue=false)]
        public string SettingUrl { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets ToolProjectId
        /// </summary>
        [DataMember(Name="tool_project_id", EmitDefaultValue=false)]
        public string ToolProjectId { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public int? Product { get; private set; }

        /// <summary>
        /// Gets or Sets ToolConfiguration
        /// </summary>
        [DataMember(Name="tool_configuration", EmitDefaultValue=false)]
        public int? ToolConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<int?> Notes { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ToolProductSettings {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SettingUrl: ").Append(SettingUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ToolProjectId: ").Append(ToolProjectId).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  ToolConfiguration: ").Append(ToolConfiguration).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ToolProductSettings);
        }

        /// <summary>
        /// Returns true if ToolProductSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of ToolProductSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ToolProductSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SettingUrl == input.SettingUrl ||
                    (this.SettingUrl != null &&
                    this.SettingUrl.Equals(input.SettingUrl))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.ToolProjectId == input.ToolProjectId ||
                    (this.ToolProjectId != null &&
                    this.ToolProjectId.Equals(input.ToolProjectId))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.ToolConfiguration == input.ToolConfiguration ||
                    (this.ToolConfiguration != null &&
                    this.ToolConfiguration.Equals(input.ToolConfiguration))
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SettingUrl != null)
                    hashCode = hashCode * 59 + this.SettingUrl.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.ToolProjectId != null)
                    hashCode = hashCode * 59 + this.ToolProjectId.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.ToolConfiguration != null)
                    hashCode = hashCode * 59 + this.ToolConfiguration.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                return hashCode;
            }
        }
    }

}
