/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// Product
    /// </summary>
    [DataContract]
    public partial class Product :  IEquatable<Product>
    {
        /// <summary>
        /// Defines BusinessCriticality
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BusinessCriticalityEnum
        {
            
            /// <summary>
            /// Enum Veryhigh for value: very high
            /// </summary>
            [EnumMember(Value = "very high")]
            Veryhigh = 1,
            
            /// <summary>
            /// Enum High for value: high
            /// </summary>
            [EnumMember(Value = "high")]
            High = 2,
            
            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            [EnumMember(Value = "medium")]
            Medium = 3,
            
            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 4,
            
            /// <summary>
            /// Enum Verylow for value: very low
            /// </summary>
            [EnumMember(Value = "very low")]
            Verylow = 5,
            
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 6
        }

        /// <summary>
        /// Gets or Sets BusinessCriticality
        /// </summary>
        [DataMember(Name="business_criticality", EmitDefaultValue=false)]
        public BusinessCriticalityEnum? BusinessCriticality { get; set; }
        /// <summary>
        /// Defines Platform
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PlatformEnum
        {
            
            /// <summary>
            /// Enum Webservice for value: web service
            /// </summary>
            [EnumMember(Value = "web service")]
            Webservice = 1,
            
            /// <summary>
            /// Enum Desktop for value: desktop
            /// </summary>
            [EnumMember(Value = "desktop")]
            Desktop = 2,
            
            /// <summary>
            /// Enum Iot for value: iot
            /// </summary>
            [EnumMember(Value = "iot")]
            Iot = 3,
            
            /// <summary>
            /// Enum Mobile for value: mobile
            /// </summary>
            [EnumMember(Value = "mobile")]
            Mobile = 4,
            
            /// <summary>
            /// Enum Web for value: web
            /// </summary>
            [EnumMember(Value = "web")]
            Web = 5
        }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name="platform", EmitDefaultValue=false)]
        public PlatformEnum? Platform { get; set; }
        /// <summary>
        /// Defines Lifecycle
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LifecycleEnum
        {
            
            /// <summary>
            /// Enum Construction for value: construction
            /// </summary>
            [EnumMember(Value = "construction")]
            Construction = 1,
            
            /// <summary>
            /// Enum Production for value: production
            /// </summary>
            [EnumMember(Value = "production")]
            Production = 2,
            
            /// <summary>
            /// Enum Retirement for value: retirement
            /// </summary>
            [EnumMember(Value = "retirement")]
            Retirement = 3
        }

        /// <summary>
        /// Gets or Sets Lifecycle
        /// </summary>
        [DataMember(Name="lifecycle", EmitDefaultValue=false)]
        public LifecycleEnum? Lifecycle { get; set; }
        /// <summary>
        /// Defines Origin
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OriginEnum
        {
            
            /// <summary>
            /// Enum Thirdpartylibrary for value: third party library
            /// </summary>
            [EnumMember(Value = "third party library")]
            Thirdpartylibrary = 1,
            
            /// <summary>
            /// Enum Purchased for value: purchased
            /// </summary>
            [EnumMember(Value = "purchased")]
            Purchased = 2,
            
            /// <summary>
            /// Enum Contractor for value: contractor
            /// </summary>
            [EnumMember(Value = "contractor")]
            Contractor = 3,
            
            /// <summary>
            /// Enum Internal for value: internal
            /// </summary>
            [EnumMember(Value = "internal")]
            Internal = 4,
            
            /// <summary>
            /// Enum Opensource for value: open source
            /// </summary>
            [EnumMember(Value = "open source")]
            Opensource = 5,
            
            /// <summary>
            /// Enum Outsourced for value: outsourced
            /// </summary>
            [EnumMember(Value = "outsourced")]
            Outsourced = 6
        }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public OriginEnum? Origin { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Product() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="tags">tags.</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="prodNumericGrade">prodNumericGrade.</param>
        /// <param name="businessCriticality">businessCriticality.</param>
        /// <param name="platform">platform.</param>
        /// <param name="lifecycle">lifecycle.</param>
        /// <param name="origin">origin.</param>
        /// <param name="userRecords">Estimate the number of user records within the application..</param>
        /// <param name="revenue">Estimate the application&#39;s revenue..</param>
        /// <param name="externalAudience">Specify if the application is used by people outside the organization..</param>
        /// <param name="internetAccessible">Specify if the application is accessible from the public internet..</param>
        /// <param name="enableSimpleRiskAcceptance">Allows simple risk acceptance by checking/unchecking a checkbox..</param>
        /// <param name="enableFullRiskAcceptance">Allows full risk acceptanc using a risk acceptance form, expiration date, uploaded proof, etc..</param>
        /// <param name="productManager">productManager.</param>
        /// <param name="technicalContact">technicalContact.</param>
        /// <param name="teamManager">teamManager.</param>
        /// <param name="prodType">prodType (required).</param>
        /// <param name="authorizedUsers">authorizedUsers.</param>
        /// <param name="regulations">regulations.</param>
        public Product(List<string> tags = default(List<string>), string name = default(string), string description = default(string), int? prodNumericGrade = default(int?), BusinessCriticalityEnum? businessCriticality = default(BusinessCriticalityEnum?), PlatformEnum? platform = default(PlatformEnum?), LifecycleEnum? lifecycle = default(LifecycleEnum?), OriginEnum? origin = default(OriginEnum?), int? userRecords = default(int?), string revenue = default(string), bool? externalAudience = default(bool?), bool? internetAccessible = default(bool?), bool? enableSimpleRiskAcceptance = default(bool?), bool? enableFullRiskAcceptance = default(bool?), int? productManager = default(int?), int? technicalContact = default(int?), int? teamManager = default(int?), int? prodType = default(int?), List<int?> authorizedUsers = default(List<int?>), List<int?> regulations = default(List<int?>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Product and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for Product and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            // to ensure "prodType" is required (not null)
            if (prodType == null)
            {
                throw new InvalidDataException("prodType is a required property for Product and cannot be null");
            }
            else
            {
                this.ProdType = prodType;
            }
            this.Tags = tags;
            this.ProdNumericGrade = prodNumericGrade;
            this.BusinessCriticality = businessCriticality;
            this.Platform = platform;
            this.Lifecycle = lifecycle;
            this.Origin = origin;
            this.UserRecords = userRecords;
            this.Revenue = revenue;
            this.ExternalAudience = externalAudience;
            this.InternetAccessible = internetAccessible;
            this.EnableSimpleRiskAcceptance = enableSimpleRiskAcceptance;
            this.EnableFullRiskAcceptance = enableFullRiskAcceptance;
            this.ProductManager = productManager;
            this.TechnicalContact = technicalContact;
            this.TeamManager = teamManager;
            this.AuthorizedUsers = authorizedUsers;
            this.Regulations = regulations;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets FindingsCount
        /// </summary>
        [DataMember(Name="findings_count", EmitDefaultValue=false)]
        public string FindingsCount { get; private set; }

        /// <summary>
        /// Gets or Sets FindingsList
        /// </summary>
        [DataMember(Name="findings_list", EmitDefaultValue=false)]
        public string FindingsList { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets ProductMeta
        /// </summary>
        [DataMember(Name="product_meta", EmitDefaultValue=false)]
        public List<ProductMeta> ProductMeta { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }

        /// <summary>
        /// Gets or Sets ProdNumericGrade
        /// </summary>
        [DataMember(Name="prod_numeric_grade", EmitDefaultValue=false)]
        public int? ProdNumericGrade { get; set; }





        /// <summary>
        /// Estimate the number of user records within the application.
        /// </summary>
        /// <value>Estimate the number of user records within the application.</value>
        [DataMember(Name="user_records", EmitDefaultValue=false)]
        public int? UserRecords { get; set; }

        /// <summary>
        /// Estimate the application&#39;s revenue.
        /// </summary>
        /// <value>Estimate the application&#39;s revenue.</value>
        [DataMember(Name="revenue", EmitDefaultValue=false)]
        public string Revenue { get; set; }

        /// <summary>
        /// Specify if the application is used by people outside the organization.
        /// </summary>
        /// <value>Specify if the application is used by people outside the organization.</value>
        [DataMember(Name="external_audience", EmitDefaultValue=false)]
        public bool? ExternalAudience { get; set; }

        /// <summary>
        /// Specify if the application is accessible from the public internet.
        /// </summary>
        /// <value>Specify if the application is accessible from the public internet.</value>
        [DataMember(Name="internet_accessible", EmitDefaultValue=false)]
        public bool? InternetAccessible { get; set; }

        /// <summary>
        /// Temporary archive with tags from the previous tagging library we used
        /// </summary>
        /// <value>Temporary archive with tags from the previous tagging library we used</value>
        [DataMember(Name="tags_from_django_tagging", EmitDefaultValue=false)]
        public string TagsFromDjangoTagging { get; private set; }

        /// <summary>
        /// Allows simple risk acceptance by checking/unchecking a checkbox.
        /// </summary>
        /// <value>Allows simple risk acceptance by checking/unchecking a checkbox.</value>
        [DataMember(Name="enable_simple_risk_acceptance", EmitDefaultValue=false)]
        public bool? EnableSimpleRiskAcceptance { get; set; }

        /// <summary>
        /// Allows full risk acceptanc using a risk acceptance form, expiration date, uploaded proof, etc.
        /// </summary>
        /// <value>Allows full risk acceptanc using a risk acceptance form, expiration date, uploaded proof, etc.</value>
        [DataMember(Name="enable_full_risk_acceptance", EmitDefaultValue=false)]
        public bool? EnableFullRiskAcceptance { get; set; }

        /// <summary>
        /// Gets or Sets ProductManager
        /// </summary>
        [DataMember(Name="product_manager", EmitDefaultValue=false)]
        public int? ProductManager { get; set; }

        /// <summary>
        /// Gets or Sets TechnicalContact
        /// </summary>
        [DataMember(Name="technical_contact", EmitDefaultValue=false)]
        public int? TechnicalContact { get; set; }

        /// <summary>
        /// Gets or Sets TeamManager
        /// </summary>
        [DataMember(Name="team_manager", EmitDefaultValue=false)]
        public int? TeamManager { get; set; }

        /// <summary>
        /// Gets or Sets ProdType
        /// </summary>
        [DataMember(Name="prod_type", EmitDefaultValue=false)]
        public int? ProdType { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizedUsers
        /// </summary>
        [DataMember(Name="authorized_users", EmitDefaultValue=false)]
        public List<int?> AuthorizedUsers { get; set; }

        /// <summary>
        /// Gets or Sets Regulations
        /// </summary>
        [DataMember(Name="regulations", EmitDefaultValue=false)]
        public List<int?> Regulations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FindingsCount: ").Append(FindingsCount).Append("\n");
            sb.Append("  FindingsList: ").Append(FindingsList).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  ProductMeta: ").Append(ProductMeta).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  ProdNumericGrade: ").Append(ProdNumericGrade).Append("\n");
            sb.Append("  BusinessCriticality: ").Append(BusinessCriticality).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Lifecycle: ").Append(Lifecycle).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  UserRecords: ").Append(UserRecords).Append("\n");
            sb.Append("  Revenue: ").Append(Revenue).Append("\n");
            sb.Append("  ExternalAudience: ").Append(ExternalAudience).Append("\n");
            sb.Append("  InternetAccessible: ").Append(InternetAccessible).Append("\n");
            sb.Append("  TagsFromDjangoTagging: ").Append(TagsFromDjangoTagging).Append("\n");
            sb.Append("  EnableSimpleRiskAcceptance: ").Append(EnableSimpleRiskAcceptance).Append("\n");
            sb.Append("  EnableFullRiskAcceptance: ").Append(EnableFullRiskAcceptance).Append("\n");
            sb.Append("  ProductManager: ").Append(ProductManager).Append("\n");
            sb.Append("  TechnicalContact: ").Append(TechnicalContact).Append("\n");
            sb.Append("  TeamManager: ").Append(TeamManager).Append("\n");
            sb.Append("  ProdType: ").Append(ProdType).Append("\n");
            sb.Append("  AuthorizedUsers: ").Append(AuthorizedUsers).Append("\n");
            sb.Append("  Regulations: ").Append(Regulations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FindingsCount == input.FindingsCount ||
                    (this.FindingsCount != null &&
                    this.FindingsCount.Equals(input.FindingsCount))
                ) && 
                (
                    this.FindingsList == input.FindingsList ||
                    (this.FindingsList != null &&
                    this.FindingsList.Equals(input.FindingsList))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.ProductMeta == input.ProductMeta ||
                    this.ProductMeta != null &&
                    this.ProductMeta.SequenceEqual(input.ProductMeta)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.ProdNumericGrade == input.ProdNumericGrade ||
                    (this.ProdNumericGrade != null &&
                    this.ProdNumericGrade.Equals(input.ProdNumericGrade))
                ) && 
                (
                    this.BusinessCriticality == input.BusinessCriticality ||
                    (this.BusinessCriticality != null &&
                    this.BusinessCriticality.Equals(input.BusinessCriticality))
                ) && 
                (
                    this.Platform == input.Platform ||
                    (this.Platform != null &&
                    this.Platform.Equals(input.Platform))
                ) && 
                (
                    this.Lifecycle == input.Lifecycle ||
                    (this.Lifecycle != null &&
                    this.Lifecycle.Equals(input.Lifecycle))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.UserRecords == input.UserRecords ||
                    (this.UserRecords != null &&
                    this.UserRecords.Equals(input.UserRecords))
                ) && 
                (
                    this.Revenue == input.Revenue ||
                    (this.Revenue != null &&
                    this.Revenue.Equals(input.Revenue))
                ) && 
                (
                    this.ExternalAudience == input.ExternalAudience ||
                    (this.ExternalAudience != null &&
                    this.ExternalAudience.Equals(input.ExternalAudience))
                ) && 
                (
                    this.InternetAccessible == input.InternetAccessible ||
                    (this.InternetAccessible != null &&
                    this.InternetAccessible.Equals(input.InternetAccessible))
                ) && 
                (
                    this.TagsFromDjangoTagging == input.TagsFromDjangoTagging ||
                    (this.TagsFromDjangoTagging != null &&
                    this.TagsFromDjangoTagging.Equals(input.TagsFromDjangoTagging))
                ) && 
                (
                    this.EnableSimpleRiskAcceptance == input.EnableSimpleRiskAcceptance ||
                    (this.EnableSimpleRiskAcceptance != null &&
                    this.EnableSimpleRiskAcceptance.Equals(input.EnableSimpleRiskAcceptance))
                ) && 
                (
                    this.EnableFullRiskAcceptance == input.EnableFullRiskAcceptance ||
                    (this.EnableFullRiskAcceptance != null &&
                    this.EnableFullRiskAcceptance.Equals(input.EnableFullRiskAcceptance))
                ) && 
                (
                    this.ProductManager == input.ProductManager ||
                    (this.ProductManager != null &&
                    this.ProductManager.Equals(input.ProductManager))
                ) && 
                (
                    this.TechnicalContact == input.TechnicalContact ||
                    (this.TechnicalContact != null &&
                    this.TechnicalContact.Equals(input.TechnicalContact))
                ) && 
                (
                    this.TeamManager == input.TeamManager ||
                    (this.TeamManager != null &&
                    this.TeamManager.Equals(input.TeamManager))
                ) && 
                (
                    this.ProdType == input.ProdType ||
                    (this.ProdType != null &&
                    this.ProdType.Equals(input.ProdType))
                ) && 
                (
                    this.AuthorizedUsers == input.AuthorizedUsers ||
                    this.AuthorizedUsers != null &&
                    this.AuthorizedUsers.SequenceEqual(input.AuthorizedUsers)
                ) && 
                (
                    this.Regulations == input.Regulations ||
                    this.Regulations != null &&
                    this.Regulations.SequenceEqual(input.Regulations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FindingsCount != null)
                    hashCode = hashCode * 59 + this.FindingsCount.GetHashCode();
                if (this.FindingsList != null)
                    hashCode = hashCode * 59 + this.FindingsList.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.ProductMeta != null)
                    hashCode = hashCode * 59 + this.ProductMeta.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.ProdNumericGrade != null)
                    hashCode = hashCode * 59 + this.ProdNumericGrade.GetHashCode();
                if (this.BusinessCriticality != null)
                    hashCode = hashCode * 59 + this.BusinessCriticality.GetHashCode();
                if (this.Platform != null)
                    hashCode = hashCode * 59 + this.Platform.GetHashCode();
                if (this.Lifecycle != null)
                    hashCode = hashCode * 59 + this.Lifecycle.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.UserRecords != null)
                    hashCode = hashCode * 59 + this.UserRecords.GetHashCode();
                if (this.Revenue != null)
                    hashCode = hashCode * 59 + this.Revenue.GetHashCode();
                if (this.ExternalAudience != null)
                    hashCode = hashCode * 59 + this.ExternalAudience.GetHashCode();
                if (this.InternetAccessible != null)
                    hashCode = hashCode * 59 + this.InternetAccessible.GetHashCode();
                if (this.TagsFromDjangoTagging != null)
                    hashCode = hashCode * 59 + this.TagsFromDjangoTagging.GetHashCode();
                if (this.EnableSimpleRiskAcceptance != null)
                    hashCode = hashCode * 59 + this.EnableSimpleRiskAcceptance.GetHashCode();
                if (this.EnableFullRiskAcceptance != null)
                    hashCode = hashCode * 59 + this.EnableFullRiskAcceptance.GetHashCode();
                if (this.ProductManager != null)
                    hashCode = hashCode * 59 + this.ProductManager.GetHashCode();
                if (this.TechnicalContact != null)
                    hashCode = hashCode * 59 + this.TechnicalContact.GetHashCode();
                if (this.TeamManager != null)
                    hashCode = hashCode * 59 + this.TeamManager.GetHashCode();
                if (this.ProdType != null)
                    hashCode = hashCode * 59 + this.ProdType.GetHashCode();
                if (this.AuthorizedUsers != null)
                    hashCode = hashCode * 59 + this.AuthorizedUsers.GetHashCode();
                if (this.Regulations != null)
                    hashCode = hashCode * 59 + this.Regulations.GetHashCode();
                return hashCode;
            }
        }
    }

}
