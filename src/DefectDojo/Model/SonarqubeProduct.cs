/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// SonarqubeProduct
    /// </summary>
    [DataContract]
    public partial class SonarqubeProduct :  IEquatable<SonarqubeProduct>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SonarqubeProduct" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SonarqubeProduct() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SonarqubeProduct" /> class.
        /// </summary>
        /// <param name="sonarqubeProjectKey">sonarqubeProjectKey.</param>
        /// <param name="product">product (required).</param>
        /// <param name="sonarqubeToolConfig">sonarqubeToolConfig.</param>
        public SonarqubeProduct(string sonarqubeProjectKey = default(string), int? product = default(int?), int? sonarqubeToolConfig = default(int?))
        {
            // to ensure "product" is required (not null)
            if (product == null)
            {
                throw new InvalidDataException("product is a required property for SonarqubeProduct and cannot be null");
            }
            else
            {
                this.Product = product;
            }
            this.SonarqubeProjectKey = sonarqubeProjectKey;
            this.SonarqubeToolConfig = sonarqubeToolConfig;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets SonarqubeProjectKey
        /// </summary>
        [DataMember(Name="sonarqube_project_key", EmitDefaultValue=false)]
        public string SonarqubeProjectKey { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public int? Product { get; set; }

        /// <summary>
        /// Gets or Sets SonarqubeToolConfig
        /// </summary>
        [DataMember(Name="sonarqube_tool_config", EmitDefaultValue=false)]
        public int? SonarqubeToolConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SonarqubeProduct {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SonarqubeProjectKey: ").Append(SonarqubeProjectKey).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  SonarqubeToolConfig: ").Append(SonarqubeToolConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SonarqubeProduct);
        }

        /// <summary>
        /// Returns true if SonarqubeProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of SonarqubeProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SonarqubeProduct input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SonarqubeProjectKey == input.SonarqubeProjectKey ||
                    (this.SonarqubeProjectKey != null &&
                    this.SonarqubeProjectKey.Equals(input.SonarqubeProjectKey))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.SonarqubeToolConfig == input.SonarqubeToolConfig ||
                    (this.SonarqubeToolConfig != null &&
                    this.SonarqubeToolConfig.Equals(input.SonarqubeToolConfig))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SonarqubeProjectKey != null)
                    hashCode = hashCode * 59 + this.SonarqubeProjectKey.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.SonarqubeToolConfig != null)
                    hashCode = hashCode * 59 + this.SonarqubeToolConfig.GetHashCode();
                return hashCode;
            }
        }
    }

}
