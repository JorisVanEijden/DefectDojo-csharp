/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// SonarqubeIssueTransition
    /// </summary>
    [DataContract]
    public partial class SonarqubeIssueTransition :  IEquatable<SonarqubeIssueTransition>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SonarqubeIssueTransition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SonarqubeIssueTransition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SonarqubeIssueTransition" /> class.
        /// </summary>
        /// <param name="findingStatus">findingStatus (required).</param>
        /// <param name="sonarqubeStatus">sonarqubeStatus (required).</param>
        /// <param name="transitions">transitions (required).</param>
        /// <param name="sonarqubeIssue">sonarqubeIssue (required).</param>
        public SonarqubeIssueTransition(string findingStatus = default(string), string sonarqubeStatus = default(string), string transitions = default(string), int? sonarqubeIssue = default(int?))
        {
            // to ensure "findingStatus" is required (not null)
            if (findingStatus == null)
            {
                throw new InvalidDataException("findingStatus is a required property for SonarqubeIssueTransition and cannot be null");
            }
            else
            {
                this.FindingStatus = findingStatus;
            }
            // to ensure "sonarqubeStatus" is required (not null)
            if (sonarqubeStatus == null)
            {
                throw new InvalidDataException("sonarqubeStatus is a required property for SonarqubeIssueTransition and cannot be null");
            }
            else
            {
                this.SonarqubeStatus = sonarqubeStatus;
            }
            // to ensure "transitions" is required (not null)
            if (transitions == null)
            {
                throw new InvalidDataException("transitions is a required property for SonarqubeIssueTransition and cannot be null");
            }
            else
            {
                this.Transitions = transitions;
            }
            // to ensure "sonarqubeIssue" is required (not null)
            if (sonarqubeIssue == null)
            {
                throw new InvalidDataException("sonarqubeIssue is a required property for SonarqubeIssueTransition and cannot be null");
            }
            else
            {
                this.SonarqubeIssue = sonarqubeIssue;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; private set; }

        /// <summary>
        /// Gets or Sets FindingStatus
        /// </summary>
        [DataMember(Name="finding_status", EmitDefaultValue=false)]
        public string FindingStatus { get; set; }

        /// <summary>
        /// Gets or Sets SonarqubeStatus
        /// </summary>
        [DataMember(Name="sonarqube_status", EmitDefaultValue=false)]
        public string SonarqubeStatus { get; set; }

        /// <summary>
        /// Gets or Sets Transitions
        /// </summary>
        [DataMember(Name="transitions", EmitDefaultValue=false)]
        public string Transitions { get; set; }

        /// <summary>
        /// Gets or Sets SonarqubeIssue
        /// </summary>
        [DataMember(Name="sonarqube_issue", EmitDefaultValue=false)]
        public int? SonarqubeIssue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SonarqubeIssueTransition {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  FindingStatus: ").Append(FindingStatus).Append("\n");
            sb.Append("  SonarqubeStatus: ").Append(SonarqubeStatus).Append("\n");
            sb.Append("  Transitions: ").Append(Transitions).Append("\n");
            sb.Append("  SonarqubeIssue: ").Append(SonarqubeIssue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SonarqubeIssueTransition);
        }

        /// <summary>
        /// Returns true if SonarqubeIssueTransition instances are equal
        /// </summary>
        /// <param name="input">Instance of SonarqubeIssueTransition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SonarqubeIssueTransition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.FindingStatus == input.FindingStatus ||
                    (this.FindingStatus != null &&
                    this.FindingStatus.Equals(input.FindingStatus))
                ) && 
                (
                    this.SonarqubeStatus == input.SonarqubeStatus ||
                    (this.SonarqubeStatus != null &&
                    this.SonarqubeStatus.Equals(input.SonarqubeStatus))
                ) && 
                (
                    this.Transitions == input.Transitions ||
                    (this.Transitions != null &&
                    this.Transitions.Equals(input.Transitions))
                ) && 
                (
                    this.SonarqubeIssue == input.SonarqubeIssue ||
                    (this.SonarqubeIssue != null &&
                    this.SonarqubeIssue.Equals(input.SonarqubeIssue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.FindingStatus != null)
                    hashCode = hashCode * 59 + this.FindingStatus.GetHashCode();
                if (this.SonarqubeStatus != null)
                    hashCode = hashCode * 59 + this.SonarqubeStatus.GetHashCode();
                if (this.Transitions != null)
                    hashCode = hashCode * 59 + this.Transitions.GetHashCode();
                if (this.SonarqubeIssue != null)
                    hashCode = hashCode * 59 + this.SonarqubeIssue.GetHashCode();
                return hashCode;
            }
        }
    }

}
