/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// ReportGenerate
    /// </summary>
    [DataContract]
    public partial class ReportGenerate :  IEquatable<ReportGenerate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportGenerate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportGenerate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportGenerate" /> class.
        /// </summary>
        /// <param name="executiveSummary">executiveSummary (required).</param>
        /// <param name="productType">productType.</param>
        /// <param name="product">product.</param>
        /// <param name="engagement">engagement.</param>
        /// <param name="reportName">reportName (required).</param>
        /// <param name="reportInfo">reportInfo (required).</param>
        /// <param name="test">test.</param>
        /// <param name="endpoint">endpoint.</param>
        /// <param name="user">user.</param>
        /// <param name="teamName">teamName (required).</param>
        /// <param name="title">title (required).</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="host">host (required).</param>
        /// <param name="findingImages">findingImages.</param>
        /// <param name="findingNotes">findingNotes.</param>
        public ReportGenerate(ExecutiveSummary executiveSummary = default(ExecutiveSummary), ProductType productType = default(ProductType), Product product = default(Product), Engagement engagement = default(Engagement), string reportName = default(string), string reportInfo = default(string), Test test = default(Test), Endpoint endpoint = default(Endpoint), UserStub user = default(UserStub), string teamName = default(string), string title = default(string), int? userId = default(int?), string host = default(string), List<FindingToFindingImages> findingImages = default(List<FindingToFindingImages>), List<FindingToNotes> findingNotes = default(List<FindingToNotes>))
        {
            // to ensure "executiveSummary" is required (not null)
            if (executiveSummary == null)
            {
                throw new InvalidDataException("executiveSummary is a required property for ReportGenerate and cannot be null");
            }
            else
            {
                this.ExecutiveSummary = executiveSummary;
            }
            // to ensure "reportName" is required (not null)
            if (reportName == null)
            {
                throw new InvalidDataException("reportName is a required property for ReportGenerate and cannot be null");
            }
            else
            {
                this.ReportName = reportName;
            }
            // to ensure "reportInfo" is required (not null)
            if (reportInfo == null)
            {
                throw new InvalidDataException("reportInfo is a required property for ReportGenerate and cannot be null");
            }
            else
            {
                this.ReportInfo = reportInfo;
            }
            // to ensure "teamName" is required (not null)
            if (teamName == null)
            {
                throw new InvalidDataException("teamName is a required property for ReportGenerate and cannot be null");
            }
            else
            {
                this.TeamName = teamName;
            }
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for ReportGenerate and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for ReportGenerate and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }
            // to ensure "host" is required (not null)
            if (host == null)
            {
                throw new InvalidDataException("host is a required property for ReportGenerate and cannot be null");
            }
            else
            {
                this.Host = host;
            }
            this.ProductType = productType;
            this.Product = product;
            this.Engagement = engagement;
            this.Test = test;
            this.Endpoint = endpoint;
            this.User = user;
            this.FindingImages = findingImages;
            this.FindingNotes = findingNotes;
        }
        
        /// <summary>
        /// Gets or Sets ExecutiveSummary
        /// </summary>
        [DataMember(Name="executive_summary", EmitDefaultValue=false)]
        public ExecutiveSummary ExecutiveSummary { get; set; }

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [DataMember(Name="product_type", EmitDefaultValue=false)]
        public ProductType ProductType { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public Product Product { get; set; }

        /// <summary>
        /// Gets or Sets Engagement
        /// </summary>
        [DataMember(Name="engagement", EmitDefaultValue=false)]
        public Engagement Engagement { get; set; }

        /// <summary>
        /// Gets or Sets ReportName
        /// </summary>
        [DataMember(Name="report_name", EmitDefaultValue=false)]
        public string ReportName { get; set; }

        /// <summary>
        /// Gets or Sets ReportInfo
        /// </summary>
        [DataMember(Name="report_info", EmitDefaultValue=false)]
        public string ReportInfo { get; set; }

        /// <summary>
        /// Gets or Sets Test
        /// </summary>
        [DataMember(Name="test", EmitDefaultValue=false)]
        public Test Test { get; set; }

        /// <summary>
        /// Gets or Sets Endpoint
        /// </summary>
        [DataMember(Name="endpoint", EmitDefaultValue=false)]
        public Endpoint Endpoint { get; set; }

        /// <summary>
        /// Gets or Sets Endpoints
        /// </summary>
        [DataMember(Name="endpoints", EmitDefaultValue=false)]
        public List<Endpoint> Endpoints { get; private set; }

        /// <summary>
        /// Gets or Sets Findings
        /// </summary>
        [DataMember(Name="findings", EmitDefaultValue=false)]
        public List<Finding> Findings { get; private set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserStub User { get; set; }

        /// <summary>
        /// Gets or Sets TeamName
        /// </summary>
        [DataMember(Name="team_name", EmitDefaultValue=false)]
        public string TeamName { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets FindingImages
        /// </summary>
        [DataMember(Name="finding_images", EmitDefaultValue=false)]
        public List<FindingToFindingImages> FindingImages { get; set; }

        /// <summary>
        /// Gets or Sets FindingNotes
        /// </summary>
        [DataMember(Name="finding_notes", EmitDefaultValue=false)]
        public List<FindingToNotes> FindingNotes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportGenerate {\n");
            sb.Append("  ExecutiveSummary: ").Append(ExecutiveSummary).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Engagement: ").Append(Engagement).Append("\n");
            sb.Append("  ReportName: ").Append(ReportName).Append("\n");
            sb.Append("  ReportInfo: ").Append(ReportInfo).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  Endpoints: ").Append(Endpoints).Append("\n");
            sb.Append("  Findings: ").Append(Findings).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  TeamName: ").Append(TeamName).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  FindingImages: ").Append(FindingImages).Append("\n");
            sb.Append("  FindingNotes: ").Append(FindingNotes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportGenerate);
        }

        /// <summary>
        /// Returns true if ReportGenerate instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportGenerate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportGenerate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExecutiveSummary == input.ExecutiveSummary ||
                    (this.ExecutiveSummary != null &&
                    this.ExecutiveSummary.Equals(input.ExecutiveSummary))
                ) && 
                (
                    this.ProductType == input.ProductType ||
                    (this.ProductType != null &&
                    this.ProductType.Equals(input.ProductType))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Engagement == input.Engagement ||
                    (this.Engagement != null &&
                    this.Engagement.Equals(input.Engagement))
                ) && 
                (
                    this.ReportName == input.ReportName ||
                    (this.ReportName != null &&
                    this.ReportName.Equals(input.ReportName))
                ) && 
                (
                    this.ReportInfo == input.ReportInfo ||
                    (this.ReportInfo != null &&
                    this.ReportInfo.Equals(input.ReportInfo))
                ) && 
                (
                    this.Test == input.Test ||
                    (this.Test != null &&
                    this.Test.Equals(input.Test))
                ) && 
                (
                    this.Endpoint == input.Endpoint ||
                    (this.Endpoint != null &&
                    this.Endpoint.Equals(input.Endpoint))
                ) && 
                (
                    this.Endpoints == input.Endpoints ||
                    this.Endpoints != null &&
                    this.Endpoints.SequenceEqual(input.Endpoints)
                ) && 
                (
                    this.Findings == input.Findings ||
                    this.Findings != null &&
                    this.Findings.SequenceEqual(input.Findings)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.TeamName == input.TeamName ||
                    (this.TeamName != null &&
                    this.TeamName.Equals(input.TeamName))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.FindingImages == input.FindingImages ||
                    this.FindingImages != null &&
                    this.FindingImages.SequenceEqual(input.FindingImages)
                ) && 
                (
                    this.FindingNotes == input.FindingNotes ||
                    this.FindingNotes != null &&
                    this.FindingNotes.SequenceEqual(input.FindingNotes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExecutiveSummary != null)
                    hashCode = hashCode * 59 + this.ExecutiveSummary.GetHashCode();
                if (this.ProductType != null)
                    hashCode = hashCode * 59 + this.ProductType.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Engagement != null)
                    hashCode = hashCode * 59 + this.Engagement.GetHashCode();
                if (this.ReportName != null)
                    hashCode = hashCode * 59 + this.ReportName.GetHashCode();
                if (this.ReportInfo != null)
                    hashCode = hashCode * 59 + this.ReportInfo.GetHashCode();
                if (this.Test != null)
                    hashCode = hashCode * 59 + this.Test.GetHashCode();
                if (this.Endpoint != null)
                    hashCode = hashCode * 59 + this.Endpoint.GetHashCode();
                if (this.Endpoints != null)
                    hashCode = hashCode * 59 + this.Endpoints.GetHashCode();
                if (this.Findings != null)
                    hashCode = hashCode * 59 + this.Findings.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.TeamName != null)
                    hashCode = hashCode * 59 + this.TeamName.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.FindingImages != null)
                    hashCode = hashCode * 59 + this.FindingImages.GetHashCode();
                if (this.FindingNotes != null)
                    hashCode = hashCode * 59 + this.FindingNotes.GetHashCode();
                return hashCode;
            }
        }
    }

}
