/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// JIRAInstance
    /// </summary>
    [DataContract]
    public partial class JIRAInstance :  IEquatable<JIRAInstance>
    {
        /// <summary>
        /// You can define extra issue types in settings.py
        /// </summary>
        /// <value>You can define extra issue types in settings.py</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultIssueTypeEnum
        {
            
            /// <summary>
            /// Enum Task for value: Task
            /// </summary>
            [EnumMember(Value = "Task")]
            Task = 1,
            
            /// <summary>
            /// Enum Story for value: Story
            /// </summary>
            [EnumMember(Value = "Story")]
            Story = 2,
            
            /// <summary>
            /// Enum Epic for value: Epic
            /// </summary>
            [EnumMember(Value = "Epic")]
            Epic = 3,
            
            /// <summary>
            /// Enum Spike for value: Spike
            /// </summary>
            [EnumMember(Value = "Spike")]
            Spike = 4,
            
            /// <summary>
            /// Enum Bug for value: Bug
            /// </summary>
            [EnumMember(Value = "Bug")]
            Bug = 5,
            
            /// <summary>
            /// Enum Security for value: Security
            /// </summary>
            [EnumMember(Value = "Security")]
            Security = 6
        }

        /// <summary>
        /// You can define extra issue types in settings.py
        /// </summary>
        /// <value>You can define extra issue types in settings.py</value>
        [DataMember(Name="default_issue_type", EmitDefaultValue=false)]
        public DefaultIssueTypeEnum? DefaultIssueType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JIRAInstance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JIRAInstance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JIRAInstance" /> class.
        /// </summary>
        /// <param name="configurationName">Enter a name to give to this configuration.</param>
        /// <param name="url">For more information how to configure Jira, read the DefectDojo documentation. (required).</param>
        /// <param name="username">username (required).</param>
        /// <param name="password">password (required).</param>
        /// <param name="defaultIssueType">You can define extra issue types in settings.py.</param>
        /// <param name="issueTemplateDir">Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates..</param>
        /// <param name="epicNameId">To obtain the &#39;Epic name id&#39; visit https://&lt;YOUR JIRA URL&gt;/rest/api/2/field and search for Epic Name. Copy the number out of cf[number] and paste it here. (required).</param>
        /// <param name="openStatusKey">Transition ID to Re-Open JIRA issues, visit https://&lt;YOUR JIRA URL&gt;/rest/api/latest/issue/&lt;ANY VALID ISSUE KEY&gt;/transitions?expand&#x3D;transitions.fields to find the ID for your JIRA instance (required).</param>
        /// <param name="closeStatusKey">Transition ID to Close JIRA issues, visit https://&lt;YOUR JIRA URL&gt;/rest/api/latest/issue/&lt;ANY VALID ISSUE KEY&gt;/transitions?expand&#x3D;transitions.fields to find the ID for your JIRA instance (required).</param>
        /// <param name="infoMappingSeverity">Maps to the &#39;Priority&#39; field in Jira. For example: Info (required).</param>
        /// <param name="lowMappingSeverity">Maps to the &#39;Priority&#39; field in Jira. For example: Low (required).</param>
        /// <param name="mediumMappingSeverity">Maps to the &#39;Priority&#39; field in Jira. For example: Medium (required).</param>
        /// <param name="highMappingSeverity">Maps to the &#39;Priority&#39; field in Jira. For example: High (required).</param>
        /// <param name="criticalMappingSeverity">Maps to the &#39;Priority&#39; field in Jira. For example: Critical (required).</param>
        /// <param name="findingText">Additional text that will be added to the finding in Jira. For example including how the finding was created or who to contact for more information..</param>
        /// <param name="acceptedMappingResolution">JIRA resolution names (comma-separated values) that maps to an Accepted Finding.</param>
        /// <param name="falsePositiveMappingResolution">JIRA resolution names (comma-separated values) that maps to a False Positive Finding.</param>
        /// <param name="globalJiraSlaNotification">This setting can be overidden at the Product level.</param>
        public JIRAInstance(string configurationName = default(string), string url = default(string), string username = default(string), string password = default(string), DefaultIssueTypeEnum? defaultIssueType = default(DefaultIssueTypeEnum?), string issueTemplateDir = default(string), int? epicNameId = default(int?), int? openStatusKey = default(int?), int? closeStatusKey = default(int?), string infoMappingSeverity = default(string), string lowMappingSeverity = default(string), string mediumMappingSeverity = default(string), string highMappingSeverity = default(string), string criticalMappingSeverity = default(string), string findingText = default(string), string acceptedMappingResolution = default(string), string falsePositiveMappingResolution = default(string), bool? globalJiraSlaNotification = default(bool?))
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for JIRAInstance and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for JIRAInstance and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new InvalidDataException("password is a required property for JIRAInstance and cannot be null");
            }
            else
            {
                this.Password = password;
            }
            // to ensure "epicNameId" is required (not null)
            if (epicNameId == null)
            {
                throw new InvalidDataException("epicNameId is a required property for JIRAInstance and cannot be null");
            }
            else
            {
                this.EpicNameId = epicNameId;
            }
            // to ensure "openStatusKey" is required (not null)
            if (openStatusKey == null)
            {
                throw new InvalidDataException("openStatusKey is a required property for JIRAInstance and cannot be null");
            }
            else
            {
                this.OpenStatusKey = openStatusKey;
            }
            // to ensure "closeStatusKey" is required (not null)
            if (closeStatusKey == null)
            {
                throw new InvalidDataException("closeStatusKey is a required property for JIRAInstance and cannot be null");
            }
            else
            {
                this.CloseStatusKey = closeStatusKey;
            }
            // to ensure "infoMappingSeverity" is required (not null)
            if (infoMappingSeverity == null)
            {
                throw new InvalidDataException("infoMappingSeverity is a required property for JIRAInstance and cannot be null");
            }
            else
            {
                this.InfoMappingSeverity = infoMappingSeverity;
            }
            // to ensure "lowMappingSeverity" is required (not null)
            if (lowMappingSeverity == null)
            {
                throw new InvalidDataException("lowMappingSeverity is a required property for JIRAInstance and cannot be null");
            }
            else
            {
                this.LowMappingSeverity = lowMappingSeverity;
            }
            // to ensure "mediumMappingSeverity" is required (not null)
            if (mediumMappingSeverity == null)
            {
                throw new InvalidDataException("mediumMappingSeverity is a required property for JIRAInstance and cannot be null");
            }
            else
            {
                this.MediumMappingSeverity = mediumMappingSeverity;
            }
            // to ensure "highMappingSeverity" is required (not null)
            if (highMappingSeverity == null)
            {
                throw new InvalidDataException("highMappingSeverity is a required property for JIRAInstance and cannot be null");
            }
            else
            {
                this.HighMappingSeverity = highMappingSeverity;
            }
            // to ensure "criticalMappingSeverity" is required (not null)
            if (criticalMappingSeverity == null)
            {
                throw new InvalidDataException("criticalMappingSeverity is a required property for JIRAInstance and cannot be null");
            }
            else
            {
                this.CriticalMappingSeverity = criticalMappingSeverity;
            }
            this.ConfigurationName = configurationName;
            this.DefaultIssueType = defaultIssueType;
            this.IssueTemplateDir = issueTemplateDir;
            this.FindingText = findingText;
            this.AcceptedMappingResolution = acceptedMappingResolution;
            this.FalsePositiveMappingResolution = falsePositiveMappingResolution;
            this.GlobalJiraSlaNotification = globalJiraSlaNotification;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Enter a name to give to this configuration
        /// </summary>
        /// <value>Enter a name to give to this configuration</value>
        [DataMember(Name="configuration_name", EmitDefaultValue=false)]
        public string ConfigurationName { get; set; }

        /// <summary>
        /// For more information how to configure Jira, read the DefectDojo documentation.
        /// </summary>
        /// <value>For more information how to configure Jira, read the DefectDojo documentation.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }


        /// <summary>
        /// Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.
        /// </summary>
        /// <value>Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.</value>
        [DataMember(Name="issue_template_dir", EmitDefaultValue=false)]
        public string IssueTemplateDir { get; set; }

        /// <summary>
        /// To obtain the &#39;Epic name id&#39; visit https://&lt;YOUR JIRA URL&gt;/rest/api/2/field and search for Epic Name. Copy the number out of cf[number] and paste it here.
        /// </summary>
        /// <value>To obtain the &#39;Epic name id&#39; visit https://&lt;YOUR JIRA URL&gt;/rest/api/2/field and search for Epic Name. Copy the number out of cf[number] and paste it here.</value>
        [DataMember(Name="epic_name_id", EmitDefaultValue=false)]
        public int? EpicNameId { get; set; }

        /// <summary>
        /// Transition ID to Re-Open JIRA issues, visit https://&lt;YOUR JIRA URL&gt;/rest/api/latest/issue/&lt;ANY VALID ISSUE KEY&gt;/transitions?expand&#x3D;transitions.fields to find the ID for your JIRA instance
        /// </summary>
        /// <value>Transition ID to Re-Open JIRA issues, visit https://&lt;YOUR JIRA URL&gt;/rest/api/latest/issue/&lt;ANY VALID ISSUE KEY&gt;/transitions?expand&#x3D;transitions.fields to find the ID for your JIRA instance</value>
        [DataMember(Name="open_status_key", EmitDefaultValue=false)]
        public int? OpenStatusKey { get; set; }

        /// <summary>
        /// Transition ID to Close JIRA issues, visit https://&lt;YOUR JIRA URL&gt;/rest/api/latest/issue/&lt;ANY VALID ISSUE KEY&gt;/transitions?expand&#x3D;transitions.fields to find the ID for your JIRA instance
        /// </summary>
        /// <value>Transition ID to Close JIRA issues, visit https://&lt;YOUR JIRA URL&gt;/rest/api/latest/issue/&lt;ANY VALID ISSUE KEY&gt;/transitions?expand&#x3D;transitions.fields to find the ID for your JIRA instance</value>
        [DataMember(Name="close_status_key", EmitDefaultValue=false)]
        public int? CloseStatusKey { get; set; }

        /// <summary>
        /// Maps to the &#39;Priority&#39; field in Jira. For example: Info
        /// </summary>
        /// <value>Maps to the &#39;Priority&#39; field in Jira. For example: Info</value>
        [DataMember(Name="info_mapping_severity", EmitDefaultValue=false)]
        public string InfoMappingSeverity { get; set; }

        /// <summary>
        /// Maps to the &#39;Priority&#39; field in Jira. For example: Low
        /// </summary>
        /// <value>Maps to the &#39;Priority&#39; field in Jira. For example: Low</value>
        [DataMember(Name="low_mapping_severity", EmitDefaultValue=false)]
        public string LowMappingSeverity { get; set; }

        /// <summary>
        /// Maps to the &#39;Priority&#39; field in Jira. For example: Medium
        /// </summary>
        /// <value>Maps to the &#39;Priority&#39; field in Jira. For example: Medium</value>
        [DataMember(Name="medium_mapping_severity", EmitDefaultValue=false)]
        public string MediumMappingSeverity { get; set; }

        /// <summary>
        /// Maps to the &#39;Priority&#39; field in Jira. For example: High
        /// </summary>
        /// <value>Maps to the &#39;Priority&#39; field in Jira. For example: High</value>
        [DataMember(Name="high_mapping_severity", EmitDefaultValue=false)]
        public string HighMappingSeverity { get; set; }

        /// <summary>
        /// Maps to the &#39;Priority&#39; field in Jira. For example: Critical
        /// </summary>
        /// <value>Maps to the &#39;Priority&#39; field in Jira. For example: Critical</value>
        [DataMember(Name="critical_mapping_severity", EmitDefaultValue=false)]
        public string CriticalMappingSeverity { get; set; }

        /// <summary>
        /// Additional text that will be added to the finding in Jira. For example including how the finding was created or who to contact for more information.
        /// </summary>
        /// <value>Additional text that will be added to the finding in Jira. For example including how the finding was created or who to contact for more information.</value>
        [DataMember(Name="finding_text", EmitDefaultValue=false)]
        public string FindingText { get; set; }

        /// <summary>
        /// JIRA resolution names (comma-separated values) that maps to an Accepted Finding
        /// </summary>
        /// <value>JIRA resolution names (comma-separated values) that maps to an Accepted Finding</value>
        [DataMember(Name="accepted_mapping_resolution", EmitDefaultValue=false)]
        public string AcceptedMappingResolution { get; set; }

        /// <summary>
        /// JIRA resolution names (comma-separated values) that maps to a False Positive Finding
        /// </summary>
        /// <value>JIRA resolution names (comma-separated values) that maps to a False Positive Finding</value>
        [DataMember(Name="false_positive_mapping_resolution", EmitDefaultValue=false)]
        public string FalsePositiveMappingResolution { get; set; }

        /// <summary>
        /// This setting can be overidden at the Product level
        /// </summary>
        /// <value>This setting can be overidden at the Product level</value>
        [DataMember(Name="global_jira_sla_notification", EmitDefaultValue=false)]
        public bool? GlobalJiraSlaNotification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JIRAInstance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ConfigurationName: ").Append(ConfigurationName).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  DefaultIssueType: ").Append(DefaultIssueType).Append("\n");
            sb.Append("  IssueTemplateDir: ").Append(IssueTemplateDir).Append("\n");
            sb.Append("  EpicNameId: ").Append(EpicNameId).Append("\n");
            sb.Append("  OpenStatusKey: ").Append(OpenStatusKey).Append("\n");
            sb.Append("  CloseStatusKey: ").Append(CloseStatusKey).Append("\n");
            sb.Append("  InfoMappingSeverity: ").Append(InfoMappingSeverity).Append("\n");
            sb.Append("  LowMappingSeverity: ").Append(LowMappingSeverity).Append("\n");
            sb.Append("  MediumMappingSeverity: ").Append(MediumMappingSeverity).Append("\n");
            sb.Append("  HighMappingSeverity: ").Append(HighMappingSeverity).Append("\n");
            sb.Append("  CriticalMappingSeverity: ").Append(CriticalMappingSeverity).Append("\n");
            sb.Append("  FindingText: ").Append(FindingText).Append("\n");
            sb.Append("  AcceptedMappingResolution: ").Append(AcceptedMappingResolution).Append("\n");
            sb.Append("  FalsePositiveMappingResolution: ").Append(FalsePositiveMappingResolution).Append("\n");
            sb.Append("  GlobalJiraSlaNotification: ").Append(GlobalJiraSlaNotification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JIRAInstance);
        }

        /// <summary>
        /// Returns true if JIRAInstance instances are equal
        /// </summary>
        /// <param name="input">Instance of JIRAInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JIRAInstance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ConfigurationName == input.ConfigurationName ||
                    (this.ConfigurationName != null &&
                    this.ConfigurationName.Equals(input.ConfigurationName))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.DefaultIssueType == input.DefaultIssueType ||
                    (this.DefaultIssueType != null &&
                    this.DefaultIssueType.Equals(input.DefaultIssueType))
                ) && 
                (
                    this.IssueTemplateDir == input.IssueTemplateDir ||
                    (this.IssueTemplateDir != null &&
                    this.IssueTemplateDir.Equals(input.IssueTemplateDir))
                ) && 
                (
                    this.EpicNameId == input.EpicNameId ||
                    (this.EpicNameId != null &&
                    this.EpicNameId.Equals(input.EpicNameId))
                ) && 
                (
                    this.OpenStatusKey == input.OpenStatusKey ||
                    (this.OpenStatusKey != null &&
                    this.OpenStatusKey.Equals(input.OpenStatusKey))
                ) && 
                (
                    this.CloseStatusKey == input.CloseStatusKey ||
                    (this.CloseStatusKey != null &&
                    this.CloseStatusKey.Equals(input.CloseStatusKey))
                ) && 
                (
                    this.InfoMappingSeverity == input.InfoMappingSeverity ||
                    (this.InfoMappingSeverity != null &&
                    this.InfoMappingSeverity.Equals(input.InfoMappingSeverity))
                ) && 
                (
                    this.LowMappingSeverity == input.LowMappingSeverity ||
                    (this.LowMappingSeverity != null &&
                    this.LowMappingSeverity.Equals(input.LowMappingSeverity))
                ) && 
                (
                    this.MediumMappingSeverity == input.MediumMappingSeverity ||
                    (this.MediumMappingSeverity != null &&
                    this.MediumMappingSeverity.Equals(input.MediumMappingSeverity))
                ) && 
                (
                    this.HighMappingSeverity == input.HighMappingSeverity ||
                    (this.HighMappingSeverity != null &&
                    this.HighMappingSeverity.Equals(input.HighMappingSeverity))
                ) && 
                (
                    this.CriticalMappingSeverity == input.CriticalMappingSeverity ||
                    (this.CriticalMappingSeverity != null &&
                    this.CriticalMappingSeverity.Equals(input.CriticalMappingSeverity))
                ) && 
                (
                    this.FindingText == input.FindingText ||
                    (this.FindingText != null &&
                    this.FindingText.Equals(input.FindingText))
                ) && 
                (
                    this.AcceptedMappingResolution == input.AcceptedMappingResolution ||
                    (this.AcceptedMappingResolution != null &&
                    this.AcceptedMappingResolution.Equals(input.AcceptedMappingResolution))
                ) && 
                (
                    this.FalsePositiveMappingResolution == input.FalsePositiveMappingResolution ||
                    (this.FalsePositiveMappingResolution != null &&
                    this.FalsePositiveMappingResolution.Equals(input.FalsePositiveMappingResolution))
                ) && 
                (
                    this.GlobalJiraSlaNotification == input.GlobalJiraSlaNotification ||
                    (this.GlobalJiraSlaNotification != null &&
                    this.GlobalJiraSlaNotification.Equals(input.GlobalJiraSlaNotification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ConfigurationName != null)
                    hashCode = hashCode * 59 + this.ConfigurationName.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.DefaultIssueType != null)
                    hashCode = hashCode * 59 + this.DefaultIssueType.GetHashCode();
                if (this.IssueTemplateDir != null)
                    hashCode = hashCode * 59 + this.IssueTemplateDir.GetHashCode();
                if (this.EpicNameId != null)
                    hashCode = hashCode * 59 + this.EpicNameId.GetHashCode();
                if (this.OpenStatusKey != null)
                    hashCode = hashCode * 59 + this.OpenStatusKey.GetHashCode();
                if (this.CloseStatusKey != null)
                    hashCode = hashCode * 59 + this.CloseStatusKey.GetHashCode();
                if (this.InfoMappingSeverity != null)
                    hashCode = hashCode * 59 + this.InfoMappingSeverity.GetHashCode();
                if (this.LowMappingSeverity != null)
                    hashCode = hashCode * 59 + this.LowMappingSeverity.GetHashCode();
                if (this.MediumMappingSeverity != null)
                    hashCode = hashCode * 59 + this.MediumMappingSeverity.GetHashCode();
                if (this.HighMappingSeverity != null)
                    hashCode = hashCode * 59 + this.HighMappingSeverity.GetHashCode();
                if (this.CriticalMappingSeverity != null)
                    hashCode = hashCode * 59 + this.CriticalMappingSeverity.GetHashCode();
                if (this.FindingText != null)
                    hashCode = hashCode * 59 + this.FindingText.GetHashCode();
                if (this.AcceptedMappingResolution != null)
                    hashCode = hashCode * 59 + this.AcceptedMappingResolution.GetHashCode();
                if (this.FalsePositiveMappingResolution != null)
                    hashCode = hashCode * 59 + this.FalsePositiveMappingResolution.GetHashCode();
                if (this.GlobalJiraSlaNotification != null)
                    hashCode = hashCode * 59 + this.GlobalJiraSlaNotification.GetHashCode();
                return hashCode;
            }
        }
    }

}
