/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = DefectDojo.Client.SwaggerDateConverter;

namespace DefectDojo.Model
{
    /// <summary>
    /// InlineResponse2005Prefetch
    /// </summary>
    [DataContract]
    public partial class InlineResponse2005Prefetch :  IEquatable<InlineResponse2005Prefetch>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2005Prefetch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public InlineResponse2005Prefetch()
        {
        }
        
        /// <summary>
        /// Gets or Sets AuthIssues
        /// </summary>
        [DataMember(Name="auth_issues", EmitDefaultValue=false)]
        public Dictionary<string, Finding> AuthIssues { get; private set; }

        /// <summary>
        /// Gets or Sets AuthorIssues
        /// </summary>
        [DataMember(Name="author_issues", EmitDefaultValue=false)]
        public Dictionary<string, Finding> AuthorIssues { get; private set; }

        /// <summary>
        /// Gets or Sets ConfigIssues
        /// </summary>
        [DataMember(Name="config_issues", EmitDefaultValue=false)]
        public Dictionary<string, Finding> ConfigIssues { get; private set; }

        /// <summary>
        /// Gets or Sets CryptoIssues
        /// </summary>
        [DataMember(Name="crypto_issues", EmitDefaultValue=false)]
        public Dictionary<string, Finding> CryptoIssues { get; private set; }

        /// <summary>
        /// Gets or Sets DataIssues
        /// </summary>
        [DataMember(Name="data_issues", EmitDefaultValue=false)]
        public Dictionary<string, Finding> DataIssues { get; private set; }

        /// <summary>
        /// Gets or Sets DefectReviewRequestedBy
        /// </summary>
        [DataMember(Name="defect_review_requested_by", EmitDefaultValue=false)]
        public Dictionary<string, UserStub> DefectReviewRequestedBy { get; private set; }

        /// <summary>
        /// Gets or Sets DuplicateFinding
        /// </summary>
        [DataMember(Name="duplicate_finding", EmitDefaultValue=false)]
        public Dictionary<string, Finding> DuplicateFinding { get; private set; }

        /// <summary>
        /// Gets or Sets EndpointStatus
        /// </summary>
        [DataMember(Name="endpoint_status", EmitDefaultValue=false)]
        public Dictionary<string, EndpointStatus> EndpointStatus { get; private set; }

        /// <summary>
        /// Gets or Sets Endpoints
        /// </summary>
        [DataMember(Name="endpoints", EmitDefaultValue=false)]
        public Dictionary<string, Endpoint> Endpoints { get; private set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public Dictionary<string, ModelFile> Files { get; private set; }

        /// <summary>
        /// Gets or Sets FindingGroupSet
        /// </summary>
        [DataMember(Name="finding_group_set", EmitDefaultValue=false)]
        public Dictionary<string, Finding> FindingGroupSet { get; private set; }

        /// <summary>
        /// Gets or Sets FoundBy
        /// </summary>
        [DataMember(Name="found_by", EmitDefaultValue=false)]
        public Dictionary<string, TestType> FoundBy { get; private set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name="images", EmitDefaultValue=false)]
        public Dictionary<string, FindingImage> Images { get; private set; }

        /// <summary>
        /// Gets or Sets LastReviewedBy
        /// </summary>
        [DataMember(Name="last_reviewed_by", EmitDefaultValue=false)]
        public Dictionary<string, UserStub> LastReviewedBy { get; private set; }

        /// <summary>
        /// Gets or Sets MitigatedBy
        /// </summary>
        [DataMember(Name="mitigated_by", EmitDefaultValue=false)]
        public Dictionary<string, UserStub> MitigatedBy { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public Dictionary<string, Note> Notes { get; private set; }

        /// <summary>
        /// Gets or Sets OtherIssues
        /// </summary>
        [DataMember(Name="other_issues", EmitDefaultValue=false)]
        public Dictionary<string, Finding> OtherIssues { get; private set; }

        /// <summary>
        /// Gets or Sets Reporter
        /// </summary>
        [DataMember(Name="reporter", EmitDefaultValue=false)]
        public Dictionary<string, UserStub> Reporter { get; private set; }

        /// <summary>
        /// Gets or Sets ReviewRequestedBy
        /// </summary>
        [DataMember(Name="review_requested_by", EmitDefaultValue=false)]
        public Dictionary<string, UserStub> ReviewRequestedBy { get; private set; }

        /// <summary>
        /// Gets or Sets Reviewers
        /// </summary>
        [DataMember(Name="reviewers", EmitDefaultValue=false)]
        public Dictionary<string, UserStub> Reviewers { get; private set; }

        /// <summary>
        /// Gets or Sets RiskAcceptanceSet
        /// </summary>
        [DataMember(Name="risk_acceptance_set", EmitDefaultValue=false)]
        public Dictionary<string, Finding> RiskAcceptanceSet { get; private set; }

        /// <summary>
        /// Gets or Sets SensitiveIssues
        /// </summary>
        [DataMember(Name="sensitive_issues", EmitDefaultValue=false)]
        public Dictionary<string, Finding> SensitiveIssues { get; private set; }

        /// <summary>
        /// Gets or Sets SessionIssues
        /// </summary>
        [DataMember(Name="session_issues", EmitDefaultValue=false)]
        public Dictionary<string, Finding> SessionIssues { get; private set; }

        /// <summary>
        /// Gets or Sets SonarqubeIssue
        /// </summary>
        [DataMember(Name="sonarqube_issue", EmitDefaultValue=false)]
        public Dictionary<string, SonarqubeIssue> SonarqubeIssue { get; private set; }

        /// <summary>
        /// Gets or Sets Test
        /// </summary>
        [DataMember(Name="test", EmitDefaultValue=false)]
        public Dictionary<string, Test> Test { get; private set; }

        /// <summary>
        /// Gets or Sets TestImportSet
        /// </summary>
        [DataMember(Name="test_import_set", EmitDefaultValue=false)]
        public Dictionary<string, Finding> TestImportSet { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2005Prefetch {\n");
            sb.Append("  AuthIssues: ").Append(AuthIssues).Append("\n");
            sb.Append("  AuthorIssues: ").Append(AuthorIssues).Append("\n");
            sb.Append("  ConfigIssues: ").Append(ConfigIssues).Append("\n");
            sb.Append("  CryptoIssues: ").Append(CryptoIssues).Append("\n");
            sb.Append("  DataIssues: ").Append(DataIssues).Append("\n");
            sb.Append("  DefectReviewRequestedBy: ").Append(DefectReviewRequestedBy).Append("\n");
            sb.Append("  DuplicateFinding: ").Append(DuplicateFinding).Append("\n");
            sb.Append("  EndpointStatus: ").Append(EndpointStatus).Append("\n");
            sb.Append("  Endpoints: ").Append(Endpoints).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  FindingGroupSet: ").Append(FindingGroupSet).Append("\n");
            sb.Append("  FoundBy: ").Append(FoundBy).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  LastReviewedBy: ").Append(LastReviewedBy).Append("\n");
            sb.Append("  MitigatedBy: ").Append(MitigatedBy).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  OtherIssues: ").Append(OtherIssues).Append("\n");
            sb.Append("  Reporter: ").Append(Reporter).Append("\n");
            sb.Append("  ReviewRequestedBy: ").Append(ReviewRequestedBy).Append("\n");
            sb.Append("  Reviewers: ").Append(Reviewers).Append("\n");
            sb.Append("  RiskAcceptanceSet: ").Append(RiskAcceptanceSet).Append("\n");
            sb.Append("  SensitiveIssues: ").Append(SensitiveIssues).Append("\n");
            sb.Append("  SessionIssues: ").Append(SessionIssues).Append("\n");
            sb.Append("  SonarqubeIssue: ").Append(SonarqubeIssue).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  TestImportSet: ").Append(TestImportSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2005Prefetch);
        }

        /// <summary>
        /// Returns true if InlineResponse2005Prefetch instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2005Prefetch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2005Prefetch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthIssues == input.AuthIssues ||
                    this.AuthIssues != null &&
                    this.AuthIssues.SequenceEqual(input.AuthIssues)
                ) && 
                (
                    this.AuthorIssues == input.AuthorIssues ||
                    this.AuthorIssues != null &&
                    this.AuthorIssues.SequenceEqual(input.AuthorIssues)
                ) && 
                (
                    this.ConfigIssues == input.ConfigIssues ||
                    this.ConfigIssues != null &&
                    this.ConfigIssues.SequenceEqual(input.ConfigIssues)
                ) && 
                (
                    this.CryptoIssues == input.CryptoIssues ||
                    this.CryptoIssues != null &&
                    this.CryptoIssues.SequenceEqual(input.CryptoIssues)
                ) && 
                (
                    this.DataIssues == input.DataIssues ||
                    this.DataIssues != null &&
                    this.DataIssues.SequenceEqual(input.DataIssues)
                ) && 
                (
                    this.DefectReviewRequestedBy == input.DefectReviewRequestedBy ||
                    this.DefectReviewRequestedBy != null &&
                    this.DefectReviewRequestedBy.SequenceEqual(input.DefectReviewRequestedBy)
                ) && 
                (
                    this.DuplicateFinding == input.DuplicateFinding ||
                    this.DuplicateFinding != null &&
                    this.DuplicateFinding.SequenceEqual(input.DuplicateFinding)
                ) && 
                (
                    this.EndpointStatus == input.EndpointStatus ||
                    this.EndpointStatus != null &&
                    this.EndpointStatus.SequenceEqual(input.EndpointStatus)
                ) && 
                (
                    this.Endpoints == input.Endpoints ||
                    this.Endpoints != null &&
                    this.Endpoints.SequenceEqual(input.Endpoints)
                ) && 
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                ) && 
                (
                    this.FindingGroupSet == input.FindingGroupSet ||
                    this.FindingGroupSet != null &&
                    this.FindingGroupSet.SequenceEqual(input.FindingGroupSet)
                ) && 
                (
                    this.FoundBy == input.FoundBy ||
                    this.FoundBy != null &&
                    this.FoundBy.SequenceEqual(input.FoundBy)
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.LastReviewedBy == input.LastReviewedBy ||
                    this.LastReviewedBy != null &&
                    this.LastReviewedBy.SequenceEqual(input.LastReviewedBy)
                ) && 
                (
                    this.MitigatedBy == input.MitigatedBy ||
                    this.MitigatedBy != null &&
                    this.MitigatedBy.SequenceEqual(input.MitigatedBy)
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                ) && 
                (
                    this.OtherIssues == input.OtherIssues ||
                    this.OtherIssues != null &&
                    this.OtherIssues.SequenceEqual(input.OtherIssues)
                ) && 
                (
                    this.Reporter == input.Reporter ||
                    this.Reporter != null &&
                    this.Reporter.SequenceEqual(input.Reporter)
                ) && 
                (
                    this.ReviewRequestedBy == input.ReviewRequestedBy ||
                    this.ReviewRequestedBy != null &&
                    this.ReviewRequestedBy.SequenceEqual(input.ReviewRequestedBy)
                ) && 
                (
                    this.Reviewers == input.Reviewers ||
                    this.Reviewers != null &&
                    this.Reviewers.SequenceEqual(input.Reviewers)
                ) && 
                (
                    this.RiskAcceptanceSet == input.RiskAcceptanceSet ||
                    this.RiskAcceptanceSet != null &&
                    this.RiskAcceptanceSet.SequenceEqual(input.RiskAcceptanceSet)
                ) && 
                (
                    this.SensitiveIssues == input.SensitiveIssues ||
                    this.SensitiveIssues != null &&
                    this.SensitiveIssues.SequenceEqual(input.SensitiveIssues)
                ) && 
                (
                    this.SessionIssues == input.SessionIssues ||
                    this.SessionIssues != null &&
                    this.SessionIssues.SequenceEqual(input.SessionIssues)
                ) && 
                (
                    this.SonarqubeIssue == input.SonarqubeIssue ||
                    this.SonarqubeIssue != null &&
                    this.SonarqubeIssue.SequenceEqual(input.SonarqubeIssue)
                ) && 
                (
                    this.Test == input.Test ||
                    this.Test != null &&
                    this.Test.SequenceEqual(input.Test)
                ) && 
                (
                    this.TestImportSet == input.TestImportSet ||
                    this.TestImportSet != null &&
                    this.TestImportSet.SequenceEqual(input.TestImportSet)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthIssues != null)
                    hashCode = hashCode * 59 + this.AuthIssues.GetHashCode();
                if (this.AuthorIssues != null)
                    hashCode = hashCode * 59 + this.AuthorIssues.GetHashCode();
                if (this.ConfigIssues != null)
                    hashCode = hashCode * 59 + this.ConfigIssues.GetHashCode();
                if (this.CryptoIssues != null)
                    hashCode = hashCode * 59 + this.CryptoIssues.GetHashCode();
                if (this.DataIssues != null)
                    hashCode = hashCode * 59 + this.DataIssues.GetHashCode();
                if (this.DefectReviewRequestedBy != null)
                    hashCode = hashCode * 59 + this.DefectReviewRequestedBy.GetHashCode();
                if (this.DuplicateFinding != null)
                    hashCode = hashCode * 59 + this.DuplicateFinding.GetHashCode();
                if (this.EndpointStatus != null)
                    hashCode = hashCode * 59 + this.EndpointStatus.GetHashCode();
                if (this.Endpoints != null)
                    hashCode = hashCode * 59 + this.Endpoints.GetHashCode();
                if (this.Files != null)
                    hashCode = hashCode * 59 + this.Files.GetHashCode();
                if (this.FindingGroupSet != null)
                    hashCode = hashCode * 59 + this.FindingGroupSet.GetHashCode();
                if (this.FoundBy != null)
                    hashCode = hashCode * 59 + this.FoundBy.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.LastReviewedBy != null)
                    hashCode = hashCode * 59 + this.LastReviewedBy.GetHashCode();
                if (this.MitigatedBy != null)
                    hashCode = hashCode * 59 + this.MitigatedBy.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.OtherIssues != null)
                    hashCode = hashCode * 59 + this.OtherIssues.GetHashCode();
                if (this.Reporter != null)
                    hashCode = hashCode * 59 + this.Reporter.GetHashCode();
                if (this.ReviewRequestedBy != null)
                    hashCode = hashCode * 59 + this.ReviewRequestedBy.GetHashCode();
                if (this.Reviewers != null)
                    hashCode = hashCode * 59 + this.Reviewers.GetHashCode();
                if (this.RiskAcceptanceSet != null)
                    hashCode = hashCode * 59 + this.RiskAcceptanceSet.GetHashCode();
                if (this.SensitiveIssues != null)
                    hashCode = hashCode * 59 + this.SensitiveIssues.GetHashCode();
                if (this.SessionIssues != null)
                    hashCode = hashCode * 59 + this.SessionIssues.GetHashCode();
                if (this.SonarqubeIssue != null)
                    hashCode = hashCode * 59 + this.SonarqubeIssue.GetHashCode();
                if (this.Test != null)
                    hashCode = hashCode * 59 + this.Test.GetHashCode();
                if (this.TestImportSet != null)
                    hashCode = hashCode * 59 + this.TestImportSet.GetHashCode();
                return hashCode;
            }
        }
    }

}
