/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using DefectDojo.Client;
using DefectDojo.Model;

namespace DefectDojo.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISonarqubeProductConfigurationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>SonarqubeProduct</returns>
        SonarqubeProduct SonarqubeProductConfigurationsCreate (SonarqubeProduct data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of SonarqubeProduct</returns>
        ApiResponse<SonarqubeProduct> SonarqubeProductConfigurationsCreateWithHttpInfo (SonarqubeProduct data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns></returns>
        void SonarqubeProductConfigurationsDelete (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SonarqubeProductConfigurationsDeleteWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="sonarqubeProjectKey"> (optional)</param>
        /// <param name="sonarqubeToolConfig"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 SonarqubeProductConfigurationsList (decimal? id = null, string product = null, string sonarqubeProjectKey = null, string sonarqubeToolConfig = null, int? limit = null, int? offset = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="sonarqubeProjectKey"> (optional)</param>
        /// <param name="sonarqubeToolConfig"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> SonarqubeProductConfigurationsListWithHttpInfo (decimal? id = null, string product = null, string sonarqubeProjectKey = null, string sonarqubeToolConfig = null, int? limit = null, int? offset = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>SonarqubeProduct</returns>
        SonarqubeProduct SonarqubeProductConfigurationsPartialUpdate (int? id, SonarqubeProduct data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of SonarqubeProduct</returns>
        ApiResponse<SonarqubeProduct> SonarqubeProductConfigurationsPartialUpdateWithHttpInfo (int? id, SonarqubeProduct data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns>SonarqubeProduct</returns>
        SonarqubeProduct SonarqubeProductConfigurationsRead (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns>ApiResponse of SonarqubeProduct</returns>
        ApiResponse<SonarqubeProduct> SonarqubeProductConfigurationsReadWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>SonarqubeProduct</returns>
        SonarqubeProduct SonarqubeProductConfigurationsUpdate (int? id, SonarqubeProduct data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of SonarqubeProduct</returns>
        ApiResponse<SonarqubeProduct> SonarqubeProductConfigurationsUpdateWithHttpInfo (int? id, SonarqubeProduct data);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of SonarqubeProduct</returns>
        System.Threading.Tasks.Task<SonarqubeProduct> SonarqubeProductConfigurationsCreateAsync (SonarqubeProduct data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (SonarqubeProduct)</returns>
        System.Threading.Tasks.Task<ApiResponse<SonarqubeProduct>> SonarqubeProductConfigurationsCreateAsyncWithHttpInfo (SonarqubeProduct data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SonarqubeProductConfigurationsDeleteAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SonarqubeProductConfigurationsDeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="sonarqubeProjectKey"> (optional)</param>
        /// <param name="sonarqubeToolConfig"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> SonarqubeProductConfigurationsListAsync (decimal? id = null, string product = null, string sonarqubeProjectKey = null, string sonarqubeToolConfig = null, int? limit = null, int? offset = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="sonarqubeProjectKey"> (optional)</param>
        /// <param name="sonarqubeToolConfig"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> SonarqubeProductConfigurationsListAsyncWithHttpInfo (decimal? id = null, string product = null, string sonarqubeProjectKey = null, string sonarqubeToolConfig = null, int? limit = null, int? offset = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>Task of SonarqubeProduct</returns>
        System.Threading.Tasks.Task<SonarqubeProduct> SonarqubeProductConfigurationsPartialUpdateAsync (int? id, SonarqubeProduct data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (SonarqubeProduct)</returns>
        System.Threading.Tasks.Task<ApiResponse<SonarqubeProduct>> SonarqubeProductConfigurationsPartialUpdateAsyncWithHttpInfo (int? id, SonarqubeProduct data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns>Task of SonarqubeProduct</returns>
        System.Threading.Tasks.Task<SonarqubeProduct> SonarqubeProductConfigurationsReadAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns>Task of ApiResponse (SonarqubeProduct)</returns>
        System.Threading.Tasks.Task<ApiResponse<SonarqubeProduct>> SonarqubeProductConfigurationsReadAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>Task of SonarqubeProduct</returns>
        System.Threading.Tasks.Task<SonarqubeProduct> SonarqubeProductConfigurationsUpdateAsync (int? id, SonarqubeProduct data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (SonarqubeProduct)</returns>
        System.Threading.Tasks.Task<ApiResponse<SonarqubeProduct>> SonarqubeProductConfigurationsUpdateAsyncWithHttpInfo (int? id, SonarqubeProduct data);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SonarqubeProductConfigurationsApi : ISonarqubeProductConfigurationsApi
    {
        private DefectDojo.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SonarqubeProductConfigurationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SonarqubeProductConfigurationsApi(String basePath)
        {
            this.Configuration = new DefectDojo.Client.Configuration { BasePath = basePath };

            ExceptionFactory = DefectDojo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SonarqubeProductConfigurationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SonarqubeProductConfigurationsApi(DefectDojo.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = DefectDojo.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DefectDojo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DefectDojo.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DefectDojo.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>SonarqubeProduct</returns>
        public SonarqubeProduct SonarqubeProductConfigurationsCreate (SonarqubeProduct data)
        {
             ApiResponse<SonarqubeProduct> localVarResponse = SonarqubeProductConfigurationsCreateWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of SonarqubeProduct</returns>
        public ApiResponse< SonarqubeProduct > SonarqubeProductConfigurationsCreateWithHttpInfo (SonarqubeProduct data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling SonarqubeProductConfigurationsApi->SonarqubeProductConfigurationsCreate");

            var localVarPath = "./sonarqube_product_configurations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SonarqubeProductConfigurationsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SonarqubeProduct>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SonarqubeProduct) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SonarqubeProduct)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of SonarqubeProduct</returns>
        public async System.Threading.Tasks.Task<SonarqubeProduct> SonarqubeProductConfigurationsCreateAsync (SonarqubeProduct data)
        {
             ApiResponse<SonarqubeProduct> localVarResponse = await SonarqubeProductConfigurationsCreateAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (SonarqubeProduct)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SonarqubeProduct>> SonarqubeProductConfigurationsCreateAsyncWithHttpInfo (SonarqubeProduct data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling SonarqubeProductConfigurationsApi->SonarqubeProductConfigurationsCreate");

            var localVarPath = "./sonarqube_product_configurations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SonarqubeProductConfigurationsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SonarqubeProduct>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SonarqubeProduct) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SonarqubeProduct)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns></returns>
        public void SonarqubeProductConfigurationsDelete (int? id)
        {
             SonarqubeProductConfigurationsDeleteWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SonarqubeProductConfigurationsDeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SonarqubeProductConfigurationsApi->SonarqubeProductConfigurationsDelete");

            var localVarPath = "./sonarqube_product_configurations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SonarqubeProductConfigurationsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SonarqubeProductConfigurationsDeleteAsync (int? id)
        {
             await SonarqubeProductConfigurationsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SonarqubeProductConfigurationsDeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SonarqubeProductConfigurationsApi->SonarqubeProductConfigurationsDelete");

            var localVarPath = "./sonarqube_product_configurations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SonarqubeProductConfigurationsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="sonarqubeProjectKey"> (optional)</param>
        /// <param name="sonarqubeToolConfig"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 SonarqubeProductConfigurationsList (decimal? id = null, string product = null, string sonarqubeProjectKey = null, string sonarqubeToolConfig = null, int? limit = null, int? offset = null)
        {
             ApiResponse<InlineResponse20019> localVarResponse = SonarqubeProductConfigurationsListWithHttpInfo(id, product, sonarqubeProjectKey, sonarqubeToolConfig, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="sonarqubeProjectKey"> (optional)</param>
        /// <param name="sonarqubeToolConfig"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse< InlineResponse20019 > SonarqubeProductConfigurationsListWithHttpInfo (decimal? id = null, string product = null, string sonarqubeProjectKey = null, string sonarqubeToolConfig = null, int? limit = null, int? offset = null)
        {

            var localVarPath = "./sonarqube_product_configurations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (product != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product", product)); // query parameter
            if (sonarqubeProjectKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sonarqube_project_key", sonarqubeProjectKey)); // query parameter
            if (sonarqubeToolConfig != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sonarqube_tool_config", sonarqubeToolConfig)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SonarqubeProductConfigurationsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="sonarqubeProjectKey"> (optional)</param>
        /// <param name="sonarqubeToolConfig"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> SonarqubeProductConfigurationsListAsync (decimal? id = null, string product = null, string sonarqubeProjectKey = null, string sonarqubeToolConfig = null, int? limit = null, int? offset = null)
        {
             ApiResponse<InlineResponse20019> localVarResponse = await SonarqubeProductConfigurationsListAsyncWithHttpInfo(id, product, sonarqubeProjectKey, sonarqubeToolConfig, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="sonarqubeProjectKey"> (optional)</param>
        /// <param name="sonarqubeToolConfig"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> SonarqubeProductConfigurationsListAsyncWithHttpInfo (decimal? id = null, string product = null, string sonarqubeProjectKey = null, string sonarqubeToolConfig = null, int? limit = null, int? offset = null)
        {

            var localVarPath = "./sonarqube_product_configurations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (product != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product", product)); // query parameter
            if (sonarqubeProjectKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sonarqube_project_key", sonarqubeProjectKey)); // query parameter
            if (sonarqubeToolConfig != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sonarqube_tool_config", sonarqubeToolConfig)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SonarqubeProductConfigurationsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>SonarqubeProduct</returns>
        public SonarqubeProduct SonarqubeProductConfigurationsPartialUpdate (int? id, SonarqubeProduct data)
        {
             ApiResponse<SonarqubeProduct> localVarResponse = SonarqubeProductConfigurationsPartialUpdateWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of SonarqubeProduct</returns>
        public ApiResponse< SonarqubeProduct > SonarqubeProductConfigurationsPartialUpdateWithHttpInfo (int? id, SonarqubeProduct data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SonarqubeProductConfigurationsApi->SonarqubeProductConfigurationsPartialUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling SonarqubeProductConfigurationsApi->SonarqubeProductConfigurationsPartialUpdate");

            var localVarPath = "./sonarqube_product_configurations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SonarqubeProductConfigurationsPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SonarqubeProduct>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SonarqubeProduct) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SonarqubeProduct)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>Task of SonarqubeProduct</returns>
        public async System.Threading.Tasks.Task<SonarqubeProduct> SonarqubeProductConfigurationsPartialUpdateAsync (int? id, SonarqubeProduct data)
        {
             ApiResponse<SonarqubeProduct> localVarResponse = await SonarqubeProductConfigurationsPartialUpdateAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (SonarqubeProduct)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SonarqubeProduct>> SonarqubeProductConfigurationsPartialUpdateAsyncWithHttpInfo (int? id, SonarqubeProduct data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SonarqubeProductConfigurationsApi->SonarqubeProductConfigurationsPartialUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling SonarqubeProductConfigurationsApi->SonarqubeProductConfigurationsPartialUpdate");

            var localVarPath = "./sonarqube_product_configurations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SonarqubeProductConfigurationsPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SonarqubeProduct>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SonarqubeProduct) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SonarqubeProduct)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns>SonarqubeProduct</returns>
        public SonarqubeProduct SonarqubeProductConfigurationsRead (int? id)
        {
             ApiResponse<SonarqubeProduct> localVarResponse = SonarqubeProductConfigurationsReadWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns>ApiResponse of SonarqubeProduct</returns>
        public ApiResponse< SonarqubeProduct > SonarqubeProductConfigurationsReadWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SonarqubeProductConfigurationsApi->SonarqubeProductConfigurationsRead");

            var localVarPath = "./sonarqube_product_configurations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SonarqubeProductConfigurationsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SonarqubeProduct>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SonarqubeProduct) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SonarqubeProduct)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns>Task of SonarqubeProduct</returns>
        public async System.Threading.Tasks.Task<SonarqubeProduct> SonarqubeProductConfigurationsReadAsync (int? id)
        {
             ApiResponse<SonarqubeProduct> localVarResponse = await SonarqubeProductConfigurationsReadAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <returns>Task of ApiResponse (SonarqubeProduct)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SonarqubeProduct>> SonarqubeProductConfigurationsReadAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SonarqubeProductConfigurationsApi->SonarqubeProductConfigurationsRead");

            var localVarPath = "./sonarqube_product_configurations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SonarqubeProductConfigurationsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SonarqubeProduct>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SonarqubeProduct) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SonarqubeProduct)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>SonarqubeProduct</returns>
        public SonarqubeProduct SonarqubeProductConfigurationsUpdate (int? id, SonarqubeProduct data)
        {
             ApiResponse<SonarqubeProduct> localVarResponse = SonarqubeProductConfigurationsUpdateWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of SonarqubeProduct</returns>
        public ApiResponse< SonarqubeProduct > SonarqubeProductConfigurationsUpdateWithHttpInfo (int? id, SonarqubeProduct data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SonarqubeProductConfigurationsApi->SonarqubeProductConfigurationsUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling SonarqubeProductConfigurationsApi->SonarqubeProductConfigurationsUpdate");

            var localVarPath = "./sonarqube_product_configurations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SonarqubeProductConfigurationsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SonarqubeProduct>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SonarqubeProduct) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SonarqubeProduct)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>Task of SonarqubeProduct</returns>
        public async System.Threading.Tasks.Task<SonarqubeProduct> SonarqubeProductConfigurationsUpdateAsync (int? id, SonarqubeProduct data)
        {
             ApiResponse<SonarqubeProduct> localVarResponse = await SonarqubeProductConfigurationsUpdateAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this sonarqube_ product.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (SonarqubeProduct)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SonarqubeProduct>> SonarqubeProductConfigurationsUpdateAsyncWithHttpInfo (int? id, SonarqubeProduct data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SonarqubeProductConfigurationsApi->SonarqubeProductConfigurationsUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling SonarqubeProductConfigurationsApi->SonarqubeProductConfigurationsUpdate");

            var localVarPath = "./sonarqube_product_configurations/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SonarqubeProductConfigurationsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SonarqubeProduct>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SonarqubeProduct) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SonarqubeProduct)));
        }

    }
}
