/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using DefectDojo.Client;
using DefectDojo.Model;

namespace DefectDojo.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Product</returns>
        Product ProductsCreate (Product data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsCreateWithHttpInfo (Product data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <returns></returns>
        void ProductsDelete (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductsDeleteWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>ReportGenerate</returns>
        ReportGenerate ProductsGenerateReport (int? id, ReportGenerateOption data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of ReportGenerate</returns>
        ApiResponse<ReportGenerate> ProductsGenerateReportWithHttpInfo (int? id, ReportGenerateOption data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicate"> (optional)</param>
        /// <param name="externalAudience"> (optional)</param>
        /// <param name="internetAccessible"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="businessCriticality"> (optional)</param>
        /// <param name="platform"> (optional)</param>
        /// <param name="lifecycle"> (optional)</param>
        /// <param name="origin"> (optional)</param>
        /// <param name="id">Multiple values may be separated by commas. (optional)</param>
        /// <param name="productManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="technicalContact">Multiple values may be separated by commas. (optional)</param>
        /// <param name="teamManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodType">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tid">Multiple values may be separated by commas. (optional)</param>
        /// <param name="authorizedUsers">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodNumericGrade">Multiple values may be separated by commas. (optional)</param>
        /// <param name="userRecords">Multiple values may be separated by commas. (optional)</param>
        /// <param name="regulations">Multiple values may be separated by commas. (optional)</param>
        /// <param name="activeFindingCount">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="created"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="revenue"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 ProductsList (string duplicate = null, string externalAudience = null, string internetAccessible = null, string name = null, string description = null, string businessCriticality = null, string platform = null, string lifecycle = null, string origin = null, decimal? id = null, decimal? productManager = null, decimal? technicalContact = null, decimal? teamManager = null, decimal? prodType = null, decimal? tid = null, decimal? authorizedUsers = null, decimal? prodNumericGrade = null, decimal? userRecords = null, decimal? regulations = null, decimal? activeFindingCount = null, string tag = null, string tags = null, string created = null, string updated = null, decimal? revenue = null, string o = null, int? limit = null, int? offset = null, List<string> prefetch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicate"> (optional)</param>
        /// <param name="externalAudience"> (optional)</param>
        /// <param name="internetAccessible"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="businessCriticality"> (optional)</param>
        /// <param name="platform"> (optional)</param>
        /// <param name="lifecycle"> (optional)</param>
        /// <param name="origin"> (optional)</param>
        /// <param name="id">Multiple values may be separated by commas. (optional)</param>
        /// <param name="productManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="technicalContact">Multiple values may be separated by commas. (optional)</param>
        /// <param name="teamManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodType">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tid">Multiple values may be separated by commas. (optional)</param>
        /// <param name="authorizedUsers">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodNumericGrade">Multiple values may be separated by commas. (optional)</param>
        /// <param name="userRecords">Multiple values may be separated by commas. (optional)</param>
        /// <param name="regulations">Multiple values may be separated by commas. (optional)</param>
        /// <param name="activeFindingCount">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="created"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="revenue"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> ProductsListWithHttpInfo (string duplicate = null, string externalAudience = null, string internetAccessible = null, string name = null, string description = null, string businessCriticality = null, string platform = null, string lifecycle = null, string origin = null, decimal? id = null, decimal? productManager = null, decimal? technicalContact = null, decimal? teamManager = null, decimal? prodType = null, decimal? tid = null, decimal? authorizedUsers = null, decimal? prodNumericGrade = null, decimal? userRecords = null, decimal? regulations = null, decimal? activeFindingCount = null, string tag = null, string tags = null, string created = null, string updated = null, decimal? revenue = null, string o = null, int? limit = null, int? offset = null, List<string> prefetch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Product</returns>
        Product ProductsPartialUpdate (int? id, Product data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsPartialUpdateWithHttpInfo (int? id, Product data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 ProductsRead (int? id, List<string> prefetch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> ProductsReadWithHttpInfo (int? id, List<string> prefetch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Product</returns>
        Product ProductsUpdate (int? id, Product data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> ProductsUpdateWithHttpInfo (int? id, Product data);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsCreateAsync (Product data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsCreateAsyncWithHttpInfo (Product data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductsDeleteAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductsDeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Task of ReportGenerate</returns>
        System.Threading.Tasks.Task<ReportGenerate> ProductsGenerateReportAsync (int? id, ReportGenerateOption data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (ReportGenerate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportGenerate>> ProductsGenerateReportAsyncWithHttpInfo (int? id, ReportGenerateOption data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicate"> (optional)</param>
        /// <param name="externalAudience"> (optional)</param>
        /// <param name="internetAccessible"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="businessCriticality"> (optional)</param>
        /// <param name="platform"> (optional)</param>
        /// <param name="lifecycle"> (optional)</param>
        /// <param name="origin"> (optional)</param>
        /// <param name="id">Multiple values may be separated by commas. (optional)</param>
        /// <param name="productManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="technicalContact">Multiple values may be separated by commas. (optional)</param>
        /// <param name="teamManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodType">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tid">Multiple values may be separated by commas. (optional)</param>
        /// <param name="authorizedUsers">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodNumericGrade">Multiple values may be separated by commas. (optional)</param>
        /// <param name="userRecords">Multiple values may be separated by commas. (optional)</param>
        /// <param name="regulations">Multiple values may be separated by commas. (optional)</param>
        /// <param name="activeFindingCount">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="created"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="revenue"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> ProductsListAsync (string duplicate = null, string externalAudience = null, string internetAccessible = null, string name = null, string description = null, string businessCriticality = null, string platform = null, string lifecycle = null, string origin = null, decimal? id = null, decimal? productManager = null, decimal? technicalContact = null, decimal? teamManager = null, decimal? prodType = null, decimal? tid = null, decimal? authorizedUsers = null, decimal? prodNumericGrade = null, decimal? userRecords = null, decimal? regulations = null, decimal? activeFindingCount = null, string tag = null, string tags = null, string created = null, string updated = null, decimal? revenue = null, string o = null, int? limit = null, int? offset = null, List<string> prefetch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicate"> (optional)</param>
        /// <param name="externalAudience"> (optional)</param>
        /// <param name="internetAccessible"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="businessCriticality"> (optional)</param>
        /// <param name="platform"> (optional)</param>
        /// <param name="lifecycle"> (optional)</param>
        /// <param name="origin"> (optional)</param>
        /// <param name="id">Multiple values may be separated by commas. (optional)</param>
        /// <param name="productManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="technicalContact">Multiple values may be separated by commas. (optional)</param>
        /// <param name="teamManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodType">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tid">Multiple values may be separated by commas. (optional)</param>
        /// <param name="authorizedUsers">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodNumericGrade">Multiple values may be separated by commas. (optional)</param>
        /// <param name="userRecords">Multiple values may be separated by commas. (optional)</param>
        /// <param name="regulations">Multiple values may be separated by commas. (optional)</param>
        /// <param name="activeFindingCount">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="created"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="revenue"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> ProductsListAsyncWithHttpInfo (string duplicate = null, string externalAudience = null, string internetAccessible = null, string name = null, string description = null, string businessCriticality = null, string platform = null, string lifecycle = null, string origin = null, decimal? id = null, decimal? productManager = null, decimal? technicalContact = null, decimal? teamManager = null, decimal? prodType = null, decimal? tid = null, decimal? authorizedUsers = null, decimal? prodNumericGrade = null, decimal? userRecords = null, decimal? regulations = null, decimal? activeFindingCount = null, string tag = null, string tags = null, string created = null, string updated = null, decimal? revenue = null, string o = null, int? limit = null, int? offset = null, List<string> prefetch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsPartialUpdateAsync (int? id, Product data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsPartialUpdateAsyncWithHttpInfo (int? id, Product data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> ProductsReadAsync (int? id, List<string> prefetch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> ProductsReadAsyncWithHttpInfo (int? id, List<string> prefetch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> ProductsUpdateAsync (int? id, Product data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> ProductsUpdateAsyncWithHttpInfo (int? id, Product data);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductsApi : IProductsApi
    {
        private DefectDojo.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi(String basePath)
        {
            this.Configuration = new DefectDojo.Client.Configuration { BasePath = basePath };

            ExceptionFactory = DefectDojo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductsApi(DefectDojo.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = DefectDojo.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DefectDojo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DefectDojo.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DefectDojo.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Product</returns>
        public Product ProductsCreate (Product data)
        {
             ApiResponse<Product> localVarResponse = ProductsCreateWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductsCreateWithHttpInfo (Product data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling ProductsApi->ProductsCreate");

            var localVarPath = "./products/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsCreateAsync (Product data)
        {
             ApiResponse<Product> localVarResponse = await ProductsCreateAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductsCreateAsyncWithHttpInfo (Product data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling ProductsApi->ProductsCreate");

            var localVarPath = "./products/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <returns></returns>
        public void ProductsDelete (int? id)
        {
             ProductsDeleteWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProductsDeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsDelete");

            var localVarPath = "./products/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductsDeleteAsync (int? id)
        {
             await ProductsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProductsDeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsDelete");

            var localVarPath = "./products/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>ReportGenerate</returns>
        public ReportGenerate ProductsGenerateReport (int? id, ReportGenerateOption data)
        {
             ApiResponse<ReportGenerate> localVarResponse = ProductsGenerateReportWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of ReportGenerate</returns>
        public ApiResponse< ReportGenerate > ProductsGenerateReportWithHttpInfo (int? id, ReportGenerateOption data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsGenerateReport");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling ProductsApi->ProductsGenerateReport");

            var localVarPath = "./products/{id}/generate_report/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsGenerateReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportGenerate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ReportGenerate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportGenerate)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Task of ReportGenerate</returns>
        public async System.Threading.Tasks.Task<ReportGenerate> ProductsGenerateReportAsync (int? id, ReportGenerateOption data)
        {
             ApiResponse<ReportGenerate> localVarResponse = await ProductsGenerateReportAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (ReportGenerate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportGenerate>> ProductsGenerateReportAsyncWithHttpInfo (int? id, ReportGenerateOption data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsGenerateReport");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling ProductsApi->ProductsGenerateReport");

            var localVarPath = "./products/{id}/generate_report/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsGenerateReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportGenerate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ReportGenerate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportGenerate)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicate"> (optional)</param>
        /// <param name="externalAudience"> (optional)</param>
        /// <param name="internetAccessible"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="businessCriticality"> (optional)</param>
        /// <param name="platform"> (optional)</param>
        /// <param name="lifecycle"> (optional)</param>
        /// <param name="origin"> (optional)</param>
        /// <param name="id">Multiple values may be separated by commas. (optional)</param>
        /// <param name="productManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="technicalContact">Multiple values may be separated by commas. (optional)</param>
        /// <param name="teamManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodType">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tid">Multiple values may be separated by commas. (optional)</param>
        /// <param name="authorizedUsers">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodNumericGrade">Multiple values may be separated by commas. (optional)</param>
        /// <param name="userRecords">Multiple values may be separated by commas. (optional)</param>
        /// <param name="regulations">Multiple values may be separated by commas. (optional)</param>
        /// <param name="activeFindingCount">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="created"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="revenue"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 ProductsList (string duplicate = null, string externalAudience = null, string internetAccessible = null, string name = null, string description = null, string businessCriticality = null, string platform = null, string lifecycle = null, string origin = null, decimal? id = null, decimal? productManager = null, decimal? technicalContact = null, decimal? teamManager = null, decimal? prodType = null, decimal? tid = null, decimal? authorizedUsers = null, decimal? prodNumericGrade = null, decimal? userRecords = null, decimal? regulations = null, decimal? activeFindingCount = null, string tag = null, string tags = null, string created = null, string updated = null, decimal? revenue = null, string o = null, int? limit = null, int? offset = null, List<string> prefetch = null)
        {
             ApiResponse<InlineResponse20015> localVarResponse = ProductsListWithHttpInfo(duplicate, externalAudience, internetAccessible, name, description, businessCriticality, platform, lifecycle, origin, id, productManager, technicalContact, teamManager, prodType, tid, authorizedUsers, prodNumericGrade, userRecords, regulations, activeFindingCount, tag, tags, created, updated, revenue, o, limit, offset, prefetch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicate"> (optional)</param>
        /// <param name="externalAudience"> (optional)</param>
        /// <param name="internetAccessible"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="businessCriticality"> (optional)</param>
        /// <param name="platform"> (optional)</param>
        /// <param name="lifecycle"> (optional)</param>
        /// <param name="origin"> (optional)</param>
        /// <param name="id">Multiple values may be separated by commas. (optional)</param>
        /// <param name="productManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="technicalContact">Multiple values may be separated by commas. (optional)</param>
        /// <param name="teamManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodType">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tid">Multiple values may be separated by commas. (optional)</param>
        /// <param name="authorizedUsers">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodNumericGrade">Multiple values may be separated by commas. (optional)</param>
        /// <param name="userRecords">Multiple values may be separated by commas. (optional)</param>
        /// <param name="regulations">Multiple values may be separated by commas. (optional)</param>
        /// <param name="activeFindingCount">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="created"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="revenue"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > ProductsListWithHttpInfo (string duplicate = null, string externalAudience = null, string internetAccessible = null, string name = null, string description = null, string businessCriticality = null, string platform = null, string lifecycle = null, string origin = null, decimal? id = null, decimal? productManager = null, decimal? technicalContact = null, decimal? teamManager = null, decimal? prodType = null, decimal? tid = null, decimal? authorizedUsers = null, decimal? prodNumericGrade = null, decimal? userRecords = null, decimal? regulations = null, decimal? activeFindingCount = null, string tag = null, string tags = null, string created = null, string updated = null, decimal? revenue = null, string o = null, int? limit = null, int? offset = null, List<string> prefetch = null)
        {

            var localVarPath = "./products/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (duplicate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "duplicate", duplicate)); // query parameter
            if (externalAudience != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_audience", externalAudience)); // query parameter
            if (internetAccessible != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "internet_accessible", internetAccessible)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (businessCriticality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_criticality", businessCriticality)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter
            if (lifecycle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lifecycle", lifecycle)); // query parameter
            if (origin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "origin", origin)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (productManager != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_manager", productManager)); // query parameter
            if (technicalContact != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "technical_contact", technicalContact)); // query parameter
            if (teamManager != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team_manager", teamManager)); // query parameter
            if (prodType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prod_type", prodType)); // query parameter
            if (tid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tid", tid)); // query parameter
            if (authorizedUsers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authorized_users", authorizedUsers)); // query parameter
            if (prodNumericGrade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prod_numeric_grade", prodNumericGrade)); // query parameter
            if (userRecords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_records", userRecords)); // query parameter
            if (regulations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "regulations", regulations)); // query parameter
            if (activeFindingCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_finding_count", activeFindingCount)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (created != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created", created)); // query parameter
            if (updated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated", updated)); // query parameter
            if (revenue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "revenue", revenue)); // query parameter
            if (o != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "o", o)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (prefetch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "prefetch", prefetch)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse20015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicate"> (optional)</param>
        /// <param name="externalAudience"> (optional)</param>
        /// <param name="internetAccessible"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="businessCriticality"> (optional)</param>
        /// <param name="platform"> (optional)</param>
        /// <param name="lifecycle"> (optional)</param>
        /// <param name="origin"> (optional)</param>
        /// <param name="id">Multiple values may be separated by commas. (optional)</param>
        /// <param name="productManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="technicalContact">Multiple values may be separated by commas. (optional)</param>
        /// <param name="teamManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodType">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tid">Multiple values may be separated by commas. (optional)</param>
        /// <param name="authorizedUsers">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodNumericGrade">Multiple values may be separated by commas. (optional)</param>
        /// <param name="userRecords">Multiple values may be separated by commas. (optional)</param>
        /// <param name="regulations">Multiple values may be separated by commas. (optional)</param>
        /// <param name="activeFindingCount">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="created"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="revenue"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> ProductsListAsync (string duplicate = null, string externalAudience = null, string internetAccessible = null, string name = null, string description = null, string businessCriticality = null, string platform = null, string lifecycle = null, string origin = null, decimal? id = null, decimal? productManager = null, decimal? technicalContact = null, decimal? teamManager = null, decimal? prodType = null, decimal? tid = null, decimal? authorizedUsers = null, decimal? prodNumericGrade = null, decimal? userRecords = null, decimal? regulations = null, decimal? activeFindingCount = null, string tag = null, string tags = null, string created = null, string updated = null, decimal? revenue = null, string o = null, int? limit = null, int? offset = null, List<string> prefetch = null)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await ProductsListAsyncWithHttpInfo(duplicate, externalAudience, internetAccessible, name, description, businessCriticality, platform, lifecycle, origin, id, productManager, technicalContact, teamManager, prodType, tid, authorizedUsers, prodNumericGrade, userRecords, regulations, activeFindingCount, tag, tags, created, updated, revenue, o, limit, offset, prefetch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicate"> (optional)</param>
        /// <param name="externalAudience"> (optional)</param>
        /// <param name="internetAccessible"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="businessCriticality"> (optional)</param>
        /// <param name="platform"> (optional)</param>
        /// <param name="lifecycle"> (optional)</param>
        /// <param name="origin"> (optional)</param>
        /// <param name="id">Multiple values may be separated by commas. (optional)</param>
        /// <param name="productManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="technicalContact">Multiple values may be separated by commas. (optional)</param>
        /// <param name="teamManager">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodType">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tid">Multiple values may be separated by commas. (optional)</param>
        /// <param name="authorizedUsers">Multiple values may be separated by commas. (optional)</param>
        /// <param name="prodNumericGrade">Multiple values may be separated by commas. (optional)</param>
        /// <param name="userRecords">Multiple values may be separated by commas. (optional)</param>
        /// <param name="regulations">Multiple values may be separated by commas. (optional)</param>
        /// <param name="activeFindingCount">Multiple values may be separated by commas. (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="created"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="revenue"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> ProductsListAsyncWithHttpInfo (string duplicate = null, string externalAudience = null, string internetAccessible = null, string name = null, string description = null, string businessCriticality = null, string platform = null, string lifecycle = null, string origin = null, decimal? id = null, decimal? productManager = null, decimal? technicalContact = null, decimal? teamManager = null, decimal? prodType = null, decimal? tid = null, decimal? authorizedUsers = null, decimal? prodNumericGrade = null, decimal? userRecords = null, decimal? regulations = null, decimal? activeFindingCount = null, string tag = null, string tags = null, string created = null, string updated = null, decimal? revenue = null, string o = null, int? limit = null, int? offset = null, List<string> prefetch = null)
        {

            var localVarPath = "./products/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (duplicate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "duplicate", duplicate)); // query parameter
            if (externalAudience != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_audience", externalAudience)); // query parameter
            if (internetAccessible != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "internet_accessible", internetAccessible)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "description", description)); // query parameter
            if (businessCriticality != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "business_criticality", businessCriticality)); // query parameter
            if (platform != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "platform", platform)); // query parameter
            if (lifecycle != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lifecycle", lifecycle)); // query parameter
            if (origin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "origin", origin)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (productManager != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product_manager", productManager)); // query parameter
            if (technicalContact != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "technical_contact", technicalContact)); // query parameter
            if (teamManager != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "team_manager", teamManager)); // query parameter
            if (prodType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prod_type", prodType)); // query parameter
            if (tid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tid", tid)); // query parameter
            if (authorizedUsers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authorized_users", authorizedUsers)); // query parameter
            if (prodNumericGrade != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prod_numeric_grade", prodNumericGrade)); // query parameter
            if (userRecords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_records", userRecords)); // query parameter
            if (regulations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "regulations", regulations)); // query parameter
            if (activeFindingCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_finding_count", activeFindingCount)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (created != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created", created)); // query parameter
            if (updated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated", updated)); // query parameter
            if (revenue != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "revenue", revenue)); // query parameter
            if (o != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "o", o)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (prefetch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "prefetch", prefetch)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse20015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Product</returns>
        public Product ProductsPartialUpdate (int? id, Product data)
        {
             ApiResponse<Product> localVarResponse = ProductsPartialUpdateWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductsPartialUpdateWithHttpInfo (int? id, Product data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsPartialUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling ProductsApi->ProductsPartialUpdate");

            var localVarPath = "./products/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsPartialUpdateAsync (int? id, Product data)
        {
             ApiResponse<Product> localVarResponse = await ProductsPartialUpdateAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductsPartialUpdateAsyncWithHttpInfo (int? id, Product data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsPartialUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling ProductsApi->ProductsPartialUpdate");

            var localVarPath = "./products/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 ProductsRead (int? id, List<string> prefetch = null)
        {
             ApiResponse<InlineResponse20016> localVarResponse = ProductsReadWithHttpInfo(id, prefetch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public ApiResponse< InlineResponse20016 > ProductsReadWithHttpInfo (int? id, List<string> prefetch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsRead");

            var localVarPath = "./products/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (prefetch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "prefetch", prefetch)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse20016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> ProductsReadAsync (int? id, List<string> prefetch = null)
        {
             ApiResponse<InlineResponse20016> localVarResponse = await ProductsReadAsyncWithHttpInfo(id, prefetch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="prefetch"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> ProductsReadAsyncWithHttpInfo (int? id, List<string> prefetch = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsRead");

            var localVarPath = "./products/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (prefetch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "prefetch", prefetch)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse20016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Product</returns>
        public Product ProductsUpdate (int? id, Product data)
        {
             ApiResponse<Product> localVarResponse = ProductsUpdateWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > ProductsUpdateWithHttpInfo (int? id, Product data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling ProductsApi->ProductsUpdate");

            var localVarPath = "./products/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> ProductsUpdateAsync (int? id, Product data)
        {
             ApiResponse<Product> localVarResponse = await ProductsUpdateAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this product.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> ProductsUpdateAsyncWithHttpInfo (int? id, Product data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProductsApi->ProductsUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling ProductsApi->ProductsUpdate");

            var localVarPath = "./products/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Product) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
        }

    }
}
