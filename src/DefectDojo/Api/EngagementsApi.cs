/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using DefectDojo.Client;
using DefectDojo.Model;

namespace DefectDojo.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEngagementsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>RiskAcceptance</returns>
        RiskAcceptance EngagementsAcceptRisks (int? id, List<AcceptedRisk> data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of RiskAcceptance</returns>
        ApiResponse<RiskAcceptance> EngagementsAcceptRisksWithHttpInfo (int? id, List<AcceptedRisk> data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns></returns>
        void EngagementsClose (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EngagementsCloseWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Engagement</returns>
        Engagement EngagementsCreate (Engagement data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Engagement</returns>
        ApiResponse<Engagement> EngagementsCreateWithHttpInfo (Engagement data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns></returns>
        void EngagementsDelete (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EngagementsDeleteWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ModelFile</returns>
        ModelFile EngagementsFilesCreate (int? id, AddNewFileOption data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of ModelFile</returns>
        ApiResponse<ModelFile> EngagementsFilesCreateWithHttpInfo (int? id, AddNewFileOption data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ModelFile</returns>
        ModelFile EngagementsFilesPartialUpdate (int? id, AddNewFileOption data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of ModelFile</returns>
        ApiResponse<ModelFile> EngagementsFilesPartialUpdateWithHttpInfo (int? id, AddNewFileOption data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>EngagementToFiles</returns>
        EngagementToFiles EngagementsFilesRead (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>ApiResponse of EngagementToFiles</returns>
        ApiResponse<EngagementToFiles> EngagementsFilesReadWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ReportGenerate</returns>
        ReportGenerate EngagementsGenerateReport (int? id, ReportGenerateOption data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of ReportGenerate</returns>
        ApiResponse<ReportGenerate> EngagementsGenerateReportWithHttpInfo (int? id, ReportGenerateOption data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="active"> (optional)</param>
        /// <param name="engType"> (optional)</param>
        /// <param name="targetStart"> (optional)</param>
        /// <param name="targetEnd"> (optional)</param>
        /// <param name="requester"> (optional)</param>
        /// <param name="reportType"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="threatModel"> (optional)</param>
        /// <param name="apiTest"> (optional)</param>
        /// <param name="penTest"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 EngagementsList (decimal? id = null, string active = null, string engType = null, string targetStart = null, string targetEnd = null, string requester = null, string reportType = null, string updated = null, string threatModel = null, string apiTest = null, string penTest = null, string status = null, string product = null, string name = null, string version = null, string tags = null, string o = null, int? limit = null, int? offset = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="active"> (optional)</param>
        /// <param name="engType"> (optional)</param>
        /// <param name="targetStart"> (optional)</param>
        /// <param name="targetEnd"> (optional)</param>
        /// <param name="requester"> (optional)</param>
        /// <param name="reportType"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="threatModel"> (optional)</param>
        /// <param name="apiTest"> (optional)</param>
        /// <param name="penTest"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> EngagementsListWithHttpInfo (decimal? id = null, string active = null, string engType = null, string targetStart = null, string targetEnd = null, string requester = null, string reportType = null, string updated = null, string threatModel = null, string apiTest = null, string penTest = null, string status = null, string product = null, string name = null, string version = null, string tags = null, string o = null, int? limit = null, int? offset = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Engagement</returns>
        Engagement EngagementsNotesCreate (int? id, Engagement data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Engagement</returns>
        ApiResponse<Engagement> EngagementsNotesCreateWithHttpInfo (int? id, Engagement data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Engagement</returns>
        Engagement EngagementsNotesPartialUpdate (int? id, Engagement data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Engagement</returns>
        ApiResponse<Engagement> EngagementsNotesPartialUpdateWithHttpInfo (int? id, Engagement data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Engagement</returns>
        Engagement EngagementsNotesRead (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>ApiResponse of Engagement</returns>
        ApiResponse<Engagement> EngagementsNotesReadWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Engagement</returns>
        Engagement EngagementsPartialUpdate (int? id, Engagement data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Engagement</returns>
        ApiResponse<Engagement> EngagementsPartialUpdateWithHttpInfo (int? id, Engagement data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Engagement</returns>
        Engagement EngagementsRead (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>ApiResponse of Engagement</returns>
        ApiResponse<Engagement> EngagementsReadWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns></returns>
        void EngagementsReopen (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EngagementsReopenWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Engagement</returns>
        Engagement EngagementsUpdate (int? id, Engagement data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Engagement</returns>
        ApiResponse<Engagement> EngagementsUpdateWithHttpInfo (int? id, Engagement data);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of RiskAcceptance</returns>
        System.Threading.Tasks.Task<RiskAcceptance> EngagementsAcceptRisksAsync (int? id, List<AcceptedRisk> data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (RiskAcceptance)</returns>
        System.Threading.Tasks.Task<ApiResponse<RiskAcceptance>> EngagementsAcceptRisksAsyncWithHttpInfo (int? id, List<AcceptedRisk> data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EngagementsCloseAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EngagementsCloseAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of Engagement</returns>
        System.Threading.Tasks.Task<Engagement> EngagementsCreateAsync (Engagement data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Engagement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Engagement>> EngagementsCreateAsyncWithHttpInfo (Engagement data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EngagementsDeleteAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EngagementsDeleteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ModelFile</returns>
        System.Threading.Tasks.Task<ModelFile> EngagementsFilesCreateAsync (int? id, AddNewFileOption data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (ModelFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelFile>> EngagementsFilesCreateAsyncWithHttpInfo (int? id, AddNewFileOption data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ModelFile</returns>
        System.Threading.Tasks.Task<ModelFile> EngagementsFilesPartialUpdateAsync (int? id, AddNewFileOption data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (ModelFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelFile>> EngagementsFilesPartialUpdateAsyncWithHttpInfo (int? id, AddNewFileOption data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of EngagementToFiles</returns>
        System.Threading.Tasks.Task<EngagementToFiles> EngagementsFilesReadAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of ApiResponse (EngagementToFiles)</returns>
        System.Threading.Tasks.Task<ApiResponse<EngagementToFiles>> EngagementsFilesReadAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ReportGenerate</returns>
        System.Threading.Tasks.Task<ReportGenerate> EngagementsGenerateReportAsync (int? id, ReportGenerateOption data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (ReportGenerate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportGenerate>> EngagementsGenerateReportAsyncWithHttpInfo (int? id, ReportGenerateOption data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="active"> (optional)</param>
        /// <param name="engType"> (optional)</param>
        /// <param name="targetStart"> (optional)</param>
        /// <param name="targetEnd"> (optional)</param>
        /// <param name="requester"> (optional)</param>
        /// <param name="reportType"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="threatModel"> (optional)</param>
        /// <param name="apiTest"> (optional)</param>
        /// <param name="penTest"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> EngagementsListAsync (decimal? id = null, string active = null, string engType = null, string targetStart = null, string targetEnd = null, string requester = null, string reportType = null, string updated = null, string threatModel = null, string apiTest = null, string penTest = null, string status = null, string product = null, string name = null, string version = null, string tags = null, string o = null, int? limit = null, int? offset = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="active"> (optional)</param>
        /// <param name="engType"> (optional)</param>
        /// <param name="targetStart"> (optional)</param>
        /// <param name="targetEnd"> (optional)</param>
        /// <param name="requester"> (optional)</param>
        /// <param name="reportType"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="threatModel"> (optional)</param>
        /// <param name="apiTest"> (optional)</param>
        /// <param name="penTest"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> EngagementsListAsyncWithHttpInfo (decimal? id = null, string active = null, string engType = null, string targetStart = null, string targetEnd = null, string requester = null, string reportType = null, string updated = null, string threatModel = null, string apiTest = null, string penTest = null, string status = null, string product = null, string name = null, string version = null, string tags = null, string o = null, int? limit = null, int? offset = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of Engagement</returns>
        System.Threading.Tasks.Task<Engagement> EngagementsNotesCreateAsync (int? id, Engagement data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Engagement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Engagement>> EngagementsNotesCreateAsyncWithHttpInfo (int? id, Engagement data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of Engagement</returns>
        System.Threading.Tasks.Task<Engagement> EngagementsNotesPartialUpdateAsync (int? id, Engagement data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Engagement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Engagement>> EngagementsNotesPartialUpdateAsyncWithHttpInfo (int? id, Engagement data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of Engagement</returns>
        System.Threading.Tasks.Task<Engagement> EngagementsNotesReadAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of ApiResponse (Engagement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Engagement>> EngagementsNotesReadAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of Engagement</returns>
        System.Threading.Tasks.Task<Engagement> EngagementsPartialUpdateAsync (int? id, Engagement data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Engagement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Engagement>> EngagementsPartialUpdateAsyncWithHttpInfo (int? id, Engagement data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of Engagement</returns>
        System.Threading.Tasks.Task<Engagement> EngagementsReadAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of ApiResponse (Engagement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Engagement>> EngagementsReadAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EngagementsReopenAsync (int? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EngagementsReopenAsyncWithHttpInfo (int? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of Engagement</returns>
        System.Threading.Tasks.Task<Engagement> EngagementsUpdateAsync (int? id, Engagement data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Engagement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Engagement>> EngagementsUpdateAsyncWithHttpInfo (int? id, Engagement data);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EngagementsApi : IEngagementsApi
    {
        private DefectDojo.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EngagementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EngagementsApi(String basePath)
        {
            this.Configuration = new DefectDojo.Client.Configuration { BasePath = basePath };

            ExceptionFactory = DefectDojo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EngagementsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EngagementsApi(DefectDojo.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = DefectDojo.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DefectDojo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DefectDojo.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DefectDojo.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>RiskAcceptance</returns>
        public RiskAcceptance EngagementsAcceptRisks (int? id, List<AcceptedRisk> data)
        {
             ApiResponse<RiskAcceptance> localVarResponse = EngagementsAcceptRisksWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of RiskAcceptance</returns>
        public ApiResponse< RiskAcceptance > EngagementsAcceptRisksWithHttpInfo (int? id, List<AcceptedRisk> data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsAcceptRisks");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsAcceptRisks");

            var localVarPath = "./engagements/{id}/accept_risks/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsAcceptRisks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RiskAcceptance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RiskAcceptance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RiskAcceptance)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of RiskAcceptance</returns>
        public async System.Threading.Tasks.Task<RiskAcceptance> EngagementsAcceptRisksAsync (int? id, List<AcceptedRisk> data)
        {
             ApiResponse<RiskAcceptance> localVarResponse = await EngagementsAcceptRisksAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (RiskAcceptance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RiskAcceptance>> EngagementsAcceptRisksAsyncWithHttpInfo (int? id, List<AcceptedRisk> data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsAcceptRisks");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsAcceptRisks");

            var localVarPath = "./engagements/{id}/accept_risks/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsAcceptRisks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RiskAcceptance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RiskAcceptance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RiskAcceptance)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns></returns>
        public void EngagementsClose (int? id)
        {
             EngagementsCloseWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EngagementsCloseWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsClose");

            var localVarPath = "./engagements/{id}/close/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsClose", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EngagementsCloseAsync (int? id)
        {
             await EngagementsCloseAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EngagementsCloseAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsClose");

            var localVarPath = "./engagements/{id}/close/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsClose", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Engagement</returns>
        public Engagement EngagementsCreate (Engagement data)
        {
             ApiResponse<Engagement> localVarResponse = EngagementsCreateWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Engagement</returns>
        public ApiResponse< Engagement > EngagementsCreateWithHttpInfo (Engagement data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsCreate");

            var localVarPath = "./engagements/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Engagement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Engagement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Engagement)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of Engagement</returns>
        public async System.Threading.Tasks.Task<Engagement> EngagementsCreateAsync (Engagement data)
        {
             ApiResponse<Engagement> localVarResponse = await EngagementsCreateAsyncWithHttpInfo(data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Engagement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Engagement>> EngagementsCreateAsyncWithHttpInfo (Engagement data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsCreate");

            var localVarPath = "./engagements/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Engagement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Engagement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Engagement)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns></returns>
        public void EngagementsDelete (int? id)
        {
             EngagementsDeleteWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EngagementsDeleteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsDelete");

            var localVarPath = "./engagements/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EngagementsDeleteAsync (int? id)
        {
             await EngagementsDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EngagementsDeleteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsDelete");

            var localVarPath = "./engagements/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ModelFile</returns>
        public ModelFile EngagementsFilesCreate (int? id, AddNewFileOption data)
        {
             ApiResponse<ModelFile> localVarResponse = EngagementsFilesCreateWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of ModelFile</returns>
        public ApiResponse< ModelFile > EngagementsFilesCreateWithHttpInfo (int? id, AddNewFileOption data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsFilesCreate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsFilesCreate");

            var localVarPath = "./engagements/{id}/files/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsFilesCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ModelFile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelFile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ModelFile</returns>
        public async System.Threading.Tasks.Task<ModelFile> EngagementsFilesCreateAsync (int? id, AddNewFileOption data)
        {
             ApiResponse<ModelFile> localVarResponse = await EngagementsFilesCreateAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (ModelFile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelFile>> EngagementsFilesCreateAsyncWithHttpInfo (int? id, AddNewFileOption data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsFilesCreate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsFilesCreate");

            var localVarPath = "./engagements/{id}/files/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsFilesCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ModelFile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelFile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ModelFile</returns>
        public ModelFile EngagementsFilesPartialUpdate (int? id, AddNewFileOption data)
        {
             ApiResponse<ModelFile> localVarResponse = EngagementsFilesPartialUpdateWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of ModelFile</returns>
        public ApiResponse< ModelFile > EngagementsFilesPartialUpdateWithHttpInfo (int? id, AddNewFileOption data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsFilesPartialUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsFilesPartialUpdate");

            var localVarPath = "./engagements/{id}/files/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsFilesPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ModelFile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelFile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ModelFile</returns>
        public async System.Threading.Tasks.Task<ModelFile> EngagementsFilesPartialUpdateAsync (int? id, AddNewFileOption data)
        {
             ApiResponse<ModelFile> localVarResponse = await EngagementsFilesPartialUpdateAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (ModelFile)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelFile>> EngagementsFilesPartialUpdateAsyncWithHttpInfo (int? id, AddNewFileOption data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsFilesPartialUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsFilesPartialUpdate");

            var localVarPath = "./engagements/{id}/files/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsFilesPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelFile>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ModelFile) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelFile)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>EngagementToFiles</returns>
        public EngagementToFiles EngagementsFilesRead (int? id)
        {
             ApiResponse<EngagementToFiles> localVarResponse = EngagementsFilesReadWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>ApiResponse of EngagementToFiles</returns>
        public ApiResponse< EngagementToFiles > EngagementsFilesReadWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsFilesRead");

            var localVarPath = "./engagements/{id}/files/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsFilesRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EngagementToFiles>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EngagementToFiles) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EngagementToFiles)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of EngagementToFiles</returns>
        public async System.Threading.Tasks.Task<EngagementToFiles> EngagementsFilesReadAsync (int? id)
        {
             ApiResponse<EngagementToFiles> localVarResponse = await EngagementsFilesReadAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of ApiResponse (EngagementToFiles)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EngagementToFiles>> EngagementsFilesReadAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsFilesRead");

            var localVarPath = "./engagements/{id}/files/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsFilesRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EngagementToFiles>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EngagementToFiles) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EngagementToFiles)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ReportGenerate</returns>
        public ReportGenerate EngagementsGenerateReport (int? id, ReportGenerateOption data)
        {
             ApiResponse<ReportGenerate> localVarResponse = EngagementsGenerateReportWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of ReportGenerate</returns>
        public ApiResponse< ReportGenerate > EngagementsGenerateReportWithHttpInfo (int? id, ReportGenerateOption data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsGenerateReport");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsGenerateReport");

            var localVarPath = "./engagements/{id}/generate_report/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsGenerateReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportGenerate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ReportGenerate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportGenerate)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ReportGenerate</returns>
        public async System.Threading.Tasks.Task<ReportGenerate> EngagementsGenerateReportAsync (int? id, ReportGenerateOption data)
        {
             ApiResponse<ReportGenerate> localVarResponse = await EngagementsGenerateReportAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (ReportGenerate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportGenerate>> EngagementsGenerateReportAsyncWithHttpInfo (int? id, ReportGenerateOption data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsGenerateReport");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsGenerateReport");

            var localVarPath = "./engagements/{id}/generate_report/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsGenerateReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportGenerate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ReportGenerate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportGenerate)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="active"> (optional)</param>
        /// <param name="engType"> (optional)</param>
        /// <param name="targetStart"> (optional)</param>
        /// <param name="targetEnd"> (optional)</param>
        /// <param name="requester"> (optional)</param>
        /// <param name="reportType"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="threatModel"> (optional)</param>
        /// <param name="apiTest"> (optional)</param>
        /// <param name="penTest"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 EngagementsList (decimal? id = null, string active = null, string engType = null, string targetStart = null, string targetEnd = null, string requester = null, string reportType = null, string updated = null, string threatModel = null, string apiTest = null, string penTest = null, string status = null, string product = null, string name = null, string version = null, string tags = null, string o = null, int? limit = null, int? offset = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = EngagementsListWithHttpInfo(id, active, engType, targetStart, targetEnd, requester, reportType, updated, threatModel, apiTest, penTest, status, product, name, version, tags, o, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="active"> (optional)</param>
        /// <param name="engType"> (optional)</param>
        /// <param name="targetStart"> (optional)</param>
        /// <param name="targetEnd"> (optional)</param>
        /// <param name="requester"> (optional)</param>
        /// <param name="reportType"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="threatModel"> (optional)</param>
        /// <param name="apiTest"> (optional)</param>
        /// <param name="penTest"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > EngagementsListWithHttpInfo (decimal? id = null, string active = null, string engType = null, string targetStart = null, string targetEnd = null, string requester = null, string reportType = null, string updated = null, string threatModel = null, string apiTest = null, string penTest = null, string status = null, string product = null, string name = null, string version = null, string tags = null, string o = null, int? limit = null, int? offset = null)
        {

            var localVarPath = "./engagements/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (engType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eng_type", engType)); // query parameter
            if (targetStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_start", targetStart)); // query parameter
            if (targetEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_end", targetEnd)); // query parameter
            if (requester != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requester", requester)); // query parameter
            if (reportType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "report_type", reportType)); // query parameter
            if (updated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated", updated)); // query parameter
            if (threatModel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "threat_model", threatModel)); // query parameter
            if (apiTest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_test", apiTest)); // query parameter
            if (penTest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pen_test", penTest)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (product != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product", product)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (o != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "o", o)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="active"> (optional)</param>
        /// <param name="engType"> (optional)</param>
        /// <param name="targetStart"> (optional)</param>
        /// <param name="targetEnd"> (optional)</param>
        /// <param name="requester"> (optional)</param>
        /// <param name="reportType"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="threatModel"> (optional)</param>
        /// <param name="apiTest"> (optional)</param>
        /// <param name="penTest"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> EngagementsListAsync (decimal? id = null, string active = null, string engType = null, string targetStart = null, string targetEnd = null, string requester = null, string reportType = null, string updated = null, string threatModel = null, string apiTest = null, string penTest = null, string status = null, string product = null, string name = null, string version = null, string tags = null, string o = null, int? limit = null, int? offset = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await EngagementsListAsyncWithHttpInfo(id, active, engType, targetStart, targetEnd, requester, reportType, updated, threatModel, apiTest, penTest, status, product, name, version, tags, o, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="active"> (optional)</param>
        /// <param name="engType"> (optional)</param>
        /// <param name="targetStart"> (optional)</param>
        /// <param name="targetEnd"> (optional)</param>
        /// <param name="requester"> (optional)</param>
        /// <param name="reportType"> (optional)</param>
        /// <param name="updated"> (optional)</param>
        /// <param name="threatModel"> (optional)</param>
        /// <param name="apiTest"> (optional)</param>
        /// <param name="penTest"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="product"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="o"> (optional)</param>
        /// <param name="limit">Number of results to return per page. (optional)</param>
        /// <param name="offset">The initial index from which to return the results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> EngagementsListAsyncWithHttpInfo (decimal? id = null, string active = null, string engType = null, string targetStart = null, string targetEnd = null, string requester = null, string reportType = null, string updated = null, string threatModel = null, string apiTest = null, string penTest = null, string status = null, string product = null, string name = null, string version = null, string tags = null, string o = null, int? limit = null, int? offset = null)
        {

            var localVarPath = "./engagements/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (engType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eng_type", engType)); // query parameter
            if (targetStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_start", targetStart)); // query parameter
            if (targetEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_end", targetEnd)); // query parameter
            if (requester != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requester", requester)); // query parameter
            if (reportType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "report_type", reportType)); // query parameter
            if (updated != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updated", updated)); // query parameter
            if (threatModel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "threat_model", threatModel)); // query parameter
            if (apiTest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_test", apiTest)); // query parameter
            if (penTest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pen_test", penTest)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (product != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "product", product)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (o != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "o", o)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Engagement</returns>
        public Engagement EngagementsNotesCreate (int? id, Engagement data)
        {
             ApiResponse<Engagement> localVarResponse = EngagementsNotesCreateWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Engagement</returns>
        public ApiResponse< Engagement > EngagementsNotesCreateWithHttpInfo (int? id, Engagement data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsNotesCreate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsNotesCreate");

            var localVarPath = "./engagements/{id}/notes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsNotesCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Engagement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Engagement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Engagement)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of Engagement</returns>
        public async System.Threading.Tasks.Task<Engagement> EngagementsNotesCreateAsync (int? id, Engagement data)
        {
             ApiResponse<Engagement> localVarResponse = await EngagementsNotesCreateAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Engagement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Engagement>> EngagementsNotesCreateAsyncWithHttpInfo (int? id, Engagement data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsNotesCreate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsNotesCreate");

            var localVarPath = "./engagements/{id}/notes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsNotesCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Engagement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Engagement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Engagement)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Engagement</returns>
        public Engagement EngagementsNotesPartialUpdate (int? id, Engagement data)
        {
             ApiResponse<Engagement> localVarResponse = EngagementsNotesPartialUpdateWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Engagement</returns>
        public ApiResponse< Engagement > EngagementsNotesPartialUpdateWithHttpInfo (int? id, Engagement data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsNotesPartialUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsNotesPartialUpdate");

            var localVarPath = "./engagements/{id}/notes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsNotesPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Engagement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Engagement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Engagement)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of Engagement</returns>
        public async System.Threading.Tasks.Task<Engagement> EngagementsNotesPartialUpdateAsync (int? id, Engagement data)
        {
             ApiResponse<Engagement> localVarResponse = await EngagementsNotesPartialUpdateAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Engagement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Engagement>> EngagementsNotesPartialUpdateAsyncWithHttpInfo (int? id, Engagement data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsNotesPartialUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsNotesPartialUpdate");

            var localVarPath = "./engagements/{id}/notes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsNotesPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Engagement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Engagement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Engagement)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Engagement</returns>
        public Engagement EngagementsNotesRead (int? id)
        {
             ApiResponse<Engagement> localVarResponse = EngagementsNotesReadWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>ApiResponse of Engagement</returns>
        public ApiResponse< Engagement > EngagementsNotesReadWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsNotesRead");

            var localVarPath = "./engagements/{id}/notes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsNotesRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Engagement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Engagement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Engagement)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of Engagement</returns>
        public async System.Threading.Tasks.Task<Engagement> EngagementsNotesReadAsync (int? id)
        {
             ApiResponse<Engagement> localVarResponse = await EngagementsNotesReadAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of ApiResponse (Engagement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Engagement>> EngagementsNotesReadAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsNotesRead");

            var localVarPath = "./engagements/{id}/notes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsNotesRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Engagement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Engagement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Engagement)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Engagement</returns>
        public Engagement EngagementsPartialUpdate (int? id, Engagement data)
        {
             ApiResponse<Engagement> localVarResponse = EngagementsPartialUpdateWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Engagement</returns>
        public ApiResponse< Engagement > EngagementsPartialUpdateWithHttpInfo (int? id, Engagement data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsPartialUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsPartialUpdate");

            var localVarPath = "./engagements/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Engagement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Engagement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Engagement)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of Engagement</returns>
        public async System.Threading.Tasks.Task<Engagement> EngagementsPartialUpdateAsync (int? id, Engagement data)
        {
             ApiResponse<Engagement> localVarResponse = await EngagementsPartialUpdateAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Engagement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Engagement>> EngagementsPartialUpdateAsyncWithHttpInfo (int? id, Engagement data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsPartialUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsPartialUpdate");

            var localVarPath = "./engagements/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsPartialUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Engagement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Engagement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Engagement)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Engagement</returns>
        public Engagement EngagementsRead (int? id)
        {
             ApiResponse<Engagement> localVarResponse = EngagementsReadWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>ApiResponse of Engagement</returns>
        public ApiResponse< Engagement > EngagementsReadWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsRead");

            var localVarPath = "./engagements/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Engagement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Engagement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Engagement)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of Engagement</returns>
        public async System.Threading.Tasks.Task<Engagement> EngagementsReadAsync (int? id)
        {
             ApiResponse<Engagement> localVarResponse = await EngagementsReadAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of ApiResponse (Engagement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Engagement>> EngagementsReadAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsRead");

            var localVarPath = "./engagements/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Engagement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Engagement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Engagement)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns></returns>
        public void EngagementsReopen (int? id)
        {
             EngagementsReopenWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EngagementsReopenWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsReopen");

            var localVarPath = "./engagements/{id}/reopen/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsReopen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EngagementsReopenAsync (int? id)
        {
             await EngagementsReopenAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EngagementsReopenAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsReopen");

            var localVarPath = "./engagements/{id}/reopen/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsReopen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Engagement</returns>
        public Engagement EngagementsUpdate (int? id, Engagement data)
        {
             ApiResponse<Engagement> localVarResponse = EngagementsUpdateWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of Engagement</returns>
        public ApiResponse< Engagement > EngagementsUpdateWithHttpInfo (int? id, Engagement data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsUpdate");

            var localVarPath = "./engagements/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Engagement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Engagement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Engagement)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of Engagement</returns>
        public async System.Threading.Tasks.Task<Engagement> EngagementsUpdateAsync (int? id, Engagement data)
        {
             ApiResponse<Engagement> localVarResponse = await EngagementsUpdateAsyncWithHttpInfo(id, data);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A unique integer value identifying this engagement.</param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (Engagement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Engagement>> EngagementsUpdateAsyncWithHttpInfo (int? id, Engagement data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EngagementsApi->EngagementsUpdate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling EngagementsApi->EngagementsUpdate");

            var localVarPath = "./engagements/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EngagementsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Engagement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Engagement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Engagement)));
        }

    }
}
