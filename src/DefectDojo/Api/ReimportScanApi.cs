/* 
 * Defect Dojo API
 *
 * To use the API you need be authorized.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using DefectDojo.Client;
using DefectDojo.Model;

namespace DefectDojo.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReimportScanApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanDate"></param>
        /// <param name="scanType"></param>
        /// <param name="test"></param>
        /// <param name="minimumSeverity"> (optional, default to Info)</param>
        /// <param name="active"> (optional, default to true)</param>
        /// <param name="verified"> (optional, default to true)</param>
        /// <param name="endpointToAdd"> (optional)</param>
        /// <param name="_file"> (optional)</param>
        /// <param name="pushToJira"> (optional, default to false)</param>
        /// <param name="closeOldFindings"> (optional, default to true)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="buildId"> (optional)</param>
        /// <param name="branchTag"> (optional)</param>
        /// <param name="commitHash"> (optional)</param>
        /// <returns>ReImportScan</returns>
        ReImportScan ReimportScanCreate (DateTime? scanDate, string scanType, int? test, string minimumSeverity = null, bool? active = null, bool? verified = null, int? endpointToAdd = null, ModelFile _file = null, bool? pushToJira = null, bool? closeOldFindings = null, string version = null, string buildId = null, string branchTag = null, string commitHash = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanDate"></param>
        /// <param name="scanType"></param>
        /// <param name="test"></param>
        /// <param name="minimumSeverity"> (optional, default to Info)</param>
        /// <param name="active"> (optional, default to true)</param>
        /// <param name="verified"> (optional, default to true)</param>
        /// <param name="endpointToAdd"> (optional)</param>
        /// <param name="_file"> (optional)</param>
        /// <param name="pushToJira"> (optional, default to false)</param>
        /// <param name="closeOldFindings"> (optional, default to true)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="buildId"> (optional)</param>
        /// <param name="branchTag"> (optional)</param>
        /// <param name="commitHash"> (optional)</param>
        /// <returns>ApiResponse of ReImportScan</returns>
        ApiResponse<ReImportScan> ReimportScanCreateWithHttpInfo (DateTime? scanDate, string scanType, int? test, string minimumSeverity = null, bool? active = null, bool? verified = null, int? endpointToAdd = null, ModelFile _file = null, bool? pushToJira = null, bool? closeOldFindings = null, string version = null, string buildId = null, string branchTag = null, string commitHash = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanDate"></param>
        /// <param name="scanType"></param>
        /// <param name="test"></param>
        /// <param name="minimumSeverity"> (optional, default to Info)</param>
        /// <param name="active"> (optional, default to true)</param>
        /// <param name="verified"> (optional, default to true)</param>
        /// <param name="endpointToAdd"> (optional)</param>
        /// <param name="_file"> (optional)</param>
        /// <param name="pushToJira"> (optional, default to false)</param>
        /// <param name="closeOldFindings"> (optional, default to true)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="buildId"> (optional)</param>
        /// <param name="branchTag"> (optional)</param>
        /// <param name="commitHash"> (optional)</param>
        /// <returns>Task of ReImportScan</returns>
        System.Threading.Tasks.Task<ReImportScan> ReimportScanCreateAsync (DateTime? scanDate, string scanType, int? test, string minimumSeverity = null, bool? active = null, bool? verified = null, int? endpointToAdd = null, ModelFile _file = null, bool? pushToJira = null, bool? closeOldFindings = null, string version = null, string buildId = null, string branchTag = null, string commitHash = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanDate"></param>
        /// <param name="scanType"></param>
        /// <param name="test"></param>
        /// <param name="minimumSeverity"> (optional, default to Info)</param>
        /// <param name="active"> (optional, default to true)</param>
        /// <param name="verified"> (optional, default to true)</param>
        /// <param name="endpointToAdd"> (optional)</param>
        /// <param name="_file"> (optional)</param>
        /// <param name="pushToJira"> (optional, default to false)</param>
        /// <param name="closeOldFindings"> (optional, default to true)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="buildId"> (optional)</param>
        /// <param name="branchTag"> (optional)</param>
        /// <param name="commitHash"> (optional)</param>
        /// <returns>Task of ApiResponse (ReImportScan)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReImportScan>> ReimportScanCreateAsyncWithHttpInfo (DateTime? scanDate, string scanType, int? test, string minimumSeverity = null, bool? active = null, bool? verified = null, int? endpointToAdd = null, ModelFile _file = null, bool? pushToJira = null, bool? closeOldFindings = null, string version = null, string buildId = null, string branchTag = null, string commitHash = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReimportScanApi : IReimportScanApi
    {
        private DefectDojo.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReimportScanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReimportScanApi(String basePath)
        {
            this.Configuration = new DefectDojo.Client.Configuration { BasePath = basePath };

            ExceptionFactory = DefectDojo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReimportScanApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReimportScanApi(DefectDojo.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = DefectDojo.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DefectDojo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DefectDojo.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DefectDojo.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanDate"></param>
        /// <param name="scanType"></param>
        /// <param name="test"></param>
        /// <param name="minimumSeverity"> (optional, default to Info)</param>
        /// <param name="active"> (optional, default to true)</param>
        /// <param name="verified"> (optional, default to true)</param>
        /// <param name="endpointToAdd"> (optional)</param>
        /// <param name="_file"> (optional)</param>
        /// <param name="pushToJira"> (optional, default to false)</param>
        /// <param name="closeOldFindings"> (optional, default to true)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="buildId"> (optional)</param>
        /// <param name="branchTag"> (optional)</param>
        /// <param name="commitHash"> (optional)</param>
        /// <returns>ReImportScan</returns>
        public ReImportScan ReimportScanCreate (DateTime? scanDate, string scanType, int? test, string minimumSeverity = null, bool? active = null, bool? verified = null, int? endpointToAdd = null, ModelFile _file = null, bool? pushToJira = null, bool? closeOldFindings = null, string version = null, string buildId = null, string branchTag = null, string commitHash = null)
        {
             ApiResponse<ReImportScan> localVarResponse = ReimportScanCreateWithHttpInfo(scanDate, scanType, test, minimumSeverity, active, verified, endpointToAdd, _file, pushToJira, closeOldFindings, version, buildId, branchTag, commitHash);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanDate"></param>
        /// <param name="scanType"></param>
        /// <param name="test"></param>
        /// <param name="minimumSeverity"> (optional, default to Info)</param>
        /// <param name="active"> (optional, default to true)</param>
        /// <param name="verified"> (optional, default to true)</param>
        /// <param name="endpointToAdd"> (optional)</param>
        /// <param name="_file"> (optional)</param>
        /// <param name="pushToJira"> (optional, default to false)</param>
        /// <param name="closeOldFindings"> (optional, default to true)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="buildId"> (optional)</param>
        /// <param name="branchTag"> (optional)</param>
        /// <param name="commitHash"> (optional)</param>
        /// <returns>ApiResponse of ReImportScan</returns>
        public ApiResponse< ReImportScan > ReimportScanCreateWithHttpInfo (DateTime? scanDate, string scanType, int? test, string minimumSeverity = null, bool? active = null, bool? verified = null, int? endpointToAdd = null, ModelFile _file = null, bool? pushToJira = null, bool? closeOldFindings = null, string version = null, string buildId = null, string branchTag = null, string commitHash = null)
        {
            // verify the required parameter 'scanDate' is set
            if (scanDate == null)
                throw new ApiException(400, "Missing required parameter 'scanDate' when calling ReimportScanApi->ReimportScanCreate");
            // verify the required parameter 'scanType' is set
            if (scanType == null)
                throw new ApiException(400, "Missing required parameter 'scanType' when calling ReimportScanApi->ReimportScanCreate");
            // verify the required parameter 'test' is set
            if (test == null)
                throw new ApiException(400, "Missing required parameter 'test' when calling ReimportScanApi->ReimportScanCreate");

            var localVarPath = "./reimport-scan/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scanDate != null) localVarFormParams.Add("scan_date", this.Configuration.ApiClient.ParameterToString(scanDate)); // form parameter
            if (minimumSeverity != null) localVarFormParams.Add("minimum_severity", this.Configuration.ApiClient.ParameterToString(minimumSeverity)); // form parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (verified != null) localVarFormParams.Add("verified", this.Configuration.ApiClient.ParameterToString(verified)); // form parameter
            if (scanType != null) localVarFormParams.Add("scan_type", this.Configuration.ApiClient.ParameterToString(scanType)); // form parameter
            if (endpointToAdd != null) localVarFormParams.Add("endpoint_to_add", this.Configuration.ApiClient.ParameterToString(endpointToAdd)); // form parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));
            if (test != null) localVarFormParams.Add("test", this.Configuration.ApiClient.ParameterToString(test)); // form parameter
            if (pushToJira != null) localVarFormParams.Add("push_to_jira", this.Configuration.ApiClient.ParameterToString(pushToJira)); // form parameter
            if (closeOldFindings != null) localVarFormParams.Add("close_old_findings", this.Configuration.ApiClient.ParameterToString(closeOldFindings)); // form parameter
            if (version != null) localVarFormParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // form parameter
            if (buildId != null) localVarFormParams.Add("build_id", this.Configuration.ApiClient.ParameterToString(buildId)); // form parameter
            if (branchTag != null) localVarFormParams.Add("branch_tag", this.Configuration.ApiClient.ParameterToString(branchTag)); // form parameter
            if (commitHash != null) localVarFormParams.Add("commit_hash", this.Configuration.ApiClient.ParameterToString(commitHash)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReimportScanCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReImportScan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ReImportScan) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReImportScan)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanDate"></param>
        /// <param name="scanType"></param>
        /// <param name="test"></param>
        /// <param name="minimumSeverity"> (optional, default to Info)</param>
        /// <param name="active"> (optional, default to true)</param>
        /// <param name="verified"> (optional, default to true)</param>
        /// <param name="endpointToAdd"> (optional)</param>
        /// <param name="_file"> (optional)</param>
        /// <param name="pushToJira"> (optional, default to false)</param>
        /// <param name="closeOldFindings"> (optional, default to true)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="buildId"> (optional)</param>
        /// <param name="branchTag"> (optional)</param>
        /// <param name="commitHash"> (optional)</param>
        /// <returns>Task of ReImportScan</returns>
        public async System.Threading.Tasks.Task<ReImportScan> ReimportScanCreateAsync (DateTime? scanDate, string scanType, int? test, string minimumSeverity = null, bool? active = null, bool? verified = null, int? endpointToAdd = null, ModelFile _file = null, bool? pushToJira = null, bool? closeOldFindings = null, string version = null, string buildId = null, string branchTag = null, string commitHash = null)
        {
             ApiResponse<ReImportScan> localVarResponse = await ReimportScanCreateAsyncWithHttpInfo(scanDate, scanType, test, minimumSeverity, active, verified, endpointToAdd, _file, pushToJira, closeOldFindings, version, buildId, branchTag, commitHash);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DefectDojo.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanDate"></param>
        /// <param name="scanType"></param>
        /// <param name="test"></param>
        /// <param name="minimumSeverity"> (optional, default to Info)</param>
        /// <param name="active"> (optional, default to true)</param>
        /// <param name="verified"> (optional, default to true)</param>
        /// <param name="endpointToAdd"> (optional)</param>
        /// <param name="_file"> (optional)</param>
        /// <param name="pushToJira"> (optional, default to false)</param>
        /// <param name="closeOldFindings"> (optional, default to true)</param>
        /// <param name="version"> (optional)</param>
        /// <param name="buildId"> (optional)</param>
        /// <param name="branchTag"> (optional)</param>
        /// <param name="commitHash"> (optional)</param>
        /// <returns>Task of ApiResponse (ReImportScan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReImportScan>> ReimportScanCreateAsyncWithHttpInfo (DateTime? scanDate, string scanType, int? test, string minimumSeverity = null, bool? active = null, bool? verified = null, int? endpointToAdd = null, ModelFile _file = null, bool? pushToJira = null, bool? closeOldFindings = null, string version = null, string buildId = null, string branchTag = null, string commitHash = null)
        {
            // verify the required parameter 'scanDate' is set
            if (scanDate == null)
                throw new ApiException(400, "Missing required parameter 'scanDate' when calling ReimportScanApi->ReimportScanCreate");
            // verify the required parameter 'scanType' is set
            if (scanType == null)
                throw new ApiException(400, "Missing required parameter 'scanType' when calling ReimportScanApi->ReimportScanCreate");
            // verify the required parameter 'test' is set
            if (test == null)
                throw new ApiException(400, "Missing required parameter 'test' when calling ReimportScanApi->ReimportScanCreate");

            var localVarPath = "./reimport-scan/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scanDate != null) localVarFormParams.Add("scan_date", this.Configuration.ApiClient.ParameterToString(scanDate)); // form parameter
            if (minimumSeverity != null) localVarFormParams.Add("minimum_severity", this.Configuration.ApiClient.ParameterToString(minimumSeverity)); // form parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (verified != null) localVarFormParams.Add("verified", this.Configuration.ApiClient.ParameterToString(verified)); // form parameter
            if (scanType != null) localVarFormParams.Add("scan_type", this.Configuration.ApiClient.ParameterToString(scanType)); // form parameter
            if (endpointToAdd != null) localVarFormParams.Add("endpoint_to_add", this.Configuration.ApiClient.ParameterToString(endpointToAdd)); // form parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));
            if (test != null) localVarFormParams.Add("test", this.Configuration.ApiClient.ParameterToString(test)); // form parameter
            if (pushToJira != null) localVarFormParams.Add("push_to_jira", this.Configuration.ApiClient.ParameterToString(pushToJira)); // form parameter
            if (closeOldFindings != null) localVarFormParams.Add("close_old_findings", this.Configuration.ApiClient.ParameterToString(closeOldFindings)); // form parameter
            if (version != null) localVarFormParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // form parameter
            if (buildId != null) localVarFormParams.Add("build_id", this.Configuration.ApiClient.ParameterToString(buildId)); // form parameter
            if (branchTag != null) localVarFormParams.Add("branch_tag", this.Configuration.ApiClient.ParameterToString(branchTag)); // form parameter
            if (commitHash != null) localVarFormParams.Add("commit_hash", this.Configuration.ApiClient.ParameterToString(commitHash)); // form parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReimportScanCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReImportScan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ReImportScan) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReImportScan)));
        }

    }
}
